
A4988_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e38  08000e40  00001e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e38  08000e38  00001e40  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e38  08000e38  00001e40  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e38  08000e40  00001e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e38  08000e38  00001e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e3c  08000e3c  00001e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000000  08000e40  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000e40  0000208c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017b9  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000643  00000000  00000000  00003623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00003c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ff  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a05  00000000  00000000  00003ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000245c  00000000  00000000  000068d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009610  00000000  00000000  00008d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000498  00000000  00000000  00012384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0001281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e20 	.word	0x08000e20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e20 	.word	0x08000e20

08000204 <TIM2_IRQHandler>:
	pTIMHandle.pTIMx->CR1  &= ~(1 << TIM_CR1_CEN_POS);
	TIM_InterruptEnable(&pTIMHandle,DISABLE);

}

void TIM2_IRQHandler(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[0]);
 8000208:	4802      	ldr	r0, [pc, #8]	@ (8000214 <TIM2_IRQHandler+0x10>)
 800020a:	f000 fc9b 	bl	8000b44 <TIMx_EV_IRQHandling>

}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000001c 	.word	0x2000001c

08000218 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[1]);
 800021c:	4802      	ldr	r0, [pc, #8]	@ (8000228 <TIM3_IRQHandler+0x10>)
 800021e:	f000 fc91 	bl	8000b44 <TIMx_EV_IRQHandling>

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000030 	.word	0x20000030

0800022c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[2]);
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <TIM4_IRQHandler+0x10>)
 8000232:	f000 fc87 	bl	8000b44 <TIMx_EV_IRQHandling>

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000044 	.word	0x20000044

08000240 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	TIMx_EV_IRQHandling(&TIM_handles[3]);
 8000244:	4802      	ldr	r0, [pc, #8]	@ (8000250 <TIM5_IRQHandler+0x10>)
 8000246:	f000 fc7d 	bl	8000b44 <TIMx_EV_IRQHandling>
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000058 	.word	0x20000058

08000254 <TIM_ApplicationEventCallback>:

void TIM_ApplicationEventCallback(TIM_Handle_t *pTIMHandle, uint8_t AppEv){
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	70fb      	strb	r3, [r7, #3]

}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
	...

0800026c <GPIO_Init>:
 *  Created on: Mar 17, 2025
 *      Author: bright
 */
#include "stm32f446xx_GPIO_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f99c 	bl	80005b8 <GPIO_PeriClockControl>

	/*Non-Interrupt Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d81f      	bhi.n	80002c8 <GPIO_Init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	43db      	mvns	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	400a      	ands	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	4619      	mov	r1, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	791b      	ldrb	r3, [r3, #4]
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e0b0      	b.n	800042a <GPIO_Init+0x1be>

	}
	/*Interrupt Mode*/
	else{

		uint8_t index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	089b      	lsrs	r3, r3, #2
 80002ce:	73fb      	strb	r3, [r7, #15]

		uint8_t Port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a99      	ldr	r2, [pc, #612]	@ (800053c <GPIO_Init+0x2d0>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d032      	beq.n	8000340 <GPIO_Init+0xd4>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a98      	ldr	r2, [pc, #608]	@ (8000540 <GPIO_Init+0x2d4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d02b      	beq.n	800033c <GPIO_Init+0xd0>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a96      	ldr	r2, [pc, #600]	@ (8000544 <GPIO_Init+0x2d8>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d024      	beq.n	8000338 <GPIO_Init+0xcc>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a95      	ldr	r2, [pc, #596]	@ (8000548 <GPIO_Init+0x2dc>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d01d      	beq.n	8000334 <GPIO_Init+0xc8>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a93      	ldr	r2, [pc, #588]	@ (800054c <GPIO_Init+0x2e0>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d016      	beq.n	8000330 <GPIO_Init+0xc4>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a92      	ldr	r2, [pc, #584]	@ (8000550 <GPIO_Init+0x2e4>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d00f      	beq.n	800032c <GPIO_Init+0xc0>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a90      	ldr	r2, [pc, #576]	@ (8000554 <GPIO_Init+0x2e8>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d008      	beq.n	8000328 <GPIO_Init+0xbc>
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a8f      	ldr	r2, [pc, #572]	@ (8000558 <GPIO_Init+0x2ec>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d101      	bne.n	8000324 <GPIO_Init+0xb8>
 8000320:	2307      	movs	r3, #7
 8000322:	e00e      	b.n	8000342 <GPIO_Init+0xd6>
 8000324:	2300      	movs	r3, #0
 8000326:	e00c      	b.n	8000342 <GPIO_Init+0xd6>
 8000328:	2306      	movs	r3, #6
 800032a:	e00a      	b.n	8000342 <GPIO_Init+0xd6>
 800032c:	2305      	movs	r3, #5
 800032e:	e008      	b.n	8000342 <GPIO_Init+0xd6>
 8000330:	2304      	movs	r3, #4
 8000332:	e006      	b.n	8000342 <GPIO_Init+0xd6>
 8000334:	2303      	movs	r3, #3
 8000336:	e004      	b.n	8000342 <GPIO_Init+0xd6>
 8000338:	2302      	movs	r3, #2
 800033a:	e002      	b.n	8000342 <GPIO_Init+0xd6>
 800033c:	2301      	movs	r3, #1
 800033e:	e000      	b.n	8000342 <GPIO_Init+0xd6>
 8000340:	2300      	movs	r3, #0
 8000342:	73bb      	strb	r3, [r7, #14]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	2b04      	cmp	r3, #4
 800034a:	d117      	bne.n	800037c <GPIO_Init+0x110>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800034c:	4b83      	ldr	r3, [pc, #524]	@ (800055c <GPIO_Init+0x2f0>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7912      	ldrb	r2, [r2, #4]
 8000354:	4611      	mov	r1, r2
 8000356:	2201      	movs	r2, #1
 8000358:	408a      	lsls	r2, r1
 800035a:	4611      	mov	r1, r2
 800035c:	4a7f      	ldr	r2, [pc, #508]	@ (800055c <GPIO_Init+0x2f0>)
 800035e:	430b      	orrs	r3, r1
 8000360:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000362:	4b7e      	ldr	r3, [pc, #504]	@ (800055c <GPIO_Init+0x2f0>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	7912      	ldrb	r2, [r2, #4]
 800036a:	4611      	mov	r1, r2
 800036c:	2201      	movs	r2, #1
 800036e:	408a      	lsls	r2, r1
 8000370:	43d2      	mvns	r2, r2
 8000372:	4611      	mov	r1, r2
 8000374:	4a79      	ldr	r2, [pc, #484]	@ (800055c <GPIO_Init+0x2f0>)
 8000376:	400b      	ands	r3, r1
 8000378:	6093      	str	r3, [r2, #8]
 800037a:	e031      	b.n	80003e0 <GPIO_Init+0x174>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	2b05      	cmp	r3, #5
 8000382:	d117      	bne.n	80003b4 <GPIO_Init+0x148>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000384:	4b75      	ldr	r3, [pc, #468]	@ (800055c <GPIO_Init+0x2f0>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	7912      	ldrb	r2, [r2, #4]
 800038c:	4611      	mov	r1, r2
 800038e:	2201      	movs	r2, #1
 8000390:	408a      	lsls	r2, r1
 8000392:	4611      	mov	r1, r2
 8000394:	4a71      	ldr	r2, [pc, #452]	@ (800055c <GPIO_Init+0x2f0>)
 8000396:	430b      	orrs	r3, r1
 8000398:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800039a:	4b70      	ldr	r3, [pc, #448]	@ (800055c <GPIO_Init+0x2f0>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	7912      	ldrb	r2, [r2, #4]
 80003a2:	4611      	mov	r1, r2
 80003a4:	2201      	movs	r2, #1
 80003a6:	408a      	lsls	r2, r1
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a6b      	ldr	r2, [pc, #428]	@ (800055c <GPIO_Init+0x2f0>)
 80003ae:	400b      	ands	r3, r1
 80003b0:	60d3      	str	r3, [r2, #12]
 80003b2:	e015      	b.n	80003e0 <GPIO_Init+0x174>
		}
		else{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b4:	4b69      	ldr	r3, [pc, #420]	@ (800055c <GPIO_Init+0x2f0>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7912      	ldrb	r2, [r2, #4]
 80003bc:	4611      	mov	r1, r2
 80003be:	2201      	movs	r2, #1
 80003c0:	408a      	lsls	r2, r1
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a65      	ldr	r2, [pc, #404]	@ (800055c <GPIO_Init+0x2f0>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ca:	4b64      	ldr	r3, [pc, #400]	@ (800055c <GPIO_Init+0x2f0>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	7912      	ldrb	r2, [r2, #4]
 80003d2:	4611      	mov	r1, r2
 80003d4:	2201      	movs	r2, #1
 80003d6:	408a      	lsls	r2, r1
 80003d8:	4611      	mov	r1, r2
 80003da:	4a60      	ldr	r2, [pc, #384]	@ (800055c <GPIO_Init+0x2f0>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	60d3      	str	r3, [r2, #12]

		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 80003e0:	4b5f      	ldr	r3, [pc, #380]	@ (8000560 <GPIO_Init+0x2f4>)
 80003e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000560 <GPIO_Init+0x2f4>)
 80003e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ea:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[index] |= (Port << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4));
 80003ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000564 <GPIO_Init+0x2f8>)
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	3302      	adds	r3, #2
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	7bb9      	ldrb	r1, [r7, #14]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	f003 0303 	and.w	r3, r3, #3
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	4618      	mov	r0, r3
 8000408:	4956      	ldr	r1, [pc, #344]	@ (8000564 <GPIO_Init+0x2f8>)
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4302      	orrs	r2, r0
 800040e:	3302      	adds	r3, #2
 8000410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000414:	4b51      	ldr	r3, [pc, #324]	@ (800055c <GPIO_Init+0x2f0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a4d      	ldr	r2, [pc, #308]	@ (800055c <GPIO_Init+0x2f0>)
 8000426:	430b      	orrs	r3, r1
 8000428:	6013      	str	r3, [r2, #0]


	}

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	4619      	mov	r1, r3
 8000436:	2303      	movs	r3, #3
 8000438:	408b      	lsls	r3, r1
 800043a:	43db      	mvns	r3, r3
 800043c:	4619      	mov	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	400a      	ands	r2, r1
 8000444:	609a      	str	r2, [r3, #8]
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	799b      	ldrb	r3, [r3, #6]
 8000450:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	430a      	orrs	r2, r1
 8000464:	609a      	str	r2, [r3, #8]


	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	4619      	mov	r1, r3
 8000472:	2303      	movs	r3, #3
 8000474:	408b      	lsls	r3, r1
 8000476:	43db      	mvns	r3, r3
 8000478:	4619      	mov	r1, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	400a      	ands	r2, r1
 8000480:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	79db      	ldrb	r3, [r3, #7]
 800048c:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	4619      	mov	r1, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	430a      	orrs	r2, r1
 80004a0:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2301      	movs	r3, #1
 80004b0:	408b      	lsls	r3, r1
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	400a      	ands	r2, r1
 80004bc:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7a1b      	ldrb	r3, [r3, #8]
 80004c8:	4619      	mov	r1, r3
					   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	430a      	orrs	r2, r1
 80004da:	605a      	str	r2, [r3, #4]

	/*Alternate Function Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d164      	bne.n	80005ae <GPIO_Init+0x342>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7 && pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 16 ){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	d93d      	bls.n	8000568 <GPIO_Init+0x2fc>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	d939      	bls.n	8000568 <GPIO_Init+0x2fc>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	210f      	movs	r1, #15
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	4619      	mov	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	400a      	ands	r2, r1
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7a5b      	ldrb	r3, [r3, #9]
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24

		}
	}


}
 800053a:	e038      	b.n	80005ae <GPIO_Init+0x342>
 800053c:	40020000 	.word	0x40020000
 8000540:	40020400 	.word	0x40020400
 8000544:	40020800 	.word	0x40020800
 8000548:	40020c00 	.word	0x40020c00
 800054c:	40021000 	.word	0x40021000
 8000550:	40021400 	.word	0x40021400
 8000554:	40021800 	.word	0x40021800
 8000558:	40021c00 	.word	0x40021c00
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40023800 	.word	0x40023800
 8000564:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6a1a      	ldr	r2, [r3, #32]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	210f      	movs	r1, #15
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	400a      	ands	r2, r1
 8000588:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a1a      	ldr	r2, [r3, #32]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7a5b      	ldrb	r3, [r3, #9]
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	430a      	orrs	r2, r1
 80005ac:	621a      	str	r2, [r3, #32]
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop

080005b8 <GPIO_PeriClockControl>:


}

/*Enable Clock of the given GPIO*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
//	assert(pGPIOx == NULL);
	if(ENorDI == ENABLE){
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d157      	bne.n	800067a <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == pGPIOA){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a59      	ldr	r2, [pc, #356]	@ (8000734 <GPIO_PeriClockControl+0x17c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80005d2:	4b59      	ldr	r3, [pc, #356]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a58      	ldr	r2, [pc, #352]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == pGPIOH){

					GPIOH_PCLK_DI();
				}
	}
}
 80005de:	e0a3      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOB){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a56      	ldr	r2, [pc, #344]	@ (800073c <GPIO_PeriClockControl+0x184>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d106      	bne.n	80005f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005e8:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a52      	ldr	r2, [pc, #328]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005f4:	e098      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOC){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a51      	ldr	r2, [pc, #324]	@ (8000740 <GPIO_PeriClockControl+0x188>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d106      	bne.n	800060c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a4d      	ldr	r2, [pc, #308]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800060a:	e08d      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOD){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a4d      	ldr	r2, [pc, #308]	@ (8000744 <GPIO_PeriClockControl+0x18c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000614:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	4a47      	ldr	r2, [pc, #284]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000620:	e082      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOE){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a48      	ldr	r2, [pc, #288]	@ (8000748 <GPIO_PeriClockControl+0x190>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800062a:	4b43      	ldr	r3, [pc, #268]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000630:	f043 0310 	orr.w	r3, r3, #16
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000636:	e077      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOF){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a44      	ldr	r2, [pc, #272]	@ (800074c <GPIO_PeriClockControl+0x194>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800064c:	e06c      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOG){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a3f      	ldr	r2, [pc, #252]	@ (8000750 <GPIO_PeriClockControl+0x198>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000656:	4b38      	ldr	r3, [pc, #224]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a37      	ldr	r2, [pc, #220]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000662:	e061      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOH){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a3b      	ldr	r2, [pc, #236]	@ (8000754 <GPIO_PeriClockControl+0x19c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d15d      	bne.n	8000728 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	4a31      	ldr	r2, [pc, #196]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000676:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000678:	e056      	b.n	8000728 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == pGPIOA){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a2d      	ldr	r2, [pc, #180]	@ (8000734 <GPIO_PeriClockControl+0x17c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2c      	ldr	r2, [pc, #176]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800068e:	e04b      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOB){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <GPIO_PeriClockControl+0x184>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d106      	bne.n	80006a6 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800069e:	f023 0302 	bic.w	r3, r3, #2
 80006a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006a4:	e040      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOC){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a25      	ldr	r2, [pc, #148]	@ (8000740 <GPIO_PeriClockControl+0x188>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006b4:	f023 0304 	bic.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ba:	e035      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOD){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <GPIO_PeriClockControl+0x18c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d106      	bne.n	80006d2 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006ca:	f023 0308 	bic.w	r3, r3, #8
 80006ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006d0:	e02a      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOE){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <GPIO_PeriClockControl+0x190>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006e0:	f023 0310 	bic.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006e6:	e01f      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOF){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a18      	ldr	r2, [pc, #96]	@ (800074c <GPIO_PeriClockControl+0x194>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 80006f6:	f023 0320 	bic.w	r3, r3, #32
 80006fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006fc:	e014      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOG){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <GPIO_PeriClockControl+0x198>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800070c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000712:	e009      	b.n	8000728 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOH){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <GPIO_PeriClockControl+0x19c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d105      	bne.n	8000728 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000720:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <GPIO_PeriClockControl+0x180>)
 8000722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000726:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40020000 	.word	0x40020000
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00

08000758 <TIM_Init>:
 */
#include "stm32f446xx_Timer_driver.h"


void static TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle);
void TIM_Init(TIM_Handle_t *pTIMHandle){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

	TIM_PeriClockControl(pTIMHandle->pTIMx,ENABLE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f83a 	bl	80007e0 <TIM_PeriClockControl>
	// Set Prescaler - HSI SysCLK is 16 MHZ
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIMx_PinConfig.TIM_Prescaler - 1;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3a01      	subs	r2, #1
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
	// Set ARR corresponded to the given period
	// ARR = Given Periode * (SysCLK/Prescaler)
	pTIMHandle->pTIMx->ARR = (pTIMHandle->TIMx_PinConfig.TIM_ARR) - 1 ;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3a01      	subs	r2, #1
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable Capture/Compare Mode
	pTIMHandle->pTIMx->CCER  |= (1 << 4 * (pTIMHandle->TIMx_PinConfig.TIM_Channel-1));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6a1a      	ldr	r2, [r3, #32]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7c5b      	ldrb	r3, [r3, #17]
 800078e:	3b01      	subs	r3, #1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	4619      	mov	r1, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	430a      	orrs	r2, r1
 80007a0:	621a      	str	r2, [r3, #32]
	// Set Dir default is countup
	pTIMHandle->pTIMx->CR1  &= ~(1 << TIM_CR1_DIR_POS);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0210 	bic.w	r2, r2, #16
 80007b0:	601a      	str	r2, [r3, #0]
	if(pTIMHandle->TIMx_PinConfig.TIM_CountDir== TIMx_CR1_DIR_UPWARDS){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7c1b      	ldrb	r3, [r3, #16]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d107      	bne.n	80007ca <TIM_Init+0x72>
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_DIR_POS);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 0210 	orr.w	r2, r2, #16
 80007c8:	601a      	str	r2, [r3, #0]
	}

	if(pTIMHandle->TIMx_PinConfig.TIM_Mode == TIMx_MODE_COMPARE){
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7c9b      	ldrb	r3, [r3, #18]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <TIM_Init+0x80>
		//Set Compare mode
		TIM_SetCompareModeChannel(pTIMHandle);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f872 	bl	80008bc <TIM_SetCompareModeChannel>
	}else{
		//Set Capture mode
	}


}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <TIM_PeriClockControl>:

/*Enable Clock of the given Timer*/
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t ENorDI){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]

	if(ENorDI == ENABLE){
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d12b      	bne.n	800084a <TIM_PeriClockControl+0x6a>

		if(pTIMx == pTIM2){
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007f8:	d106      	bne.n	8000808 <TIM_PeriClockControl+0x28>
			TIM2_PCLK_EN();
 80007fa:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a2b      	ldr	r2, [pc, #172]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pTIMx == pTIM5){
			TIM5_PCLK_DI();
		}

	}
}
 8000806:	e04b      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <TIM_PeriClockControl+0xd0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 8000810:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a25      	ldr	r2, [pc, #148]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800081c:	e040      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <TIM_PeriClockControl+0xd4>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000832:	e035      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a20      	ldr	r2, [pc, #128]	@ (80008b8 <TIM_PeriClockControl+0xd8>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d131      	bne.n	80008a0 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000848:	e02a      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		if(pTIMx == pTIM2){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000850:	d106      	bne.n	8000860 <TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000858:	f063 0301 	orn	r3, r3, #1
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800085e:	e01f      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <TIM_PeriClockControl+0xd0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 800086e:	f063 0302 	orn	r3, r3, #2
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000874:	e014      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <TIM_PeriClockControl+0xd4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000884:	f063 0304 	orn	r3, r3, #4
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800088a:	e009      	b.n	80008a0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <TIM_PeriClockControl+0xd8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <TIM_PeriClockControl+0xcc>)
 800089a:	f063 0308 	orn	r3, r3, #8
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40000400 	.word	0x40000400
 80008b4:	40000800 	.word	0x40000800
 80008b8:	40000c00 	.word	0x40000c00

080008bc <TIM_SetCompareModeChannel>:

/*Enable Clock of the given Timer*/
void TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

		if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH1){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7c5b      	ldrb	r3, [r3, #17]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d11f      	bne.n	800090c <TIM_SetCompareModeChannel+0x50>
			// CCR1 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	68d2      	ldr	r2, [r2, #12]
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
			//Clear TIM_CCMR1_OC1M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC1M_POS);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	699a      	ldr	r2, [r3, #24]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80008e4:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC1M_POS);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6999      	ldr	r1, [r3, #24]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7cdb      	ldrb	r3, [r3, #19]
 80008f0:	011a      	lsls	r2, r3, #4
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	619a      	str	r2, [r3, #24]
			//Pre-load Buffer Enable
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC1PE_POS);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0208 	orr.w	r2, r2, #8
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	e06a      	b.n	80009e2 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH2){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7c5b      	ldrb	r3, [r3, #17]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d11f      	bne.n	8000954 <TIM_SetCompareModeChannel+0x98>
			// CCR2 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	68d2      	ldr	r2, [r2, #12]
 800091c:	639a      	str	r2, [r3, #56]	@ 0x38
			//Clear TIM_CCMR1_OC2M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC2M_POS);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	699a      	ldr	r2, [r3, #24]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800092c:	619a      	str	r2, [r3, #24]
			//Set TIM_CCMR1_OC2M_POS MODE
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC2M_POS);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6999      	ldr	r1, [r3, #24]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7cdb      	ldrb	r3, [r3, #19]
 8000938:	031a      	lsls	r2, r3, #12
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC2PE_POS);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	699a      	ldr	r2, [r3, #24]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000950:	619a      	str	r2, [r3, #24]
 8000952:	e046      	b.n	80009e2 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH3){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7c5b      	ldrb	r3, [r3, #17]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d11f      	bne.n	800099c <TIM_SetCompareModeChannel+0xe0>
			// CCR3 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	68d2      	ldr	r2, [r2, #12]
 8000964:	63da      	str	r2, [r3, #60]	@ 0x3c
			//Clear TIM_CCMR2_OC3M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC3M_POS);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000974:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC3M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC3M_POS);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69d9      	ldr	r1, [r3, #28]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7cdb      	ldrb	r3, [r3, #19]
 8000980:	011a      	lsls	r2, r3, #4
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC3PE_POS);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0208 	orr.w	r2, r2, #8
 8000998:	61da      	str	r2, [r3, #28]
 800099a:	e022      	b.n	80009e2 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel== TIMx_CH4){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7c5b      	ldrb	r3, [r3, #17]
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d11e      	bne.n	80009e2 <TIM_SetCompareModeChannel+0x126>
			// CCR4 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68d2      	ldr	r2, [r2, #12]
 80009ac:	641a      	str	r2, [r3, #64]	@ 0x40
			//Clear TIM_CCMR2_OC4M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC4M_POS);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80009bc:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC4M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC4M_POS);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	69d9      	ldr	r1, [r3, #28]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7cdb      	ldrb	r3, [r3, #19]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC4PE_POS);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	69da      	ldr	r2, [r3, #28]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80009e0:	61da      	str	r2, [r3, #28]

		}
		//Auto reload pre-load Enable
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_ARPE_POS);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f0:	601a      	str	r2, [r3, #0]
		//Enable Counter
		// pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);


}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <TIM_InterruptEnable>:
/******************************IRQ Enable*******************************/
void TIM_InterruptEnable(TIM_Handle_t *pTIMHandle,uint8_t ENorDI){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	//Enable Interrupt Mode

	if(ENorDI == ENABLE){
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <TIM_InterruptEnable+0x24>

		pTIMHandle->pTIMx->DIER  |= (1 << TIM_DIER_UIE_POS);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f042 0201 	orr.w	r2, r2, #1
 8000a1c:	60da      	str	r2, [r3, #12]
	}
	else{
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
	}

}
 8000a1e:	e007      	b.n	8000a30 <TIM_InterruptEnable+0x34>
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
	...

08000a3c <TIM_IRQInterruptConfig>:

/******************************IRQ Configuration*******************************/
void TIM_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	/*Configure IRQ number of TIM
	 *ISER Interrupt Set-enable Register
	 * */

	if(ENorDI == ENABLE){
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d133      	bne.n	8000aba <TIM_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b1f      	cmp	r3, #31
 8000a56:	d80a      	bhi.n	8000a6e <TIM_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <TIM_IRQInterruptConfig+0xf0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <TIM_IRQInterruptConfig+0xf0>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 64 && IRQNumber <96){
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000a6c:	e059      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b1f      	cmp	r3, #31
 8000a72:	d90f      	bls.n	8000a94 <TIM_IRQInterruptConfig+0x58>
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a78:	d80c      	bhi.n	8000a94 <TIM_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <TIM_IRQInterruptConfig+0xf4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	f002 021f 	and.w	r2, r2, #31
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <TIM_IRQInterruptConfig+0xf4>)
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e046      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a98:	d943      	bls.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a9e:	d840      	bhi.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <TIM_IRQInterruptConfig+0xf8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <TIM_IRQInterruptConfig+0xf8>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	e033      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b1f      	cmp	r3, #31
 8000abe:	d80a      	bhi.n	8000ad6 <TIM_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= (1 << IRQNumber);
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <TIM_IRQInterruptConfig+0xfc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a1a      	ldr	r2, [pc, #104]	@ (8000b38 <TIM_IRQInterruptConfig+0xfc>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	e025      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b1f      	cmp	r3, #31
 8000ada:	d90f      	bls.n	8000afc <TIM_IRQInterruptConfig+0xc0>
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ae0:	d80c      	bhi.n	8000afc <TIM_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <TIM_IRQInterruptConfig+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	f002 021f 	and.w	r2, r2, #31
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f202 	lsl.w	r2, r1, r2
 8000af2:	4611      	mov	r1, r2
 8000af4:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <TIM_IRQInterruptConfig+0x100>)
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e012      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b00:	d90f      	bls.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b06:	d80c      	bhi.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <TIM_IRQInterruptConfig+0x104>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b12:	2101      	movs	r1, #1
 8000b14:	fa01 f202 	lsl.w	r2, r1, r2
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <TIM_IRQInterruptConfig+0x104>)
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	e7ff      	b.n	8000b22 <TIM_IRQInterruptConfig+0xe6>
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000e104 	.word	0xe000e104
 8000b34:	e000e108 	.word	0xe000e108
 8000b38:	e000e180 	.word	0xe000e180
 8000b3c:	e000e184 	.word	0xe000e184
 8000b40:	e000e188 	.word	0xe000e188

08000b44 <TIMx_EV_IRQHandling>:

/******************************Event Handling*******************************/
void TIMx_EV_IRQHandling(TIM_Handle_t *pTIMHandle){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	// ARR Overflow
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_UIF_POS)){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <TIMx_EV_IRQHandling+0x2e>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);  // Clear update UIF flag
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_UIF);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fb71 	bl	8000254 <TIM_ApplicationEventCallback>
	}

	// Compare mode

	// Channel 1 Compare triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC1IF_POS )){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00b      	beq.n	8000b98 <TIMx_EV_IRQHandling+0x54>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC1IF_POS);  // Clear update CC1IF flag
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0202 	bic.w	r2, r2, #2
 8000b8e:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_CC1IF);
 8000b90:	2101      	movs	r1, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fb5e 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 2 Compare triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC2IF_POS )){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00b      	beq.n	8000bbe <TIMx_EV_IRQHandling+0x7a>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC2IF_POS);  // Clear update CC2IF flag
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0204 	bic.w	r2, r2, #4
 8000bb4:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_CC2IF);
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fb4b 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 3 Compare triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC3IF_POS )){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <TIMx_EV_IRQHandling+0xa0>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC3IF_POS);  // Clear update CC3IF flag
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0208 	bic.w	r2, r2, #8
 8000bda:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_CC3IF);
 8000bdc:	2103      	movs	r1, #3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fb38 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 4 Compare triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC4IF_POS )){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <TIMx_EV_IRQHandling+0xc6>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC4IF_POS);  // Clear update CC14F flag
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0210 	bic.w	r2, r2, #16
 8000c00:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_CC4IF);
 8000c02:	2104      	movs	r1, #4
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fb25 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// External Interrupt, triggered when the timer is in slave mode from external source
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_TIF_POS )){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <TIMx_EV_IRQHandling+0xec>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_TIF_POS);  // Clear update TIF flag
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c26:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_TIF);
 8000c28:	2105      	movs	r1, #5
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fb12 	bl	8000254 <TIM_ApplicationEventCallback>
	}

	// Capture mode

	// Channel 1 over-capture triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC1OF_POS )){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00b      	beq.n	8000c56 <TIMx_EV_IRQHandling+0x112>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC1OF_POS);  // Clear update CC1IF flag
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c4c:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC1OF);
 8000c4e:	2106      	movs	r1, #6
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff faff 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 2 over-capture triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC2OF_POS )){
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <TIMx_EV_IRQHandling+0x138>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC2OF_POS);  // Clear update CC2IF flag
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c72:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC2OF);
 8000c74:	2107      	movs	r1, #7
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff faec 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 3 over-capture triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC3OF_POS )){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <TIMx_EV_IRQHandling+0x15e>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC3OF_POS);  // Clear update CC3IF flag
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c98:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC3OF);
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fad9 	bl	8000254 <TIM_ApplicationEventCallback>
	}
	// Channel 4 over-capture triggered
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC4OF_POS )){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <TIMx_EV_IRQHandling+0x184>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC4OF_POS);  // Clear update CC14F flag
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000cbe:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC4OF);
 8000cc0:	2109      	movs	r1, #9
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fac6 	bl	8000254 <TIM_ApplicationEventCallback>
	}

}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <main>:
TIM_Handle_t PWM2;
static uint32_t pulse = 1;
static uint8_t status = 1;
// 1 = UP and 0 = DOWN
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0



	memset(&STEP,0,sizeof(STEP));
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <main+0x98>)
 8000cda:	f000 f874 	bl	8000dc6 <memset>
	memset(&PWM2,0,sizeof(PWM2));
 8000cde:	2214      	movs	r2, #20
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0x9c>)
 8000ce4:	f000 f86f 	bl	8000dc6 <memset>
	/*Always initiate clock first before data line*/
	// PA5 ALternate 1 TIM2_CH1
	STEP.pGPIOx = pGPIOA;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <main+0x98>)
 8000cea:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <main+0xa0>)
 8000cec:	601a      	str	r2, [r3, #0]
	STEP.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_ALTF;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <main+0x98>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	715a      	strb	r2, [r3, #5]
	STEP.GPIO_PinConfig.GPIO_PinAltFunMode = 1;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <main+0x98>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	725a      	strb	r2, [r3, #9]
	STEP.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <main+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	721a      	strb	r2, [r3, #8]
	STEP.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <main+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	71da      	strb	r2, [r3, #7]
	STEP.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <main+0x98>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	719a      	strb	r2, [r3, #6]
	STEP.GPIO_PinConfig.GPIO_PinNumber = 5;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <main+0x98>)
 8000d0e:	2205      	movs	r2, #5
 8000d10:	711a      	strb	r2, [r3, #4]

	GPIO_Init(&STEP);
 8000d12:	4815      	ldr	r0, [pc, #84]	@ (8000d68 <main+0x98>)
 8000d14:	f7ff faaa 	bl	800026c <GPIO_Init>

	PWM2.pTIMx = pTIM2;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <main+0x9c>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
	PWM2.TIMx_PinConfig.TIM_Prescaler = 16;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <main+0x9c>)
 8000d22:	2210      	movs	r2, #16
 8000d24:	605a      	str	r2, [r3, #4]
	PWM2.TIMx_PinConfig.TIM_CountDir = UPWARDS;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <main+0x9c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	741a      	strb	r2, [r3, #16]
	PWM2.TIMx_PinConfig.TIM_Channel = TIMx_CH1;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <main+0x9c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	745a      	strb	r2, [r3, #17]
	PWM2.TIMx_PinConfig.TIM_Mode = TIMx_MODE_COMPARE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <main+0x9c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	749a      	strb	r2, [r3, #18]
	PWM2.TIMx_PinConfig.TIM_CMP_Mode = TIMx_COMPARE_MODE_PWM1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <main+0x9c>)
 8000d3a:	2206      	movs	r2, #6
 8000d3c:	74da      	strb	r2, [r3, #19]
	PWM2.TIMx_PinConfig.TIM_ARR = 1000;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <main+0x9c>)
 8000d40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d44:	609a      	str	r2, [r3, #8]
	PWM2.TIMx_PinConfig.TIM_CCR = 50;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <main+0x9c>)
 8000d48:	2232      	movs	r2, #50	@ 0x32
 8000d4a:	60da      	str	r2, [r3, #12]

	TIM_Init(&PWM2);
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <main+0x9c>)
 8000d4e:	f7ff fd03 	bl	8000758 <TIM_Init>
	TIM_InterruptEnable(&PWM2,ENABLE);
 8000d52:	2101      	movs	r1, #1
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <main+0x9c>)
 8000d56:	f7ff fe51 	bl	80009fc <TIM_InterruptEnable>
	TIM_IRQInterruptConfig(IRQ_NO_TIM2,ENABLE);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	201c      	movs	r0, #28
 8000d5e:	f7ff fe6d 	bl	8000a3c <TIM_IRQInterruptConfig>
    /* Loop forever */
	for(;;){
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <main+0x92>
 8000d66:	bf00      	nop
 8000d68:	2000006c 	.word	0x2000006c
 8000d6c:	20000078 	.word	0x20000078
 8000d70:	40020000 	.word	0x40020000

08000d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da2:	f000 f819 	bl	8000dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da6:	f7ff ff93 	bl	8000cd0 <main>

08000daa <LoopForever>:

LoopForever:
  b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   r0, =_estack
 8000dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000db8:	08000e40 	.word	0x08000e40
  ldr r2, =_sbss
 8000dbc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dc0:	2000008c 	.word	0x2000008c

08000dc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>

08000dc6 <memset>:
 8000dc6:	4402      	add	r2, r0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <memset+0xa>
 8000dce:	4770      	bx	lr
 8000dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8000dd4:	e7f9      	b.n	8000dca <memset+0x4>
	...

08000dd8 <__libc_init_array>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	4d0d      	ldr	r5, [pc, #52]	@ (8000e10 <__libc_init_array+0x38>)
 8000ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8000e14 <__libc_init_array+0x3c>)
 8000dde:	1b64      	subs	r4, r4, r5
 8000de0:	10a4      	asrs	r4, r4, #2
 8000de2:	2600      	movs	r6, #0
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d109      	bne.n	8000dfc <__libc_init_array+0x24>
 8000de8:	4d0b      	ldr	r5, [pc, #44]	@ (8000e18 <__libc_init_array+0x40>)
 8000dea:	4c0c      	ldr	r4, [pc, #48]	@ (8000e1c <__libc_init_array+0x44>)
 8000dec:	f000 f818 	bl	8000e20 <_init>
 8000df0:	1b64      	subs	r4, r4, r5
 8000df2:	10a4      	asrs	r4, r4, #2
 8000df4:	2600      	movs	r6, #0
 8000df6:	42a6      	cmp	r6, r4
 8000df8:	d105      	bne.n	8000e06 <__libc_init_array+0x2e>
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e00:	4798      	blx	r3
 8000e02:	3601      	adds	r6, #1
 8000e04:	e7ee      	b.n	8000de4 <__libc_init_array+0xc>
 8000e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e0a:	4798      	blx	r3
 8000e0c:	3601      	adds	r6, #1
 8000e0e:	e7f2      	b.n	8000df6 <__libc_init_array+0x1e>
 8000e10:	08000e38 	.word	0x08000e38
 8000e14:	08000e38 	.word	0x08000e38
 8000e18:	08000e38 	.word	0x08000e38
 8000e1c:	08000e3c 	.word	0x08000e3c

08000e20 <_init>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr

08000e2c <_fini>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr
