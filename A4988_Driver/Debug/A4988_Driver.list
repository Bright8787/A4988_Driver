
A4988_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000092c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000af0  08000af8  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000af0  08000af0  00001af8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000af0  08000af0  00001af8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000af0  08000af8  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af0  08000af0  00001af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000af4  08000af4  00001af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000af8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000af8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000106c  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ac  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00002f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a2  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011ad  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000189a  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009264  00000000  00000000  00005b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ed75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c8  00000000  00000000  0000edb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ad8 	.word	0x08000ad8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000ad8 	.word	0x08000ad8

08000204 <GPIO_Init>:
 *  Created on: Mar 17, 2025
 *      Author: bright
 */
#include "stm32f446xx_GPIO_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2101      	movs	r1, #1
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f99c 	bl	8000550 <GPIO_PeriClockControl>

	/*Non-Interrupt Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	795b      	ldrb	r3, [r3, #5]
 800021c:	2b03      	cmp	r3, #3
 800021e:	d81f      	bhi.n	8000260 <GPIO_Init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	791b      	ldrb	r3, [r3, #4]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	400a      	ands	r2, r1
 800023c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	795b      	ldrb	r3, [r3, #5]
 8000248:	4619      	mov	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	791b      	ldrb	r3, [r3, #4]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	4619      	mov	r1, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	430a      	orrs	r2, r1
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	e0b0      	b.n	80003c2 <GPIO_Init+0x1be>

	}
	/*Interrupt Mode*/
	else{

		uint8_t index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	089b      	lsrs	r3, r3, #2
 8000266:	73fb      	strb	r3, [r7, #15]

		uint8_t Port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a99      	ldr	r2, [pc, #612]	@ (80004d4 <GPIO_Init+0x2d0>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d032      	beq.n	80002d8 <GPIO_Init+0xd4>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a98      	ldr	r2, [pc, #608]	@ (80004d8 <GPIO_Init+0x2d4>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d02b      	beq.n	80002d4 <GPIO_Init+0xd0>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a96      	ldr	r2, [pc, #600]	@ (80004dc <GPIO_Init+0x2d8>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d024      	beq.n	80002d0 <GPIO_Init+0xcc>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a95      	ldr	r2, [pc, #596]	@ (80004e0 <GPIO_Init+0x2dc>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d01d      	beq.n	80002cc <GPIO_Init+0xc8>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a93      	ldr	r2, [pc, #588]	@ (80004e4 <GPIO_Init+0x2e0>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d016      	beq.n	80002c8 <GPIO_Init+0xc4>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a92      	ldr	r2, [pc, #584]	@ (80004e8 <GPIO_Init+0x2e4>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d00f      	beq.n	80002c4 <GPIO_Init+0xc0>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a90      	ldr	r2, [pc, #576]	@ (80004ec <GPIO_Init+0x2e8>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d008      	beq.n	80002c0 <GPIO_Init+0xbc>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a8f      	ldr	r2, [pc, #572]	@ (80004f0 <GPIO_Init+0x2ec>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d101      	bne.n	80002bc <GPIO_Init+0xb8>
 80002b8:	2307      	movs	r3, #7
 80002ba:	e00e      	b.n	80002da <GPIO_Init+0xd6>
 80002bc:	2300      	movs	r3, #0
 80002be:	e00c      	b.n	80002da <GPIO_Init+0xd6>
 80002c0:	2306      	movs	r3, #6
 80002c2:	e00a      	b.n	80002da <GPIO_Init+0xd6>
 80002c4:	2305      	movs	r3, #5
 80002c6:	e008      	b.n	80002da <GPIO_Init+0xd6>
 80002c8:	2304      	movs	r3, #4
 80002ca:	e006      	b.n	80002da <GPIO_Init+0xd6>
 80002cc:	2303      	movs	r3, #3
 80002ce:	e004      	b.n	80002da <GPIO_Init+0xd6>
 80002d0:	2302      	movs	r3, #2
 80002d2:	e002      	b.n	80002da <GPIO_Init+0xd6>
 80002d4:	2301      	movs	r3, #1
 80002d6:	e000      	b.n	80002da <GPIO_Init+0xd6>
 80002d8:	2300      	movs	r3, #0
 80002da:	73bb      	strb	r3, [r7, #14]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	d117      	bne.n	8000314 <GPIO_Init+0x110>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002e4:	4b83      	ldr	r3, [pc, #524]	@ (80004f4 <GPIO_Init+0x2f0>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	7912      	ldrb	r2, [r2, #4]
 80002ec:	4611      	mov	r1, r2
 80002ee:	2201      	movs	r2, #1
 80002f0:	408a      	lsls	r2, r1
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a7f      	ldr	r2, [pc, #508]	@ (80004f4 <GPIO_Init+0x2f0>)
 80002f6:	430b      	orrs	r3, r1
 80002f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002fa:	4b7e      	ldr	r3, [pc, #504]	@ (80004f4 <GPIO_Init+0x2f0>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	7912      	ldrb	r2, [r2, #4]
 8000302:	4611      	mov	r1, r2
 8000304:	2201      	movs	r2, #1
 8000306:	408a      	lsls	r2, r1
 8000308:	43d2      	mvns	r2, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a79      	ldr	r2, [pc, #484]	@ (80004f4 <GPIO_Init+0x2f0>)
 800030e:	400b      	ands	r3, r1
 8000310:	6093      	str	r3, [r2, #8]
 8000312:	e031      	b.n	8000378 <GPIO_Init+0x174>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	2b05      	cmp	r3, #5
 800031a:	d117      	bne.n	800034c <GPIO_Init+0x148>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800031c:	4b75      	ldr	r3, [pc, #468]	@ (80004f4 <GPIO_Init+0x2f0>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	7912      	ldrb	r2, [r2, #4]
 8000324:	4611      	mov	r1, r2
 8000326:	2201      	movs	r2, #1
 8000328:	408a      	lsls	r2, r1
 800032a:	4611      	mov	r1, r2
 800032c:	4a71      	ldr	r2, [pc, #452]	@ (80004f4 <GPIO_Init+0x2f0>)
 800032e:	430b      	orrs	r3, r1
 8000330:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000332:	4b70      	ldr	r3, [pc, #448]	@ (80004f4 <GPIO_Init+0x2f0>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	7912      	ldrb	r2, [r2, #4]
 800033a:	4611      	mov	r1, r2
 800033c:	2201      	movs	r2, #1
 800033e:	408a      	lsls	r2, r1
 8000340:	43d2      	mvns	r2, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a6b      	ldr	r2, [pc, #428]	@ (80004f4 <GPIO_Init+0x2f0>)
 8000346:	400b      	ands	r3, r1
 8000348:	60d3      	str	r3, [r2, #12]
 800034a:	e015      	b.n	8000378 <GPIO_Init+0x174>
		}
		else{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800034c:	4b69      	ldr	r3, [pc, #420]	@ (80004f4 <GPIO_Init+0x2f0>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7912      	ldrb	r2, [r2, #4]
 8000354:	4611      	mov	r1, r2
 8000356:	2201      	movs	r2, #1
 8000358:	408a      	lsls	r2, r1
 800035a:	4611      	mov	r1, r2
 800035c:	4a65      	ldr	r2, [pc, #404]	@ (80004f4 <GPIO_Init+0x2f0>)
 800035e:	430b      	orrs	r3, r1
 8000360:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000362:	4b64      	ldr	r3, [pc, #400]	@ (80004f4 <GPIO_Init+0x2f0>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	7912      	ldrb	r2, [r2, #4]
 800036a:	4611      	mov	r1, r2
 800036c:	2201      	movs	r2, #1
 800036e:	408a      	lsls	r2, r1
 8000370:	4611      	mov	r1, r2
 8000372:	4a60      	ldr	r2, [pc, #384]	@ (80004f4 <GPIO_Init+0x2f0>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]

		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 8000378:	4b5f      	ldr	r3, [pc, #380]	@ (80004f8 <GPIO_Init+0x2f4>)
 800037a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800037c:	4a5e      	ldr	r2, [pc, #376]	@ (80004f8 <GPIO_Init+0x2f4>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000382:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[index] |= (Port << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4));
 8000384:	4a5d      	ldr	r2, [pc, #372]	@ (80004fc <GPIO_Init+0x2f8>)
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	3302      	adds	r3, #2
 800038a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038e:	7bb9      	ldrb	r1, [r7, #14]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	f003 0303 	and.w	r3, r3, #3
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	4956      	ldr	r1, [pc, #344]	@ (80004fc <GPIO_Init+0x2f8>)
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	4302      	orrs	r2, r0
 80003a6:	3302      	adds	r3, #2
 80003a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003ac:	4b51      	ldr	r3, [pc, #324]	@ (80004f4 <GPIO_Init+0x2f0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7912      	ldrb	r2, [r2, #4]
 80003b4:	4611      	mov	r1, r2
 80003b6:	2201      	movs	r2, #1
 80003b8:	408a      	lsls	r2, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a4d      	ldr	r2, [pc, #308]	@ (80004f4 <GPIO_Init+0x2f0>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]


	}

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	4619      	mov	r1, r3
 80003ce:	2303      	movs	r3, #3
 80003d0:	408b      	lsls	r3, r1
 80003d2:	43db      	mvns	r3, r3
 80003d4:	4619      	mov	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	400a      	ands	r2, r1
 80003dc:	609a      	str	r2, [r3, #8]
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	799b      	ldrb	r3, [r3, #6]
 80003e8:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	609a      	str	r2, [r3, #8]


	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	4619      	mov	r1, r3
 800040a:	2303      	movs	r3, #3
 800040c:	408b      	lsls	r3, r1
 800040e:	43db      	mvns	r3, r3
 8000410:	4619      	mov	r1, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	400a      	ands	r2, r1
 8000418:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	68da      	ldr	r2, [r3, #12]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	79db      	ldrb	r3, [r3, #7]
 8000424:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	4619      	mov	r1, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	430a      	orrs	r2, r1
 8000438:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	4619      	mov	r1, r3
 8000446:	2301      	movs	r3, #1
 8000448:	408b      	lsls	r3, r1
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	400a      	ands	r2, r1
 8000454:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	685a      	ldr	r2, [r3, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	7a1b      	ldrb	r3, [r3, #8]
 8000460:	4619      	mov	r1, r3
					   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	430a      	orrs	r2, r1
 8000472:	605a      	str	r2, [r3, #4]

	/*Alternate Function Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b02      	cmp	r3, #2
 800047a:	d164      	bne.n	8000546 <GPIO_Init+0x342>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7 && pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 16 ){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	2b07      	cmp	r3, #7
 8000482:	d93d      	bls.n	8000500 <GPIO_Init+0x2fc>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	2b10      	cmp	r3, #16
 800048a:	d939      	bls.n	8000500 <GPIO_Init+0x2fc>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	210f      	movs	r1, #15
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	400a      	ands	r2, r1
 80004ac:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7a5b      	ldrb	r3, [r3, #9]
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	f003 0307 	and.w	r3, r3, #7
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	4619      	mov	r1, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24

		}
	}


}
 80004d2:	e038      	b.n	8000546 <GPIO_Init+0x342>
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00
 80004f4:	40013c00 	.word	0x40013c00
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6a1a      	ldr	r2, [r3, #32]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	210f      	movs	r1, #15
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6a1a      	ldr	r2, [r3, #32]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7a5b      	ldrb	r3, [r3, #9]
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	430a      	orrs	r2, r1
 8000544:	621a      	str	r2, [r3, #32]
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop

08000550 <GPIO_PeriClockControl>:


}

/*Enable Clock of the given GPIO*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
//	assert(pGPIOx == NULL);
	if(ENorDI == ENABLE){
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d157      	bne.n	8000612 <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == pGPIOA){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a59      	ldr	r2, [pc, #356]	@ (80006cc <GPIO_PeriClockControl+0x17c>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800056a:	4b59      	ldr	r3, [pc, #356]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a58      	ldr	r2, [pc, #352]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == pGPIOH){

					GPIOH_PCLK_DI();
				}
	}
}
 8000576:	e0a3      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOB){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a56      	ldr	r2, [pc, #344]	@ (80006d4 <GPIO_PeriClockControl+0x184>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000580:	4b53      	ldr	r3, [pc, #332]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000584:	4a52      	ldr	r2, [pc, #328]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800058c:	e098      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOC){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a51      	ldr	r2, [pc, #324]	@ (80006d8 <GPIO_PeriClockControl+0x188>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000596:	4b4e      	ldr	r3, [pc, #312]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a4d      	ldr	r2, [pc, #308]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a2:	e08d      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOD){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a4d      	ldr	r2, [pc, #308]	@ (80006dc <GPIO_PeriClockControl+0x18c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005ac:	4b48      	ldr	r3, [pc, #288]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	4a47      	ldr	r2, [pc, #284]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b8:	e082      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOE){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a48      	ldr	r2, [pc, #288]	@ (80006e0 <GPIO_PeriClockControl+0x190>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005c2:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a42      	ldr	r2, [pc, #264]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ce:	e077      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOF){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a44      	ldr	r2, [pc, #272]	@ (80006e4 <GPIO_PeriClockControl+0x194>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005d8:	4b3d      	ldr	r3, [pc, #244]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	4a3c      	ldr	r2, [pc, #240]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e4:	e06c      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOG){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a3f      	ldr	r2, [pc, #252]	@ (80006e8 <GPIO_PeriClockControl+0x198>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005ee:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a37      	ldr	r2, [pc, #220]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80005f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fa:	e061      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOH){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <GPIO_PeriClockControl+0x19c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d15d      	bne.n	80006c0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000604:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a31      	ldr	r2, [pc, #196]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000610:	e056      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == pGPIOA){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a2d      	ldr	r2, [pc, #180]	@ (80006cc <GPIO_PeriClockControl+0x17c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 800061a:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000626:	e04b      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOB){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a2a      	ldr	r2, [pc, #168]	@ (80006d4 <GPIO_PeriClockControl+0x184>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800063c:	e040      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOC){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a25      	ldr	r2, [pc, #148]	@ (80006d8 <GPIO_PeriClockControl+0x188>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800064c:	f023 0304 	bic.w	r3, r3, #4
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000652:	e035      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOD){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <GPIO_PeriClockControl+0x18c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000662:	f023 0308 	bic.w	r3, r3, #8
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000668:	e02a      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOE){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <GPIO_PeriClockControl+0x190>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d106      	bne.n	8000680 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 8000678:	f023 0310 	bic.w	r3, r3, #16
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800067e:	e01f      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOF){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <GPIO_PeriClockControl+0x194>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 800068e:	f023 0320 	bic.w	r3, r3, #32
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000694:	e014      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOG){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <GPIO_PeriClockControl+0x198>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80006a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006aa:	e009      	b.n	80006c0 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOH){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <GPIO_PeriClockControl+0x19c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d105      	bne.n	80006c0 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <GPIO_PeriClockControl+0x180>)
 80006ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40021400 	.word	0x40021400
 80006e8:	40021800 	.word	0x40021800
 80006ec:	40021c00 	.word	0x40021c00

080006f0 <TIM_Init>:
 */
#include "stm32f446xx_Timer_driver.h"


void static TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle);
void TIM_Init(TIM_Handle_t *pTIMHandle){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

	TIM_PeriClockControl(pTIMHandle->pTIMx,ENABLE);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f83a 	bl	8000778 <TIM_PeriClockControl>
	// Set Prescaler - HSI SysCLK is 16 MHZ
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIMx_PinConfig.TIM_Prescaler - 1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3a01      	subs	r2, #1
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
	// Set ARR corresponded to the given period
	// ARR = Given Periode * (SysCLK/Prescaler)
	pTIMHandle->pTIMx->ARR = (pTIMHandle->TIMx_PinConfig.TIM_ARR) - 1 ;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3a01      	subs	r2, #1
 800071a:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable Capture/Compare Mode
	pTIMHandle->pTIMx->CCER  |= (1 << 4 * (pTIMHandle->TIMx_PinConfig.TIM_Channel-1));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a1a      	ldr	r2, [r3, #32]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7c5b      	ldrb	r3, [r3, #17]
 8000726:	3b01      	subs	r3, #1
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	4619      	mov	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	621a      	str	r2, [r3, #32]
	// Set Dir default is countup
	pTIMHandle->pTIMx->CR1  &= ~(1 << TIM_CR1_DIR_POS);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 0210 	bic.w	r2, r2, #16
 8000748:	601a      	str	r2, [r3, #0]
	if(pTIMHandle->TIMx_PinConfig.TIM_CountDir== TIMx_CR1_DIR_UPWARDS){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7c1b      	ldrb	r3, [r3, #16]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d107      	bne.n	8000762 <TIM_Init+0x72>
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_DIR_POS);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f042 0210 	orr.w	r2, r2, #16
 8000760:	601a      	str	r2, [r3, #0]
	}

	if(pTIMHandle->TIMx_PinConfig.TIM_Mode == TIMx_MODE_COMPARE){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7c9b      	ldrb	r3, [r3, #18]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <TIM_Init+0x80>
		TIM_SetCompareModeChannel(pTIMHandle);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f872 	bl	8000854 <TIM_SetCompareModeChannel>
	}else{
		//Set Capture mode
	}


}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <TIM_PeriClockControl>:

/*Enable Clock of the given Timer*/
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t ENorDI){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]

	if(ENorDI == ENABLE){
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d12b      	bne.n	80007e2 <TIM_PeriClockControl+0x6a>

		if(pTIMx == pTIM2){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000790:	d106      	bne.n	80007a0 <TIM_PeriClockControl+0x28>
			TIM2_PCLK_EN();
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a2b      	ldr	r2, [pc, #172]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pTIMx == pTIM5){
			TIM5_PCLK_DI();
		}

	}
}
 800079e:	e04b      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <TIM_PeriClockControl+0xd0>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b4:	e040      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a24      	ldr	r2, [pc, #144]	@ (800084c <TIM_PeriClockControl+0xd4>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d106      	bne.n	80007cc <TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a20      	ldr	r2, [pc, #128]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ca:	e035      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a20      	ldr	r2, [pc, #128]	@ (8000850 <TIM_PeriClockControl+0xd8>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d131      	bne.n	8000838 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007e0:	e02a      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		if(pTIMx == pTIM2){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007e8:	d106      	bne.n	80007f8 <TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 80007f0:	f063 0301 	orn	r3, r3, #1
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f6:	e01f      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <TIM_PeriClockControl+0xd0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000806:	f063 0302 	orn	r3, r3, #2
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800080c:	e014      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <TIM_PeriClockControl+0xd4>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 800081c:	f063 0304 	orn	r3, r3, #4
 8000820:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000822:	e009      	b.n	8000838 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <TIM_PeriClockControl+0xd8>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d105      	bne.n	8000838 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <TIM_PeriClockControl+0xcc>)
 8000832:	f063 0308 	orn	r3, r3, #8
 8000836:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40000400 	.word	0x40000400
 800084c:	40000800 	.word	0x40000800
 8000850:	40000c00 	.word	0x40000c00

08000854 <TIM_SetCompareModeChannel>:

/*Enable Clock of the given Timer*/
void TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle){
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

		if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH1){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7c5b      	ldrb	r3, [r3, #17]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d11f      	bne.n	80008a4 <TIM_SetCompareModeChannel+0x50>
			// CCR1 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	68d2      	ldr	r2, [r2, #12]
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
			//Clear TIM_CCMR1_OC1M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC1M_POS);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	699a      	ldr	r2, [r3, #24]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800087c:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC1M_POS);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6999      	ldr	r1, [r3, #24]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7cdb      	ldrb	r3, [r3, #19]
 8000888:	011a      	lsls	r2, r3, #4
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	430a      	orrs	r2, r1
 8000890:	619a      	str	r2, [r3, #24]
			//Preload Buffer Enable
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC1PE_POS);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	699a      	ldr	r2, [r3, #24]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0208 	orr.w	r2, r2, #8
 80008a0:	619a      	str	r2, [r3, #24]
 80008a2:	e06a      	b.n	800097a <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH2){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7c5b      	ldrb	r3, [r3, #17]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d11f      	bne.n	80008ec <TIM_SetCompareModeChannel+0x98>
			// CCR2 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	68d2      	ldr	r2, [r2, #12]
 80008b4:	639a      	str	r2, [r3, #56]	@ 0x38
			//Clear TIM_CCMR1_OC2M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC2M_POS);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	699a      	ldr	r2, [r3, #24]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80008c4:	619a      	str	r2, [r3, #24]
			//Set TIM_CCMR1_OC2M_POS MODE
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC2M_POS);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6999      	ldr	r1, [r3, #24]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7cdb      	ldrb	r3, [r3, #19]
 80008d0:	031a      	lsls	r2, r3, #12
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC2PE_POS);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80008e8:	619a      	str	r2, [r3, #24]
 80008ea:	e046      	b.n	800097a <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH3){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7c5b      	ldrb	r3, [r3, #17]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d11f      	bne.n	8000934 <TIM_SetCompareModeChannel+0xe0>
			// CCR3 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68d2      	ldr	r2, [r2, #12]
 80008fc:	63da      	str	r2, [r3, #60]	@ 0x3c
			//Clear TIM_CCMR2_OC3M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC3M_POS);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800090c:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC3M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC3M_POS);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	69d9      	ldr	r1, [r3, #28]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7cdb      	ldrb	r3, [r3, #19]
 8000918:	011a      	lsls	r2, r3, #4
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC3PE_POS);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f042 0208 	orr.w	r2, r2, #8
 8000930:	61da      	str	r2, [r3, #28]
 8000932:	e022      	b.n	800097a <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel== TIMx_CH4){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7c5b      	ldrb	r3, [r3, #17]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d11e      	bne.n	800097a <TIM_SetCompareModeChannel+0x126>
			// CCR4 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	68d2      	ldr	r2, [r2, #12]
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
			//Clear TIM_CCMR2_OC4M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC4M_POS);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000954:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC4M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC4M_POS);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	69d9      	ldr	r1, [r3, #28]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7cdb      	ldrb	r3, [r3, #19]
 8000960:	031a      	lsls	r2, r3, #12
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC4PE_POS);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000978:	61da      	str	r2, [r3, #28]

		}
		//Auto reload preload Enable
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_ARPE_POS);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000988:	601a      	str	r2, [r3, #0]
		//Enable Counter
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	601a      	str	r2, [r3, #0]

}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <main>:
#include "../Driver/Inc/stm32f446xx.h"
#include "stddef.h"
#include "string.h"

int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0

    GPIO_Handle_t STEP;
    TIM_Handle_t PWM2;

	memset(&STEP,0,sizeof(STEP));
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	220c      	movs	r2, #12
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f863 	bl	8000a7e <memset>
	memset(&PWM2,0,sizeof(PWM2));
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2218      	movs	r2, #24
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f85d 	bl	8000a7e <memset>
	/*Always initiate clock first before data line*/
	// PA5 ALternate 1 TIM2_CH1
	STEP.pGPIOx = pGPIOA;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <main+0x80>)
 80009c6:	61fb      	str	r3, [r7, #28]
	STEP.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_ALTF;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	STEP.GPIO_PinConfig.GPIO_PinAltFunMode = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	STEP.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	STEP.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	STEP.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009e0:	2302      	movs	r3, #2
 80009e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	STEP.GPIO_PinConfig.GPIO_PinNumber = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f887 3020 	strb.w	r3, [r7, #32]

	GPIO_Init(&STEP);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc07 	bl	8000204 <GPIO_Init>

	PWM2.pTIMx = pTIM5;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <main+0x84>)
 80009f8:	607b      	str	r3, [r7, #4]
	PWM2.TIMx_PinConfig.TIM_Prescaler = 16;
 80009fa:	2310      	movs	r3, #16
 80009fc:	60bb      	str	r3, [r7, #8]
	PWM2.TIMx_PinConfig.TIM_CountDir = UPWARDS;
 80009fe:	2301      	movs	r3, #1
 8000a00:	753b      	strb	r3, [r7, #20]
	PWM2.TIMx_PinConfig.TIM_Channel = TIMx_CH2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	757b      	strb	r3, [r7, #21]
	PWM2.TIMx_PinConfig.TIM_Mode = TIMx_MODE_COMPARE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	75bb      	strb	r3, [r7, #22]
	PWM2.TIMx_PinConfig.TIM_CMP_Mode = TIMx_COMPARE_MODE_PWM1;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	75fb      	strb	r3, [r7, #23]
	PWM2.TIMx_PinConfig.TIM_ARR = 1000;
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	60fb      	str	r3, [r7, #12]
	PWM2.TIMx_PinConfig.TIM_CCR = 200;
 8000a14:	23c8      	movs	r3, #200	@ 0xc8
 8000a16:	613b      	str	r3, [r7, #16]

	TIM_Init(&PWM2);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe68 	bl	80006f0 <TIM_Init>

    /* Loop forever */
	for(;;){
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <main+0x7c>
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40000c00 	.word	0x40000c00

08000a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5a:	f000 f819 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff ffa1 	bl	80009a4 <main>

08000a62 <LoopForever>:

LoopForever:
  b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a70:	08000af8 	.word	0x08000af8
  ldr r2, =_sbss
 8000a74:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>

08000a7e <memset>:
 8000a7e:	4402      	add	r2, r0
 8000a80:	4603      	mov	r3, r0
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d100      	bne.n	8000a88 <memset+0xa>
 8000a86:	4770      	bx	lr
 8000a88:	f803 1b01 	strb.w	r1, [r3], #1
 8000a8c:	e7f9      	b.n	8000a82 <memset+0x4>
	...

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4d0d      	ldr	r5, [pc, #52]	@ (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	@ (8000acc <__libc_init_array+0x3c>)
 8000a96:	1b64      	subs	r4, r4, r5
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 f818 	bl	8000ad8 <_init>
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2600      	movs	r6, #0
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08000af0 	.word	0x08000af0
 8000acc:	08000af0 	.word	0x08000af0
 8000ad0:	08000af0 	.word	0x08000af0
 8000ad4:	08000af4 	.word	0x08000af4

08000ad8 <_init>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr

08000ae4 <_fini>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr
