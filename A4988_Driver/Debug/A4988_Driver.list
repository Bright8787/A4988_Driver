
A4988_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001474  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001638  08001638  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001638  08001638  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001638  08001638  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001638  08001638  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001638  08001638  00002638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800163c  0800163c  0000263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001640  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  08001650  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001650  000030a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000186a  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000691  00000000  00000000  000048a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00004f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000107  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c20  00000000  00000000  000051af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000224d  00000000  00000000  00007dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d03  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000062c  00000000  00000000  00013d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001620 	.word	0x08001620

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08001620 	.word	0x08001620

08000204 <__aeabi_frsub>:
 8000204:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__addsf3>
 800020a:	bf00      	nop

0800020c <__aeabi_fsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000210 <__addsf3>:
 8000210:	0042      	lsls	r2, r0, #1
 8000212:	bf1f      	itttt	ne
 8000214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000218:	ea92 0f03 	teqne	r2, r3
 800021c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000224:	d06a      	beq.n	80002fc <__addsf3+0xec>
 8000226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022e:	bfc1      	itttt	gt
 8000230:	18d2      	addgt	r2, r2, r3
 8000232:	4041      	eorgt	r1, r0
 8000234:	4048      	eorgt	r0, r1
 8000236:	4041      	eorgt	r1, r0
 8000238:	bfb8      	it	lt
 800023a:	425b      	neglt	r3, r3
 800023c:	2b19      	cmp	r3, #25
 800023e:	bf88      	it	hi
 8000240:	4770      	bxhi	lr
 8000242:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000246:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800024a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800024e:	bf18      	it	ne
 8000250:	4240      	negne	r0, r0
 8000252:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000256:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800025a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800025e:	bf18      	it	ne
 8000260:	4249      	negne	r1, r1
 8000262:	ea92 0f03 	teq	r2, r3
 8000266:	d03f      	beq.n	80002e8 <__addsf3+0xd8>
 8000268:	f1a2 0201 	sub.w	r2, r2, #1
 800026c:	fa41 fc03 	asr.w	ip, r1, r3
 8000270:	eb10 000c 	adds.w	r0, r0, ip
 8000274:	f1c3 0320 	rsb	r3, r3, #32
 8000278:	fa01 f103 	lsl.w	r1, r1, r3
 800027c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000280:	d502      	bpl.n	8000288 <__addsf3+0x78>
 8000282:	4249      	negs	r1, r1
 8000284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000288:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800028c:	d313      	bcc.n	80002b6 <__addsf3+0xa6>
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000292:	d306      	bcc.n	80002a2 <__addsf3+0x92>
 8000294:	0840      	lsrs	r0, r0, #1
 8000296:	ea4f 0131 	mov.w	r1, r1, rrx
 800029a:	f102 0201 	add.w	r2, r2, #1
 800029e:	2afe      	cmp	r2, #254	@ 0xfe
 80002a0:	d251      	bcs.n	8000346 <__addsf3+0x136>
 80002a2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	ea40 0003 	orr.w	r0, r0, r3
 80002b4:	4770      	bx	lr
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	eb40 0000 	adc.w	r0, r0, r0
 80002bc:	3a01      	subs	r2, #1
 80002be:	bf28      	it	cs
 80002c0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002c4:	d2ed      	bcs.n	80002a2 <__addsf3+0x92>
 80002c6:	fab0 fc80 	clz	ip, r0
 80002ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ce:	ebb2 020c 	subs.w	r2, r2, ip
 80002d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d6:	bfaa      	itet	ge
 80002d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002dc:	4252      	neglt	r2, r2
 80002de:	4318      	orrge	r0, r3
 80002e0:	bfbc      	itt	lt
 80002e2:	40d0      	lsrlt	r0, r2
 80002e4:	4318      	orrlt	r0, r3
 80002e6:	4770      	bx	lr
 80002e8:	f092 0f00 	teq	r2, #0
 80002ec:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002f0:	bf06      	itte	eq
 80002f2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002f6:	3201      	addeq	r2, #1
 80002f8:	3b01      	subne	r3, #1
 80002fa:	e7b5      	b.n	8000268 <__addsf3+0x58>
 80002fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000304:	bf18      	it	ne
 8000306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030a:	d021      	beq.n	8000350 <__addsf3+0x140>
 800030c:	ea92 0f03 	teq	r2, r3
 8000310:	d004      	beq.n	800031c <__addsf3+0x10c>
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	bf08      	it	eq
 8000318:	4608      	moveq	r0, r1
 800031a:	4770      	bx	lr
 800031c:	ea90 0f01 	teq	r0, r1
 8000320:	bf1c      	itt	ne
 8000322:	2000      	movne	r0, #0
 8000324:	4770      	bxne	lr
 8000326:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800032a:	d104      	bne.n	8000336 <__addsf3+0x126>
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	bf28      	it	cs
 8000330:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000334:	4770      	bx	lr
 8000336:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800033a:	bf3c      	itt	cc
 800033c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000340:	4770      	bxcc	lr
 8000342:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000346:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800034a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800034e:	4770      	bx	lr
 8000350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000354:	bf16      	itet	ne
 8000356:	4608      	movne	r0, r1
 8000358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800035c:	4601      	movne	r1, r0
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	bf06      	itte	eq
 8000362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000366:	ea90 0f01 	teqeq	r0, r1
 800036a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800036e:	4770      	bx	lr

08000370 <__aeabi_ui2f>:
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e004      	b.n	8000380 <__aeabi_i2f+0x8>
 8000376:	bf00      	nop

08000378 <__aeabi_i2f>:
 8000378:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800037c:	bf48      	it	mi
 800037e:	4240      	negmi	r0, r0
 8000380:	ea5f 0c00 	movs.w	ip, r0
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800038c:	4601      	mov	r1, r0
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	e01c      	b.n	80003ce <__aeabi_l2f+0x2a>

08000394 <__aeabi_ul2f>:
 8000394:	ea50 0201 	orrs.w	r2, r0, r1
 8000398:	bf08      	it	eq
 800039a:	4770      	bxeq	lr
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e00a      	b.n	80003b8 <__aeabi_l2f+0x14>
 80003a2:	bf00      	nop

080003a4 <__aeabi_l2f>:
 80003a4:	ea50 0201 	orrs.w	r2, r0, r1
 80003a8:	bf08      	it	eq
 80003aa:	4770      	bxeq	lr
 80003ac:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003b0:	d502      	bpl.n	80003b8 <__aeabi_l2f+0x14>
 80003b2:	4240      	negs	r0, r0
 80003b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b8:	ea5f 0c01 	movs.w	ip, r1
 80003bc:	bf02      	ittt	eq
 80003be:	4684      	moveq	ip, r0
 80003c0:	4601      	moveq	r1, r0
 80003c2:	2000      	moveq	r0, #0
 80003c4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003c8:	bf08      	it	eq
 80003ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003d2:	fabc f28c 	clz	r2, ip
 80003d6:	3a08      	subs	r2, #8
 80003d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003dc:	db10      	blt.n	8000400 <__aeabi_l2f+0x5c>
 80003de:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e2:	4463      	add	r3, ip
 80003e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e8:	f1c2 0220 	rsb	r2, r2, #32
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f0:	fa20 f202 	lsr.w	r2, r0, r2
 80003f4:	eb43 0002 	adc.w	r0, r3, r2
 80003f8:	bf08      	it	eq
 80003fa:	f020 0001 	biceq.w	r0, r0, #1
 80003fe:	4770      	bx	lr
 8000400:	f102 0220 	add.w	r2, r2, #32
 8000404:	fa01 fc02 	lsl.w	ip, r1, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000410:	fa21 f202 	lsr.w	r2, r1, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041e:	4770      	bx	lr

08000420 <__aeabi_fmul>:
 8000420:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000424:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000428:	bf1e      	ittt	ne
 800042a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042e:	ea92 0f0c 	teqne	r2, ip
 8000432:	ea93 0f0c 	teqne	r3, ip
 8000436:	d06f      	beq.n	8000518 <__aeabi_fmul+0xf8>
 8000438:	441a      	add	r2, r3
 800043a:	ea80 0c01 	eor.w	ip, r0, r1
 800043e:	0240      	lsls	r0, r0, #9
 8000440:	bf18      	it	ne
 8000442:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000446:	d01e      	beq.n	8000486 <__aeabi_fmul+0x66>
 8000448:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800044c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000450:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000454:	fba0 3101 	umull	r3, r1, r0, r1
 8000458:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800045c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000460:	bf3e      	ittt	cc
 8000462:	0049      	lslcc	r1, r1, #1
 8000464:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000468:	005b      	lslcc	r3, r3, #1
 800046a:	ea40 0001 	orr.w	r0, r0, r1
 800046e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000472:	2afd      	cmp	r2, #253	@ 0xfd
 8000474:	d81d      	bhi.n	80004b2 <__aeabi_fmul+0x92>
 8000476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800047a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047e:	bf08      	it	eq
 8000480:	f020 0001 	biceq.w	r0, r0, #1
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800048e:	bf08      	it	eq
 8000490:	0249      	lsleq	r1, r1, #9
 8000492:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000496:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800049a:	3a7f      	subs	r2, #127	@ 0x7f
 800049c:	bfc2      	ittt	gt
 800049e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a6:	4770      	bxgt	lr
 80004a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	3a01      	subs	r2, #1
 80004b2:	dc5d      	bgt.n	8000570 <__aeabi_fmul+0x150>
 80004b4:	f112 0f19 	cmn.w	r2, #25
 80004b8:	bfdc      	itt	le
 80004ba:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004be:	4770      	bxle	lr
 80004c0:	f1c2 0200 	rsb	r2, r2, #0
 80004c4:	0041      	lsls	r1, r0, #1
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	f1c2 0220 	rsb	r2, r2, #32
 80004ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d6:	f140 0000 	adc.w	r0, r0, #0
 80004da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004de:	bf08      	it	eq
 80004e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e4:	4770      	bx	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004ee:	bf02      	ittt	eq
 80004f0:	0040      	lsleq	r0, r0, #1
 80004f2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004f6:	3a01      	subeq	r2, #1
 80004f8:	d0f9      	beq.n	80004ee <__aeabi_fmul+0xce>
 80004fa:	ea40 000c 	orr.w	r0, r0, ip
 80004fe:	f093 0f00 	teq	r3, #0
 8000502:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000506:	bf02      	ittt	eq
 8000508:	0049      	lsleq	r1, r1, #1
 800050a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800050e:	3b01      	subeq	r3, #1
 8000510:	d0f9      	beq.n	8000506 <__aeabi_fmul+0xe6>
 8000512:	ea41 010c 	orr.w	r1, r1, ip
 8000516:	e78f      	b.n	8000438 <__aeabi_fmul+0x18>
 8000518:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800051c:	ea92 0f0c 	teq	r2, ip
 8000520:	bf18      	it	ne
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d00a      	beq.n	800053e <__aeabi_fmul+0x11e>
 8000528:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800052c:	bf18      	it	ne
 800052e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000532:	d1d8      	bne.n	80004e6 <__aeabi_fmul+0xc6>
 8000534:	ea80 0001 	eor.w	r0, r0, r1
 8000538:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800053c:	4770      	bx	lr
 800053e:	f090 0f00 	teq	r0, #0
 8000542:	bf17      	itett	ne
 8000544:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000548:	4608      	moveq	r0, r1
 800054a:	f091 0f00 	teqne	r1, #0
 800054e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000552:	d014      	beq.n	800057e <__aeabi_fmul+0x15e>
 8000554:	ea92 0f0c 	teq	r2, ip
 8000558:	d101      	bne.n	800055e <__aeabi_fmul+0x13e>
 800055a:	0242      	lsls	r2, r0, #9
 800055c:	d10f      	bne.n	800057e <__aeabi_fmul+0x15e>
 800055e:	ea93 0f0c 	teq	r3, ip
 8000562:	d103      	bne.n	800056c <__aeabi_fmul+0x14c>
 8000564:	024b      	lsls	r3, r1, #9
 8000566:	bf18      	it	ne
 8000568:	4608      	movne	r0, r1
 800056a:	d108      	bne.n	800057e <__aeabi_fmul+0x15e>
 800056c:	ea80 0001 	eor.w	r0, r0, r1
 8000570:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000574:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000578:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800057c:	4770      	bx	lr
 800057e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000582:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000586:	4770      	bx	lr

08000588 <__aeabi_fdiv>:
 8000588:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000590:	bf1e      	ittt	ne
 8000592:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000596:	ea92 0f0c 	teqne	r2, ip
 800059a:	ea93 0f0c 	teqne	r3, ip
 800059e:	d069      	beq.n	8000674 <__aeabi_fdiv+0xec>
 80005a0:	eba2 0203 	sub.w	r2, r2, r3
 80005a4:	ea80 0c01 	eor.w	ip, r0, r1
 80005a8:	0249      	lsls	r1, r1, #9
 80005aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ae:	d037      	beq.n	8000620 <__aeabi_fdiv+0x98>
 80005b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005c0:	428b      	cmp	r3, r1
 80005c2:	bf38      	it	cc
 80005c4:	005b      	lslcc	r3, r3, #1
 80005c6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005ca:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005ce:	428b      	cmp	r3, r1
 80005d0:	bf24      	itt	cs
 80005d2:	1a5b      	subcs	r3, r3, r1
 80005d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005dc:	bf24      	itt	cs
 80005de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ea:	bf24      	itt	cs
 80005ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005f8:	bf24      	itt	cs
 80005fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	bf18      	it	ne
 8000606:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800060a:	d1e0      	bne.n	80005ce <__aeabi_fdiv+0x46>
 800060c:	2afd      	cmp	r2, #253	@ 0xfd
 800060e:	f63f af50 	bhi.w	80004b2 <__aeabi_fmul+0x92>
 8000612:	428b      	cmp	r3, r1
 8000614:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000618:	bf08      	it	eq
 800061a:	f020 0001 	biceq.w	r0, r0, #1
 800061e:	4770      	bx	lr
 8000620:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000624:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000628:	327f      	adds	r2, #127	@ 0x7f
 800062a:	bfc2      	ittt	gt
 800062c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000630:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000634:	4770      	bxgt	lr
 8000636:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	3a01      	subs	r2, #1
 8000640:	e737      	b.n	80004b2 <__aeabi_fmul+0x92>
 8000642:	f092 0f00 	teq	r2, #0
 8000646:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800064a:	bf02      	ittt	eq
 800064c:	0040      	lsleq	r0, r0, #1
 800064e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000652:	3a01      	subeq	r2, #1
 8000654:	d0f9      	beq.n	800064a <__aeabi_fdiv+0xc2>
 8000656:	ea40 000c 	orr.w	r0, r0, ip
 800065a:	f093 0f00 	teq	r3, #0
 800065e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000662:	bf02      	ittt	eq
 8000664:	0049      	lsleq	r1, r1, #1
 8000666:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800066a:	3b01      	subeq	r3, #1
 800066c:	d0f9      	beq.n	8000662 <__aeabi_fdiv+0xda>
 800066e:	ea41 010c 	orr.w	r1, r1, ip
 8000672:	e795      	b.n	80005a0 <__aeabi_fdiv+0x18>
 8000674:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000678:	ea92 0f0c 	teq	r2, ip
 800067c:	d108      	bne.n	8000690 <__aeabi_fdiv+0x108>
 800067e:	0242      	lsls	r2, r0, #9
 8000680:	f47f af7d 	bne.w	800057e <__aeabi_fmul+0x15e>
 8000684:	ea93 0f0c 	teq	r3, ip
 8000688:	f47f af70 	bne.w	800056c <__aeabi_fmul+0x14c>
 800068c:	4608      	mov	r0, r1
 800068e:	e776      	b.n	800057e <__aeabi_fmul+0x15e>
 8000690:	ea93 0f0c 	teq	r3, ip
 8000694:	d104      	bne.n	80006a0 <__aeabi_fdiv+0x118>
 8000696:	024b      	lsls	r3, r1, #9
 8000698:	f43f af4c 	beq.w	8000534 <__aeabi_fmul+0x114>
 800069c:	4608      	mov	r0, r1
 800069e:	e76e      	b.n	800057e <__aeabi_fmul+0x15e>
 80006a0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006a4:	bf18      	it	ne
 80006a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006aa:	d1ca      	bne.n	8000642 <__aeabi_fdiv+0xba>
 80006ac:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006b0:	f47f af5c 	bne.w	800056c <__aeabi_fmul+0x14c>
 80006b4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006b8:	f47f af3c 	bne.w	8000534 <__aeabi_fmul+0x114>
 80006bc:	e75f      	b.n	800057e <__aeabi_fmul+0x15e>
 80006be:	bf00      	nop

080006c0 <__gesf2>:
 80006c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80006c4:	e006      	b.n	80006d4 <__cmpsf2+0x4>
 80006c6:	bf00      	nop

080006c8 <__lesf2>:
 80006c8:	f04f 0c01 	mov.w	ip, #1
 80006cc:	e002      	b.n	80006d4 <__cmpsf2+0x4>
 80006ce:	bf00      	nop

080006d0 <__cmpsf2>:
 80006d0:	f04f 0c01 	mov.w	ip, #1
 80006d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e4:	bf18      	it	ne
 80006e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ea:	d011      	beq.n	8000710 <__cmpsf2+0x40>
 80006ec:	b001      	add	sp, #4
 80006ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006f2:	bf18      	it	ne
 80006f4:	ea90 0f01 	teqne	r0, r1
 80006f8:	bf58      	it	pl
 80006fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80006fe:	bf88      	it	hi
 8000700:	17c8      	asrhi	r0, r1, #31
 8000702:	bf38      	it	cc
 8000704:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000708:	bf18      	it	ne
 800070a:	f040 0001 	orrne.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__cmpsf2+0x4c>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d105      	bne.n	8000728 <__cmpsf2+0x58>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d1e4      	bne.n	80006ec <__cmpsf2+0x1c>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d0e1      	beq.n	80006ec <__cmpsf2+0x1c>
 8000728:	f85d 0b04 	ldr.w	r0, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <__aeabi_cfrcmple>:
 8000730:	4684      	mov	ip, r0
 8000732:	4608      	mov	r0, r1
 8000734:	4661      	mov	r1, ip
 8000736:	e7ff      	b.n	8000738 <__aeabi_cfcmpeq>

08000738 <__aeabi_cfcmpeq>:
 8000738:	b50f      	push	{r0, r1, r2, r3, lr}
 800073a:	f7ff ffc9 	bl	80006d0 <__cmpsf2>
 800073e:	2800      	cmp	r0, #0
 8000740:	bf48      	it	mi
 8000742:	f110 0f00 	cmnmi.w	r0, #0
 8000746:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000748 <__aeabi_fcmpeq>:
 8000748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800074c:	f7ff fff4 	bl	8000738 <__aeabi_cfcmpeq>
 8000750:	bf0c      	ite	eq
 8000752:	2001      	moveq	r0, #1
 8000754:	2000      	movne	r0, #0
 8000756:	f85d fb08 	ldr.w	pc, [sp], #8
 800075a:	bf00      	nop

0800075c <__aeabi_fcmplt>:
 800075c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000760:	f7ff ffea 	bl	8000738 <__aeabi_cfcmpeq>
 8000764:	bf34      	ite	cc
 8000766:	2001      	movcc	r0, #1
 8000768:	2000      	movcs	r0, #0
 800076a:	f85d fb08 	ldr.w	pc, [sp], #8
 800076e:	bf00      	nop

08000770 <__aeabi_fcmple>:
 8000770:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000774:	f7ff ffe0 	bl	8000738 <__aeabi_cfcmpeq>
 8000778:	bf94      	ite	ls
 800077a:	2001      	movls	r0, #1
 800077c:	2000      	movhi	r0, #0
 800077e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000782:	bf00      	nop

08000784 <__aeabi_fcmpge>:
 8000784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000788:	f7ff ffd2 	bl	8000730 <__aeabi_cfrcmple>
 800078c:	bf94      	ite	ls
 800078e:	2001      	movls	r0, #1
 8000790:	2000      	movhi	r0, #0
 8000792:	f85d fb08 	ldr.w	pc, [sp], #8
 8000796:	bf00      	nop

08000798 <__aeabi_fcmpgt>:
 8000798:	f84d ed08 	str.w	lr, [sp, #-8]!
 800079c:	f7ff ffc8 	bl	8000730 <__aeabi_cfrcmple>
 80007a0:	bf34      	ite	cc
 80007a2:	2001      	movcc	r0, #1
 80007a4:	2000      	movcs	r0, #0
 80007a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007aa:	bf00      	nop

080007ac <__aeabi_f2uiz>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	d20e      	bcs.n	80007ce <__aeabi_f2uiz+0x22>
 80007b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80007b4:	d30b      	bcc.n	80007ce <__aeabi_f2uiz+0x22>
 80007b6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80007ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007be:	d409      	bmi.n	80007d4 <__aeabi_f2uiz+0x28>
 80007c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c8:	fa23 f002 	lsr.w	r0, r3, r2
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr
 80007d4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007d8:	d101      	bne.n	80007de <__aeabi_f2uiz+0x32>
 80007da:	0242      	lsls	r2, r0, #9
 80007dc:	d102      	bne.n	80007e4 <__aeabi_f2uiz+0x38>
 80007de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <A4988_init>:
volatile float T = clk_period * 8000;

TIM_Handle_t TIM_handles[MAX_TIMERS];

void A4988_init(A4988_config_t *A4988_config)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	A4988_config_x = A4988_config;
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <A4988_init+0x28>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
	// Set address of each timer in TIM_handles array

	A4988_TIM_Init();
 80007fa:	f000 f883 	bl	8000904 <A4988_TIM_Init>
	A4988_GPIO_Config(A4988_config);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f80a 	bl	8000818 <A4988_GPIO_Config>
	A4988_TIM_Config(A4988_config);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f849 	bl	800089c <A4988_TIM_Config>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000002c 	.word	0x2000002c

08000818 <A4988_GPIO_Config>:

static void A4988_GPIO_Config(A4988_config_t *A4988_config)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	GPIO_Handle_t step, dir;
	memset(&dir, 0, sizeof(dir));
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	220c      	movs	r2, #12
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fecc 	bl	80015c6 <memset>
	memset(&step, 0, sizeof(step));
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	220c      	movs	r2, #12
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fec5 	bl	80015c6 <memset>

	// Set up Step Port
	step.pGPIOx = A4988_config->step_port;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	617b      	str	r3, [r7, #20]
	step.GPIO_PinConfig.GPIO_PinNumber = A4988_config->step_pin;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	763b      	strb	r3, [r7, #24]
	step.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 8000848:	2302      	movs	r3, #2
 800084a:	767b      	strb	r3, [r7, #25]
	step.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800084c:	2302      	movs	r3, #2
 800084e:	76bb      	strb	r3, [r7, #26]
	step.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 8000850:	2300      	movs	r3, #0
 8000852:	76fb      	strb	r3, [r7, #27]
	step.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;			  // PP for normal usage
 8000854:	2300      	movs	r3, #0
 8000856:	773b      	strb	r3, [r7, #28]
	step.GPIO_PinConfig.GPIO_PinAltFunMode = A4988_config->step_alt_mode; // No Alternate Funciton is used
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	777b      	strb	r3, [r7, #29]
	GPIO_Init(&step);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f9bc 	bl	8000be0 <GPIO_Init>

	// Set up dir Port
	dir.pGPIOx = A4988_config->dir_port;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	60bb      	str	r3, [r7, #8]
	dir.GPIO_PinConfig.GPIO_PinNumber = A4988_config->dir_pin;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7d1b      	ldrb	r3, [r3, #20]
 8000872:	733b      	strb	r3, [r7, #12]
	dir.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000874:	2301      	movs	r3, #1
 8000876:	737b      	strb	r3, [r7, #13]
	dir.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000878:	2302      	movs	r3, #2
 800087a:	73bb      	strb	r3, [r7, #14]
	dir.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
	dir.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;			// PP for normal usage
 8000880:	2300      	movs	r3, #0
 8000882:	743b      	strb	r3, [r7, #16]
	dir.GPIO_PinConfig.GPIO_PinAltFunMode = A4988_config->dir_alt_mode; // No Alternate Funciton is used
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7d5b      	ldrb	r3, [r3, #21]
 8000888:	747b      	strb	r3, [r7, #17]
	GPIO_Init(&dir);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f9a6 	bl	8000be0 <GPIO_Init>
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <A4988_TIM_Config>:

static void A4988_TIM_Config(A4988_config_t *A4988_config)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	TIM_Handle_t PWMx;
	memset(&PWMx, 0, sizeof(PWMx));
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2214      	movs	r2, #20
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fe8a 	bl	80015c6 <memset>

	PWMx.pTIMx = A4988_config->step_timer_port;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	60fb      	str	r3, [r7, #12]
	PWMx.TIMx_PinConfig.TIM_Prescaler = 20;
 80008b8:	2314      	movs	r3, #20
 80008ba:	613b      	str	r3, [r7, #16]
	PWMx.TIMx_PinConfig.TIM_CountDir = UPWARDS;
 80008bc:	2301      	movs	r3, #1
 80008be:	773b      	strb	r3, [r7, #28]
	PWMx.TIMx_PinConfig.TIM_Channel = A4988_config->step_channel;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	777b      	strb	r3, [r7, #29]
	PWMx.TIMx_PinConfig.TIM_Mode = TIMx_MODE_COMPARE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	77bb      	strb	r3, [r7, #30]
	PWMx.TIMx_PinConfig.TIM_CMP_Mode = TIMx_COMPARE_MODE_PWM1;
 80008ca:	2306      	movs	r3, #6
 80008cc:	77fb      	strb	r3, [r7, #31]
	PWMx.TIMx_PinConfig.TIM_ARR = ARR_VAL;	   // 1 Period = 1/4MHz = 0.25 microSecs -> 1000 * 0.25 microSecs = 250 microSecs
 80008ce:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80008d2:	617b      	str	r3, [r7, #20]
	PWMx.TIMx_PinConfig.TIM_CCR = ARR_VAL / 2; // Duty Cycle 50%
 80008d4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80008d8:	61bb      	str	r3, [r7, #24]

	TIM_Init(&PWMx);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fbf4 	bl	80010cc <TIM_Init>
	TIM_InterruptEnable(&PWMx, ENABLE);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2101      	movs	r1, #1
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fd40 	bl	8001370 <TIM_InterruptEnable>
	TIM_IRQInterruptConfig(A4988_config->step_IRQ_number, ENABLE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7b5b      	ldrb	r3, [r3, #13]
 80008f4:	2101      	movs	r1, #1
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fd5a 	bl	80013b0 <TIM_IRQInterruptConfig>
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <A4988_TIM_Init>:

static void A4988_TIM_Init()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

	memset(&TIM_handles[0], 0, sizeof(TIM_Handle_t));
 8000908:	2214      	movs	r2, #20
 800090a:	2100      	movs	r1, #0
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <A4988_TIM_Init+0x4c>)
 800090e:	f000 fe5a 	bl	80015c6 <memset>
	TIM_handles[0].pTIMx = pTIM2;
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <A4988_TIM_Init+0x4c>)
 8000914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000918:	601a      	str	r2, [r3, #0]

	memset(&TIM_handles[1], 0, sizeof(TIM_Handle_t));
 800091a:	2214      	movs	r2, #20
 800091c:	2100      	movs	r1, #0
 800091e:	480d      	ldr	r0, [pc, #52]	@ (8000954 <A4988_TIM_Init+0x50>)
 8000920:	f000 fe51 	bl	80015c6 <memset>
	TIM_handles[1].pTIMx = pTIM3;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <A4988_TIM_Init+0x4c>)
 8000926:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <A4988_TIM_Init+0x54>)
 8000928:	615a      	str	r2, [r3, #20]

	memset(&TIM_handles[2], 0, sizeof(TIM_Handle_t));
 800092a:	2214      	movs	r2, #20
 800092c:	2100      	movs	r1, #0
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <A4988_TIM_Init+0x58>)
 8000930:	f000 fe49 	bl	80015c6 <memset>
	TIM_handles[2].pTIMx = pTIM4;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <A4988_TIM_Init+0x4c>)
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <A4988_TIM_Init+0x5c>)
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28

	memset(&TIM_handles[3], 0, sizeof(TIM_Handle_t));
 800093a:	2214      	movs	r2, #20
 800093c:	2100      	movs	r1, #0
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <A4988_TIM_Init+0x60>)
 8000940:	f000 fe41 	bl	80015c6 <memset>
	TIM_handles[3].pTIMx = pTIM5;
 8000944:	4b02      	ldr	r3, [pc, #8]	@ (8000950 <A4988_TIM_Init+0x4c>)
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <A4988_TIM_Init+0x64>)
 8000948:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000003c 	.word	0x2000003c
 8000954:	20000050 	.word	0x20000050
 8000958:	40000400 	.word	0x40000400
 800095c:	20000064 	.word	0x20000064
 8000960:	40000800 	.word	0x40000800
 8000964:	20000078 	.word	0x20000078
 8000968:	40000c00 	.word	0x40000c00

0800096c <A4988_move_Step>:
	pTIMHandle.pTIMx->CNT = 0;
	pTIMHandle.pTIMx->CR1 &= ~(1 << TIM_CR1_UDIS_POS);
}

void A4988_move_Step(uint32_t steps, uint32_t dir, TIM_Handle_t pTIMHandle)
{
 800096c:	b082      	sub	sp, #8
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
 8000978:	f107 0110 	add.w	r1, r7, #16
 800097c:	e881 000c 	stmia.w	r1, {r2, r3}

	counter = 0;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <A4988_move_Step+0x8c>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	steps_target = steps;
 8000986:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <A4988_move_Step+0x90>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
	f_current = 100.0f;
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <A4988_move_Step+0x94>)
 800098e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <A4988_move_Step+0x98>)
 8000990:	601a      	str	r2, [r3, #0]
	// Enable Counter
	// Reset the counter
	pTIMHandle.pTIMx->CR1 &= ~(1 << TIM_CR1_CEN_POS); //
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	f022 0201 	bic.w	r2, r2, #1
 800099c:	601a      	str	r2, [r3, #0]

	pTIMHandle.pTIMx->CR1 |= (1 << TIM_CR1_ARPE_POS);
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009a8:	601a      	str	r2, [r3, #0]
	pTIMHandle.pTIMx->CCMR1 |= (1 << TIM_CCMR1_OC1PE_POS);
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	f042 0208 	orr.w	r2, r2, #8
 80009b4:	619a      	str	r2, [r3, #24]

	pTIMHandle.pTIMx->ARR = ARR_VAL - 1;
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	pTIMHandle.pTIMx->CCR1 = (ARR_VAL - 1) / 2;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34

	pTIMHandle.pTIMx->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	f042 0201 	orr.w	r2, r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
	pTIMHandle.pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	691a      	ldr	r2, [r3, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	611a      	str	r2, [r3, #16]

	pTIMHandle.pTIMx->CR1 |= (1 << TIM_CR1_CEN_POS);
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	f042 0201 	orr.w	r2, r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	b002      	add	sp, #8
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000034 	.word	0x20000034
 80009fc:	20000038 	.word	0x20000038
 8000a00:	20000000 	.word	0x20000000
 8000a04:	42c80000 	.word	0x42c80000

08000a08 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[0]);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <TIM2_IRQHandler+0x10>)
 8000a0e:	f000 fd53 	bl	80014b8 <TIMx_EV_IRQHandling>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000003c 	.word	0x2000003c

08000a1c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[1]);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <TIM3_IRQHandler+0x10>)
 8000a22:	f000 fd49 	bl	80014b8 <TIMx_EV_IRQHandling>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000050 	.word	0x20000050

08000a30 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[2]);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <TIM4_IRQHandler+0x10>)
 8000a36:	f000 fd3f 	bl	80014b8 <TIMx_EV_IRQHandling>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000064 	.word	0x20000064

08000a44 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

	TIMx_EV_IRQHandling(&TIM_handles[3]);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <TIM5_IRQHandler+0x10>)
 8000a4a:	f000 fd35 	bl	80014b8 <TIMx_EV_IRQHandling>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000078 	.word	0x20000078

08000a58 <TIM_ApplicationEventCallback>:

void TIM_ApplicationEventCallback(TIM_Handle_t *pTIMHandle, uint8_t AppEv)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
	if (AppEv == TIMx_EV_UIF)
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 80a1 	bne.w	8000bae <TIM_ApplicationEventCallback+0x156>
	{
		counter++;
 8000a6c:	4b52      	ldr	r3, [pc, #328]	@ (8000bb8 <TIM_ApplicationEventCallback+0x160>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a51      	ldr	r2, [pc, #324]	@ (8000bb8 <TIM_ApplicationEventCallback+0x160>)
 8000a74:	6013      	str	r3, [r2, #0]

		// --- Acceleration ramp ---
		if (f_current < f_target)
 8000a76:	4b51      	ldr	r3, [pc, #324]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a51      	ldr	r2, [pc, #324]	@ (8000bc0 <TIM_ApplicationEventCallback+0x168>)
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe6b 	bl	800075c <__aeabi_fcmplt>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d022      	beq.n	8000ad2 <TIM_ApplicationEventCallback+0x7a>
		{
			f_current += accel * T; // f = f + a*dt
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc4 <TIM_ApplicationEventCallback+0x16c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a4d      	ldr	r2, [pc, #308]	@ (8000bc8 <TIM_ApplicationEventCallback+0x170>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fcc2 	bl	8000420 <__aeabi_fmul>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b46      	ldr	r3, [pc, #280]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	f7ff fbb2 	bl	8000210 <__addsf3>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b42      	ldr	r3, [pc, #264]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000ab2:	601a      	str	r2, [r3, #0]
			if (f_current > f_target)
 8000ab4:	4b41      	ldr	r3, [pc, #260]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a41      	ldr	r2, [pc, #260]	@ (8000bc0 <TIM_ApplicationEventCallback+0x168>)
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe6a 	bl	8000798 <__aeabi_fcmpgt>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <TIM_ApplicationEventCallback+0x7a>
				f_current = f_target;
 8000aca:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc0 <TIM_ApplicationEventCallback+0x168>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3b      	ldr	r2, [pc, #236]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000ad0:	6013      	str	r3, [r2, #0]
		}

		// Compute new period
		T = 1.0f / f_current;
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000adc:	f7ff fd54 	bl	8000588 <__aeabi_fdiv>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b38      	ldr	r3, [pc, #224]	@ (8000bc8 <TIM_ApplicationEventCallback+0x170>)
 8000ae6:	601a      	str	r2, [r3, #0]
		arr = (uint32_t)(T / clk_period + 0.5f);
 8000ae8:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <TIM_ApplicationEventCallback+0x170>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a37      	ldr	r2, [pc, #220]	@ (8000bcc <TIM_ApplicationEventCallback+0x174>)
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd49 	bl	8000588 <__aeabi_fdiv>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb87 	bl	8000210 <__addsf3>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe51 	bl	80007ac <__aeabi_f2uiz>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a30      	ldr	r2, [pc, #192]	@ (8000bd0 <TIM_ApplicationEventCallback+0x178>)
 8000b0e:	6013      	str	r3, [r2, #0]
		//
		// Update timer safely

		pTIMHandle->pTIMx->ARR = arr;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd0 <TIM_ApplicationEventCallback+0x178>)
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
		pTIMHandle->pTIMx->CCR1 = arr / 2;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <TIM_ApplicationEventCallback+0x178>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0852      	lsrs	r2, r2, #1
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
		pTIMHandle->pTIMx->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 0201 	orr.w	r2, r2, #1
 8000b34:	615a      	str	r2, [r3, #20]
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	611a      	str	r2, [r3, #16]

		if (counter >= steps_target)
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <TIM_ApplicationEventCallback+0x160>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <TIM_ApplicationEventCallback+0x17c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d32d      	bcc.n	8000bae <TIM_ApplicationEventCallback+0x156>
		{

			pTIMHandle->pTIMx->CR1 &= ~(1 << TIM_CR1_CEN_POS); // Stop timer
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
			f_current = 50.0f;
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <TIM_ApplicationEventCallback+0x164>)
 8000b64:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <TIM_ApplicationEventCallback+0x180>)
 8000b66:	601a      	str	r2, [r3, #0]
			T = clk_period * ARR_VAL; // First period  should be 5000 microsecs
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <TIM_ApplicationEventCallback+0x174>)
 8000b6a:	491c      	ldr	r1, [pc, #112]	@ (8000bdc <TIM_ApplicationEventCallback+0x184>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fc57 	bl	8000420 <__aeabi_fmul>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <TIM_ApplicationEventCallback+0x170>)
 8000b78:	601a      	str	r2, [r3, #0]
			pTIMHandle->pTIMx->ARR = ARR_VAL - 1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b82:	62da      	str	r2, [r3, #44]	@ 0x2c
			pTIMHandle->pTIMx->CCR1 = (ARR_VAL - 1) / 2;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000b8c:	635a      	str	r2, [r3, #52]	@ 0x34
			pTIMHandle->pTIMx->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0201 	orr.w	r2, r2, #1
 8000b9c:	615a      	str	r2, [r3, #20]
			pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	691a      	ldr	r2, [r3, #16]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
		}
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000034 	.word	0x20000034
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	35a7c5ac 	.word	0x35a7c5ac
 8000bd0:	20000030 	.word	0x20000030
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	42480000 	.word	0x42480000
 8000bdc:	45fa0000 	.word	0x45fa0000

08000be0 <GPIO_Init>:
 *  Created on: Mar 17, 2025
 *      Author: bright
 */
#include "stm32f446xx_GPIO_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f99c 	bl	8000f2c <GPIO_PeriClockControl>

	/*Non-Interrupt Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	795b      	ldrb	r3, [r3, #5]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d81f      	bhi.n	8000c3c <GPIO_Init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2103      	movs	r1, #3
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	400a      	ands	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e0b0      	b.n	8000d9e <GPIO_Init+0x1be>

	}
	/*Interrupt Mode*/
	else{

		uint8_t index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	73fb      	strb	r3, [r7, #15]

		uint8_t Port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a99      	ldr	r2, [pc, #612]	@ (8000eb0 <GPIO_Init+0x2d0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d032      	beq.n	8000cb4 <GPIO_Init+0xd4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a98      	ldr	r2, [pc, #608]	@ (8000eb4 <GPIO_Init+0x2d4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d02b      	beq.n	8000cb0 <GPIO_Init+0xd0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a96      	ldr	r2, [pc, #600]	@ (8000eb8 <GPIO_Init+0x2d8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d024      	beq.n	8000cac <GPIO_Init+0xcc>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a95      	ldr	r2, [pc, #596]	@ (8000ebc <GPIO_Init+0x2dc>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d01d      	beq.n	8000ca8 <GPIO_Init+0xc8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a93      	ldr	r2, [pc, #588]	@ (8000ec0 <GPIO_Init+0x2e0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d016      	beq.n	8000ca4 <GPIO_Init+0xc4>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a92      	ldr	r2, [pc, #584]	@ (8000ec4 <GPIO_Init+0x2e4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d00f      	beq.n	8000ca0 <GPIO_Init+0xc0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a90      	ldr	r2, [pc, #576]	@ (8000ec8 <GPIO_Init+0x2e8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d008      	beq.n	8000c9c <GPIO_Init+0xbc>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a8f      	ldr	r2, [pc, #572]	@ (8000ecc <GPIO_Init+0x2ec>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <GPIO_Init+0xb8>
 8000c94:	2307      	movs	r3, #7
 8000c96:	e00e      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e00c      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	e00a      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	e008      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e006      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e004      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e002      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <GPIO_Init+0xd6>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	795b      	ldrb	r3, [r3, #5]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d117      	bne.n	8000cf0 <GPIO_Init+0x110>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cc0:	4b83      	ldr	r3, [pc, #524]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	7912      	ldrb	r2, [r2, #4]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	2201      	movs	r2, #1
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd6:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7912      	ldrb	r2, [r2, #4]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	43d2      	mvns	r2, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a79      	ldr	r2, [pc, #484]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000cea:	400b      	ands	r3, r1
 8000cec:	6093      	str	r3, [r2, #8]
 8000cee:	e031      	b.n	8000d54 <GPIO_Init+0x174>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	795b      	ldrb	r3, [r3, #5]
 8000cf4:	2b05      	cmp	r3, #5
 8000cf6:	d117      	bne.n	8000d28 <GPIO_Init+0x148>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cf8:	4b75      	ldr	r3, [pc, #468]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	7912      	ldrb	r2, [r2, #4]
 8000d00:	4611      	mov	r1, r2
 8000d02:	2201      	movs	r2, #1
 8000d04:	408a      	lsls	r2, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a71      	ldr	r2, [pc, #452]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d0e:	4b70      	ldr	r3, [pc, #448]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	7912      	ldrb	r2, [r2, #4]
 8000d16:	4611      	mov	r1, r2
 8000d18:	2201      	movs	r2, #1
 8000d1a:	408a      	lsls	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4a6b      	ldr	r2, [pc, #428]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d22:	400b      	ands	r3, r1
 8000d24:	60d3      	str	r3, [r2, #12]
 8000d26:	e015      	b.n	8000d54 <GPIO_Init+0x174>
		}
		else{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d28:	4b69      	ldr	r3, [pc, #420]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	7912      	ldrb	r2, [r2, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	2201      	movs	r2, #1
 8000d34:	408a      	lsls	r2, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a65      	ldr	r2, [pc, #404]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d3e:	4b64      	ldr	r3, [pc, #400]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	7912      	ldrb	r2, [r2, #4]
 8000d46:	4611      	mov	r1, r2
 8000d48:	2201      	movs	r2, #1
 8000d4a:	408a      	lsls	r2, r1
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a60      	ldr	r2, [pc, #384]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	60d3      	str	r3, [r2, #12]

		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 8000d54:	4b5f      	ldr	r3, [pc, #380]	@ (8000ed4 <GPIO_Init+0x2f4>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d58:	4a5e      	ldr	r2, [pc, #376]	@ (8000ed4 <GPIO_Init+0x2f4>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[index] |= (Port << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4));
 8000d60:	4a5d      	ldr	r2, [pc, #372]	@ (8000ed8 <GPIO_Init+0x2f8>)
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6a:	7bb9      	ldrb	r1, [r7, #14]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	791b      	ldrb	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	4956      	ldr	r1, [pc, #344]	@ (8000ed8 <GPIO_Init+0x2f8>)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4302      	orrs	r2, r0
 8000d82:	3302      	adds	r3, #2
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d88:	4b51      	ldr	r3, [pc, #324]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7912      	ldrb	r2, [r2, #4]
 8000d90:	4611      	mov	r1, r2
 8000d92:	2201      	movs	r2, #1
 8000d94:	408a      	lsls	r2, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed0 <GPIO_Init+0x2f0>)
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6013      	str	r3, [r2, #0]


	}

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	4619      	mov	r1, r3
 8000daa:	2303      	movs	r3, #3
 8000dac:	408b      	lsls	r3, r1
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	400a      	ands	r2, r1
 8000db8:	609a      	str	r2, [r3, #8]
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	799b      	ldrb	r3, [r3, #6]
 8000dc4:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	609a      	str	r2, [r3, #8]


	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	791b      	ldrb	r3, [r3, #4]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2303      	movs	r3, #3
 8000de8:	408b      	lsls	r3, r1
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	400a      	ands	r2, r1
 8000df4:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	79db      	ldrb	r3, [r3, #7]
 8000e00:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2301      	movs	r3, #1
 8000e24:	408b      	lsls	r3, r1
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	400a      	ands	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a1b      	ldrb	r3, [r3, #8]
 8000e3c:	4619      	mov	r1, r3
					   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	791b      	ldrb	r3, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	605a      	str	r2, [r3, #4]

	/*Alternate Function Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d164      	bne.n	8000f22 <GPIO_Init+0x342>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7 && pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 16 ){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	791b      	ldrb	r3, [r3, #4]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d93d      	bls.n	8000edc <GPIO_Init+0x2fc>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d939      	bls.n	8000edc <GPIO_Init+0x2fc>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	210f      	movs	r1, #15
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	400a      	ands	r2, r1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7a5b      	ldrb	r3, [r3, #9]
 8000e94:	4619      	mov	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

		}
	}


}
 8000eae:	e038      	b.n	8000f22 <GPIO_Init+0x342>
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40021400 	.word	0x40021400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021c00 	.word	0x40021c00
 8000ed0:	40013c00 	.word	0x40013c00
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	210f      	movs	r1, #15
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	400a      	ands	r2, r1
 8000efc:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a5b      	ldrb	r3, [r3, #9]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	791b      	ldrb	r3, [r3, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	621a      	str	r2, [r3, #32]
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop

08000f2c <GPIO_PeriClockControl>:


}

/*Enable Clock of the given GPIO*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
//	assert(pGPIOx == NULL);
	if(ENorDI == ENABLE){
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d157      	bne.n	8000fee <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == pGPIOA){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a59      	ldr	r2, [pc, #356]	@ (80010a8 <GPIO_PeriClockControl+0x17c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000f46:	4b59      	ldr	r3, [pc, #356]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a58      	ldr	r2, [pc, #352]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == pGPIOH){

					GPIOH_PCLK_DI();
				}
	}
}
 8000f52:	e0a3      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOB){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a56      	ldr	r2, [pc, #344]	@ (80010b0 <GPIO_PeriClockControl+0x184>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f5c:	4b53      	ldr	r3, [pc, #332]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a52      	ldr	r2, [pc, #328]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f68:	e098      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOC){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	@ (80010b4 <GPIO_PeriClockControl+0x188>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f72:	4b4e      	ldr	r3, [pc, #312]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a4d      	ldr	r2, [pc, #308]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f7e:	e08d      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOD){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	@ (80010b8 <GPIO_PeriClockControl+0x18c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d106      	bne.n	8000f96 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f88:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	4a47      	ldr	r2, [pc, #284]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f94:	e082      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOE){
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	@ (80010bc <GPIO_PeriClockControl+0x190>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d106      	bne.n	8000fac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f9e:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a42      	ldr	r2, [pc, #264]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000faa:	e077      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOF){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a44      	ldr	r2, [pc, #272]	@ (80010c0 <GPIO_PeriClockControl+0x194>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d106      	bne.n	8000fc2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fc0:	e06c      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOG){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a3f      	ldr	r2, [pc, #252]	@ (80010c4 <GPIO_PeriClockControl+0x198>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d106      	bne.n	8000fd8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000fca:	4b38      	ldr	r3, [pc, #224]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a37      	ldr	r2, [pc, #220]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fd6:	e061      	b.n	800109c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOH){
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3b      	ldr	r2, [pc, #236]	@ (80010c8 <GPIO_PeriClockControl+0x19c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d15d      	bne.n	800109c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000fe0:	4b32      	ldr	r3, [pc, #200]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	4a31      	ldr	r2, [pc, #196]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fec:	e056      	b.n	800109c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == pGPIOA){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80010a8 <GPIO_PeriClockControl+0x17c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001002:	e04b      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOB){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <GPIO_PeriClockControl+0x184>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d106      	bne.n	800101a <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001012:	f023 0302 	bic.w	r3, r3, #2
 8001016:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001018:	e040      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOC){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a25      	ldr	r2, [pc, #148]	@ (80010b4 <GPIO_PeriClockControl+0x188>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d106      	bne.n	8001030 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800102e:	e035      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOD){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <GPIO_PeriClockControl+0x18c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d106      	bne.n	8001046 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 800103e:	f023 0308 	bic.w	r3, r3, #8
 8001042:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001044:	e02a      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOE){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <GPIO_PeriClockControl+0x190>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d106      	bne.n	800105c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001054:	f023 0310 	bic.w	r3, r3, #16
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800105a:	e01f      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOF){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <GPIO_PeriClockControl+0x194>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d106      	bne.n	8001072 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 800106a:	f023 0320 	bic.w	r3, r3, #32
 800106e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001070:	e014      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOG){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a13      	ldr	r2, [pc, #76]	@ (80010c4 <GPIO_PeriClockControl+0x198>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001086:	e009      	b.n	800109c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOH){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <GPIO_PeriClockControl+0x19c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d105      	bne.n	800109c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <GPIO_PeriClockControl+0x180>)
 8001096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40021800 	.word	0x40021800
 80010c8:	40021c00 	.word	0x40021c00

080010cc <TIM_Init>:
 */
#include "stm32f446xx_Timer_driver.h"


void static TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle);
void TIM_Init(TIM_Handle_t *pTIMHandle){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	TIM_PeriClockControl(pTIMHandle->pTIMx,ENABLE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f83a 	bl	8001154 <TIM_PeriClockControl>
	// Set Prescaler - HSI SysCLK is 16 MHZ
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIMx_PinConfig.TIM_Prescaler - 1;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3a01      	subs	r2, #1
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
	// Set ARR corresponded to the given period
	// ARR = Given Periode * (SysCLK/Prescaler)
	pTIMHandle->pTIMx->ARR = (pTIMHandle->TIMx_PinConfig.TIM_ARR) - 1 ;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3a01      	subs	r2, #1
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable Capture/Compare Mode
	pTIMHandle->pTIMx->CCER  |= (1 << 4 * (pTIMHandle->TIMx_PinConfig.TIM_Channel-1));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a1a      	ldr	r2, [r3, #32]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7c5b      	ldrb	r3, [r3, #17]
 8001102:	3b01      	subs	r3, #1
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	4619      	mov	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	621a      	str	r2, [r3, #32]
	// Set Dir default is countup
	pTIMHandle->pTIMx->CR1  &= ~(1 << TIM_CR1_DIR_POS);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	601a      	str	r2, [r3, #0]
	if(pTIMHandle->TIMx_PinConfig.TIM_CountDir== TIMx_CR1_DIR_UPWARDS){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7c1b      	ldrb	r3, [r3, #16]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <TIM_Init+0x72>
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_DIR_POS);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0210 	orr.w	r2, r2, #16
 800113c:	601a      	str	r2, [r3, #0]
	}

	if(pTIMHandle->TIMx_PinConfig.TIM_Mode == TIMx_MODE_COMPARE){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7c9b      	ldrb	r3, [r3, #18]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <TIM_Init+0x80>
		//Set Compare mode
		TIM_SetCompareModeChannel(pTIMHandle);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f872 	bl	8001230 <TIM_SetCompareModeChannel>
	}else{
		//Set Capture mode
	}


}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <TIM_PeriClockControl>:

/*Enable Clock of the given Timer*/
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t ENorDI){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]

	if(ENorDI == ENABLE){
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12b      	bne.n	80011be <TIM_PeriClockControl+0x6a>

		if(pTIMx == pTIM2){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800116c:	d106      	bne.n	800117c <TIM_PeriClockControl+0x28>
			TIM2_PCLK_EN();
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pTIMx == pTIM5){
			TIM5_PCLK_DI();
		}

	}
}
 800117a:	e04b      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a29      	ldr	r2, [pc, #164]	@ (8001224 <TIM_PeriClockControl+0xd0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001190:	e040      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <TIM_PeriClockControl+0xd4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d106      	bne.n	80011a8 <TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a20      	ldr	r2, [pc, #128]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011a6:	e035      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a20      	ldr	r2, [pc, #128]	@ (800122c <TIM_PeriClockControl+0xd8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d131      	bne.n	8001214 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011bc:	e02a      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		if(pTIMx == pTIM2){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c4:	d106      	bne.n	80011d4 <TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011cc:	f063 0301 	orn	r3, r3, #1
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011d2:	e01f      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <TIM_PeriClockControl+0xd0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 80011dc:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011e2:	f063 0302 	orn	r3, r3, #2
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011e8:	e014      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <TIM_PeriClockControl+0xd4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d106      	bne.n	8001200 <TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 80011f8:	f063 0304 	orn	r3, r3, #4
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011fe:	e009      	b.n	8001214 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <TIM_PeriClockControl+0xd8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d105      	bne.n	8001214 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <TIM_PeriClockControl+0xcc>)
 800120e:	f063 0308 	orn	r3, r3, #8
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40000400 	.word	0x40000400
 8001228:	40000800 	.word	0x40000800
 800122c:	40000c00 	.word	0x40000c00

08001230 <TIM_SetCompareModeChannel>:

/*Enable Clock of the given Timer*/
void TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle){
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

		if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH1){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7c5b      	ldrb	r3, [r3, #17]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d11f      	bne.n	8001280 <TIM_SetCompareModeChannel+0x50>
			// CCR1 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68d2      	ldr	r2, [r2, #12]
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
			//Clear TIM_CCMR1_OC1M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC1M_POS);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001258:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC1M_POS);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6999      	ldr	r1, [r3, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7cdb      	ldrb	r3, [r3, #19]
 8001264:	011a      	lsls	r2, r3, #4
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	619a      	str	r2, [r3, #24]
			//Pre-load Buffer Enable
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC1PE_POS);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0208 	orr.w	r2, r2, #8
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	e06a      	b.n	8001356 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH2){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7c5b      	ldrb	r3, [r3, #17]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d11f      	bne.n	80012c8 <TIM_SetCompareModeChannel+0x98>
			// CCR2 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68d2      	ldr	r2, [r2, #12]
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
			//Clear TIM_CCMR1_OC2M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC2M_POS);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80012a0:	619a      	str	r2, [r3, #24]
			//Set TIM_CCMR1_OC2M_POS MODE
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC2M_POS);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6999      	ldr	r1, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7cdb      	ldrb	r3, [r3, #19]
 80012ac:	031a      	lsls	r2, r3, #12
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC2PE_POS);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012c4:	619a      	str	r2, [r3, #24]
 80012c6:	e046      	b.n	8001356 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH3){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7c5b      	ldrb	r3, [r3, #17]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d11f      	bne.n	8001310 <TIM_SetCompareModeChannel+0xe0>
			// CCR3 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68d2      	ldr	r2, [r2, #12]
 80012d8:	63da      	str	r2, [r3, #60]	@ 0x3c
			//Clear TIM_CCMR2_OC3M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC3M_POS);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80012e8:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC3M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC3M_POS);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69d9      	ldr	r1, [r3, #28]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7cdb      	ldrb	r3, [r3, #19]
 80012f4:	011a      	lsls	r2, r3, #4
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC3PE_POS);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0208 	orr.w	r2, r2, #8
 800130c:	61da      	str	r2, [r3, #28]
 800130e:	e022      	b.n	8001356 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH4){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7c5b      	ldrb	r3, [r3, #17]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d11e      	bne.n	8001356 <TIM_SetCompareModeChannel+0x126>
			// CCR4 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68d2      	ldr	r2, [r2, #12]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
			//Clear TIM_CCMR2_OC4M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC4M_POS);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8001330:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC4M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC4M_POS);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69d9      	ldr	r1, [r3, #28]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7cdb      	ldrb	r3, [r3, #19]
 800133c:	031a      	lsls	r2, r3, #12
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC4PE_POS);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69da      	ldr	r2, [r3, #28]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001354:	61da      	str	r2, [r3, #28]

		}
		//Auto reload pre-load Enable
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_ARPE_POS);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001364:	601a      	str	r2, [r3, #0]

		//Enable Counter
//		 pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);


}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <TIM_InterruptEnable>:
/******************************IRQ Enable*******************************/
void TIM_InterruptEnable(TIM_Handle_t *pTIMHandle,uint8_t ENorDI){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
	//Enable Interrupt Mode

	if(ENorDI == ENABLE){
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <TIM_InterruptEnable+0x24>

		pTIMHandle->pTIMx->DIER  |= (1 << TIM_DIER_UIE_POS);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	60da      	str	r2, [r3, #12]
	}
	else{
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
	}

}
 8001392:	e007      	b.n	80013a4 <TIM_InterruptEnable+0x34>
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	60da      	str	r2, [r3, #12]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <TIM_IRQInterruptConfig>:

/******************************IRQ Configuration*******************************/
void TIM_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
	/*Configure IRQ number of TIM
	 *ISER Interrupt Set-enable Register
	 * */

	if(ENorDI == ENABLE){
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d133      	bne.n	800142e <TIM_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b1f      	cmp	r3, #31
 80013ca:	d80a      	bhi.n	80013e2 <TIM_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 80013cc:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <TIM_IRQInterruptConfig+0xf0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	4611      	mov	r1, r2
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <TIM_IRQInterruptConfig+0xf0>)
 80013dc:	430b      	orrs	r3, r1
 80013de:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 64 && IRQNumber <96){
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 80013e0:	e059      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d90f      	bls.n	8001408 <TIM_IRQInterruptConfig+0x58>
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80013ec:	d80c      	bhi.n	8001408 <TIM_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <TIM_IRQInterruptConfig+0xf4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	4611      	mov	r1, r2
 8001400:	4a28      	ldr	r2, [pc, #160]	@ (80014a4 <TIM_IRQInterruptConfig+0xf4>)
 8001402:	430b      	orrs	r3, r1
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e046      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b3f      	cmp	r3, #63	@ 0x3f
 800140c:	d943      	bls.n	8001496 <TIM_IRQInterruptConfig+0xe6>
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b5f      	cmp	r3, #95	@ 0x5f
 8001412:	d840      	bhi.n	8001496 <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 8001414:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <TIM_IRQInterruptConfig+0xf8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	4611      	mov	r1, r2
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <TIM_IRQInterruptConfig+0xf8>)
 8001428:	430b      	orrs	r3, r1
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	e033      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b1f      	cmp	r3, #31
 8001432:	d80a      	bhi.n	800144a <TIM_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= (1 << IRQNumber);
 8001434:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <TIM_IRQInterruptConfig+0xfc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <TIM_IRQInterruptConfig+0xfc>)
 8001444:	430b      	orrs	r3, r1
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	e025      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b1f      	cmp	r3, #31
 800144e:	d90f      	bls.n	8001470 <TIM_IRQInterruptConfig+0xc0>
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b3f      	cmp	r3, #63	@ 0x3f
 8001454:	d80c      	bhi.n	8001470 <TIM_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <TIM_IRQInterruptConfig+0x100>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4611      	mov	r1, r2
 8001468:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <TIM_IRQInterruptConfig+0x100>)
 800146a:	430b      	orrs	r3, r1
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e012      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b3f      	cmp	r3, #63	@ 0x3f
 8001474:	d90f      	bls.n	8001496 <TIM_IRQInterruptConfig+0xe6>
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b5f      	cmp	r3, #95	@ 0x5f
 800147a:	d80c      	bhi.n	8001496 <TIM_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800147c:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <TIM_IRQInterruptConfig+0x104>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	4611      	mov	r1, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <TIM_IRQInterruptConfig+0x104>)
 8001490:	430b      	orrs	r3, r1
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	e7ff      	b.n	8001496 <TIM_IRQInterruptConfig+0xe6>
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000e104 	.word	0xe000e104
 80014a8:	e000e108 	.word	0xe000e108
 80014ac:	e000e180 	.word	0xe000e180
 80014b0:	e000e184 	.word	0xe000e184
 80014b4:	e000e188 	.word	0xe000e188

080014b8 <TIMx_EV_IRQHandling>:

/******************************Event Handling*******************************/
void TIMx_EV_IRQHandling(TIM_Handle_t *pTIMHandle){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

	// ARR Overflow
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_UIF_POS)){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <TIMx_EV_IRQHandling+0x2e>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);  // Clear update UIF flag
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_UIF);
 80014de:	2100      	movs	r1, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fab9 	bl	8000a58 <TIM_ApplicationEventCallback>
//	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC4OF_POS )){
//		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC4OF_POS);  // Clear update CC14F flag
//		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC4OF);
//	}

}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <main>:
// extern void initialise_monitor_handles(void);
TIM_Handle_t timer;

// 1 = UP and 0 = DOWN
int main(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08d      	sub	sp, #52	@ 0x34
 80014f4:	af04      	add	r7, sp, #16
	//	initialise_monitor_handles();   // <-- enable semihosting

	timer.pTIMx = pTIM2;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <main+0x78>)
 80014f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014fc:	601a      	str	r2, [r3, #0]
	A4988_config_t stepper_1;
	memset(&stepper_1, 0, sizeof(stepper_1));
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2218      	movs	r2, #24
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f85e 	bl	80015c6 <memset>

	/*Always initiate clock first before data line*/
	stepper_1.step_port = pGPIOA;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <main+0x7c>)
 800150c:	607b      	str	r3, [r7, #4]
	stepper_1.step_pin = 5;
 800150e:	2305      	movs	r3, #5
 8001510:	723b      	strb	r3, [r7, #8]
	stepper_1.step_alt_mode = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	727b      	strb	r3, [r7, #9]
	stepper_1.step_timer_port = pTIM2;
 8001516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151a:	60fb      	str	r3, [r7, #12]
	stepper_1.step_channel = TIMx_CH1;
 800151c:	2301      	movs	r3, #1
 800151e:	743b      	strb	r3, [r7, #16]
	stepper_1.step_IRQ_number = IRQ_NO_TIM2;
 8001520:	231c      	movs	r3, #28
 8001522:	747b      	strb	r3, [r7, #17]

	stepper_1.dir_port = pGPIOA;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <main+0x7c>)
 8001526:	617b      	str	r3, [r7, #20]
	stepper_1.dir_pin = 9;
 8001528:	2309      	movs	r3, #9
 800152a:	763b      	strb	r3, [r7, #24]
	stepper_1.dir_alt_mode = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	767b      	strb	r3, [r7, #25]

	A4988_init(&stepper_1);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f95a 	bl	80007ec <A4988_init>

	/* Loop forever */
	for (;;)
	{
		A4988_move_Step(200, HIGH, timer);
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <main+0x78>)
 800153a:	466c      	mov	r4, sp
 800153c:	f103 0208 	add.w	r2, r3, #8
 8001540:	ca07      	ldmia	r2, {r0, r1, r2}
 8001542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001546:	cb0c      	ldmia	r3, {r2, r3}
 8001548:	2101      	movs	r1, #1
 800154a:	20c8      	movs	r0, #200	@ 0xc8
 800154c:	f7ff fa0e 	bl	800096c <A4988_move_Step>
		for (uint32_t i = 0; i < 1000000; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	e002      	b.n	800155c <main+0x6c>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <main+0x80>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d9f8      	bls.n	8001556 <main+0x66>
		A4988_move_Step(200, HIGH, timer);
 8001564:	e7e8      	b.n	8001538 <main+0x48>
 8001566:	bf00      	nop
 8001568:	2000008c 	.word	0x2000008c
 800156c:	40020000 	.word	0x40020000
 8001570:	000f423f 	.word	0x000f423f

08001574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	@ (80015b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <LoopForever+0xe>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	@ (80015c0 <LoopForever+0x16>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015a2:	f000 f819 	bl	80015d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a6:	f7ff ffa3 	bl	80014f0 <main>

080015aa <LoopForever>:

LoopForever:
  b LoopForever
 80015aa:	e7fe      	b.n	80015aa <LoopForever>
  ldr   r0, =_estack
 80015ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015b8:	08001640 	.word	0x08001640
  ldr r2, =_sbss
 80015bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015c0:	200000a0 	.word	0x200000a0

080015c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC_IRQHandler>

080015c6 <memset>:
 80015c6:	4402      	add	r2, r0
 80015c8:	4603      	mov	r3, r0
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d100      	bne.n	80015d0 <memset+0xa>
 80015ce:	4770      	bx	lr
 80015d0:	f803 1b01 	strb.w	r1, [r3], #1
 80015d4:	e7f9      	b.n	80015ca <memset+0x4>
	...

080015d8 <__libc_init_array>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	4d0d      	ldr	r5, [pc, #52]	@ (8001610 <__libc_init_array+0x38>)
 80015dc:	4c0d      	ldr	r4, [pc, #52]	@ (8001614 <__libc_init_array+0x3c>)
 80015de:	1b64      	subs	r4, r4, r5
 80015e0:	10a4      	asrs	r4, r4, #2
 80015e2:	2600      	movs	r6, #0
 80015e4:	42a6      	cmp	r6, r4
 80015e6:	d109      	bne.n	80015fc <__libc_init_array+0x24>
 80015e8:	4d0b      	ldr	r5, [pc, #44]	@ (8001618 <__libc_init_array+0x40>)
 80015ea:	4c0c      	ldr	r4, [pc, #48]	@ (800161c <__libc_init_array+0x44>)
 80015ec:	f000 f818 	bl	8001620 <_init>
 80015f0:	1b64      	subs	r4, r4, r5
 80015f2:	10a4      	asrs	r4, r4, #2
 80015f4:	2600      	movs	r6, #0
 80015f6:	42a6      	cmp	r6, r4
 80015f8:	d105      	bne.n	8001606 <__libc_init_array+0x2e>
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001600:	4798      	blx	r3
 8001602:	3601      	adds	r6, #1
 8001604:	e7ee      	b.n	80015e4 <__libc_init_array+0xc>
 8001606:	f855 3b04 	ldr.w	r3, [r5], #4
 800160a:	4798      	blx	r3
 800160c:	3601      	adds	r6, #1
 800160e:	e7f2      	b.n	80015f6 <__libc_init_array+0x1e>
 8001610:	08001638 	.word	0x08001638
 8001614:	08001638 	.word	0x08001638
 8001618:	08001638 	.word	0x08001638
 800161c:	0800163c 	.word	0x0800163c

08001620 <_init>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr

0800162c <_fini>:
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162e:	bf00      	nop
 8001630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001632:	bc08      	pop	{r3}
 8001634:	469e      	mov	lr, r3
 8001636:	4770      	bx	lr
