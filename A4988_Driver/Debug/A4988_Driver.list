
A4988_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800178c  08001794  00002794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800178c  0800178c  00002794  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800178c  0800178c  00002794  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800178c  08001794  00002794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800178c  0800178c  0000278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001790  08001790  00002790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000000  08001794  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001794  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001995  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000681  00000000  00000000  00004153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000047d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000126  00000000  00000000  00004970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dce  00000000  00000000  00004a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000237c  00000000  00000000  00007864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a594  00000000  00000000  00009be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00014174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e4  00000000  00000000  000141b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0001489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001774 	.word	0x08001774

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08001774 	.word	0x08001774

08000204 <__aeabi_frsub>:
 8000204:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__addsf3>
 800020a:	bf00      	nop

0800020c <__aeabi_fsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000210 <__addsf3>:
 8000210:	0042      	lsls	r2, r0, #1
 8000212:	bf1f      	itttt	ne
 8000214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000218:	ea92 0f03 	teqne	r2, r3
 800021c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000224:	d06a      	beq.n	80002fc <__addsf3+0xec>
 8000226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022e:	bfc1      	itttt	gt
 8000230:	18d2      	addgt	r2, r2, r3
 8000232:	4041      	eorgt	r1, r0
 8000234:	4048      	eorgt	r0, r1
 8000236:	4041      	eorgt	r1, r0
 8000238:	bfb8      	it	lt
 800023a:	425b      	neglt	r3, r3
 800023c:	2b19      	cmp	r3, #25
 800023e:	bf88      	it	hi
 8000240:	4770      	bxhi	lr
 8000242:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000246:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800024a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800024e:	bf18      	it	ne
 8000250:	4240      	negne	r0, r0
 8000252:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000256:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800025a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800025e:	bf18      	it	ne
 8000260:	4249      	negne	r1, r1
 8000262:	ea92 0f03 	teq	r2, r3
 8000266:	d03f      	beq.n	80002e8 <__addsf3+0xd8>
 8000268:	f1a2 0201 	sub.w	r2, r2, #1
 800026c:	fa41 fc03 	asr.w	ip, r1, r3
 8000270:	eb10 000c 	adds.w	r0, r0, ip
 8000274:	f1c3 0320 	rsb	r3, r3, #32
 8000278:	fa01 f103 	lsl.w	r1, r1, r3
 800027c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000280:	d502      	bpl.n	8000288 <__addsf3+0x78>
 8000282:	4249      	negs	r1, r1
 8000284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000288:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800028c:	d313      	bcc.n	80002b6 <__addsf3+0xa6>
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000292:	d306      	bcc.n	80002a2 <__addsf3+0x92>
 8000294:	0840      	lsrs	r0, r0, #1
 8000296:	ea4f 0131 	mov.w	r1, r1, rrx
 800029a:	f102 0201 	add.w	r2, r2, #1
 800029e:	2afe      	cmp	r2, #254	@ 0xfe
 80002a0:	d251      	bcs.n	8000346 <__addsf3+0x136>
 80002a2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	ea40 0003 	orr.w	r0, r0, r3
 80002b4:	4770      	bx	lr
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	eb40 0000 	adc.w	r0, r0, r0
 80002bc:	3a01      	subs	r2, #1
 80002be:	bf28      	it	cs
 80002c0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002c4:	d2ed      	bcs.n	80002a2 <__addsf3+0x92>
 80002c6:	fab0 fc80 	clz	ip, r0
 80002ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ce:	ebb2 020c 	subs.w	r2, r2, ip
 80002d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d6:	bfaa      	itet	ge
 80002d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002dc:	4252      	neglt	r2, r2
 80002de:	4318      	orrge	r0, r3
 80002e0:	bfbc      	itt	lt
 80002e2:	40d0      	lsrlt	r0, r2
 80002e4:	4318      	orrlt	r0, r3
 80002e6:	4770      	bx	lr
 80002e8:	f092 0f00 	teq	r2, #0
 80002ec:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002f0:	bf06      	itte	eq
 80002f2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002f6:	3201      	addeq	r2, #1
 80002f8:	3b01      	subne	r3, #1
 80002fa:	e7b5      	b.n	8000268 <__addsf3+0x58>
 80002fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000304:	bf18      	it	ne
 8000306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030a:	d021      	beq.n	8000350 <__addsf3+0x140>
 800030c:	ea92 0f03 	teq	r2, r3
 8000310:	d004      	beq.n	800031c <__addsf3+0x10c>
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	bf08      	it	eq
 8000318:	4608      	moveq	r0, r1
 800031a:	4770      	bx	lr
 800031c:	ea90 0f01 	teq	r0, r1
 8000320:	bf1c      	itt	ne
 8000322:	2000      	movne	r0, #0
 8000324:	4770      	bxne	lr
 8000326:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800032a:	d104      	bne.n	8000336 <__addsf3+0x126>
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	bf28      	it	cs
 8000330:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000334:	4770      	bx	lr
 8000336:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800033a:	bf3c      	itt	cc
 800033c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000340:	4770      	bxcc	lr
 8000342:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000346:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800034a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800034e:	4770      	bx	lr
 8000350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000354:	bf16      	itet	ne
 8000356:	4608      	movne	r0, r1
 8000358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800035c:	4601      	movne	r1, r0
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	bf06      	itte	eq
 8000362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000366:	ea90 0f01 	teqeq	r0, r1
 800036a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800036e:	4770      	bx	lr

08000370 <__aeabi_ui2f>:
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e004      	b.n	8000380 <__aeabi_i2f+0x8>
 8000376:	bf00      	nop

08000378 <__aeabi_i2f>:
 8000378:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800037c:	bf48      	it	mi
 800037e:	4240      	negmi	r0, r0
 8000380:	ea5f 0c00 	movs.w	ip, r0
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800038c:	4601      	mov	r1, r0
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	e01c      	b.n	80003ce <__aeabi_l2f+0x2a>

08000394 <__aeabi_ul2f>:
 8000394:	ea50 0201 	orrs.w	r2, r0, r1
 8000398:	bf08      	it	eq
 800039a:	4770      	bxeq	lr
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e00a      	b.n	80003b8 <__aeabi_l2f+0x14>
 80003a2:	bf00      	nop

080003a4 <__aeabi_l2f>:
 80003a4:	ea50 0201 	orrs.w	r2, r0, r1
 80003a8:	bf08      	it	eq
 80003aa:	4770      	bxeq	lr
 80003ac:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003b0:	d502      	bpl.n	80003b8 <__aeabi_l2f+0x14>
 80003b2:	4240      	negs	r0, r0
 80003b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b8:	ea5f 0c01 	movs.w	ip, r1
 80003bc:	bf02      	ittt	eq
 80003be:	4684      	moveq	ip, r0
 80003c0:	4601      	moveq	r1, r0
 80003c2:	2000      	moveq	r0, #0
 80003c4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003c8:	bf08      	it	eq
 80003ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003d2:	fabc f28c 	clz	r2, ip
 80003d6:	3a08      	subs	r2, #8
 80003d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003dc:	db10      	blt.n	8000400 <__aeabi_l2f+0x5c>
 80003de:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e2:	4463      	add	r3, ip
 80003e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e8:	f1c2 0220 	rsb	r2, r2, #32
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f0:	fa20 f202 	lsr.w	r2, r0, r2
 80003f4:	eb43 0002 	adc.w	r0, r3, r2
 80003f8:	bf08      	it	eq
 80003fa:	f020 0001 	biceq.w	r0, r0, #1
 80003fe:	4770      	bx	lr
 8000400:	f102 0220 	add.w	r2, r2, #32
 8000404:	fa01 fc02 	lsl.w	ip, r1, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000410:	fa21 f202 	lsr.w	r2, r1, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041e:	4770      	bx	lr

08000420 <__aeabi_fmul>:
 8000420:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000424:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000428:	bf1e      	ittt	ne
 800042a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800042e:	ea92 0f0c 	teqne	r2, ip
 8000432:	ea93 0f0c 	teqne	r3, ip
 8000436:	d06f      	beq.n	8000518 <__aeabi_fmul+0xf8>
 8000438:	441a      	add	r2, r3
 800043a:	ea80 0c01 	eor.w	ip, r0, r1
 800043e:	0240      	lsls	r0, r0, #9
 8000440:	bf18      	it	ne
 8000442:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000446:	d01e      	beq.n	8000486 <__aeabi_fmul+0x66>
 8000448:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800044c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000450:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000454:	fba0 3101 	umull	r3, r1, r0, r1
 8000458:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800045c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000460:	bf3e      	ittt	cc
 8000462:	0049      	lslcc	r1, r1, #1
 8000464:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000468:	005b      	lslcc	r3, r3, #1
 800046a:	ea40 0001 	orr.w	r0, r0, r1
 800046e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000472:	2afd      	cmp	r2, #253	@ 0xfd
 8000474:	d81d      	bhi.n	80004b2 <__aeabi_fmul+0x92>
 8000476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800047a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800047e:	bf08      	it	eq
 8000480:	f020 0001 	biceq.w	r0, r0, #1
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800048e:	bf08      	it	eq
 8000490:	0249      	lsleq	r1, r1, #9
 8000492:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000496:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800049a:	3a7f      	subs	r2, #127	@ 0x7f
 800049c:	bfc2      	ittt	gt
 800049e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004a6:	4770      	bxgt	lr
 80004a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004ac:	f04f 0300 	mov.w	r3, #0
 80004b0:	3a01      	subs	r2, #1
 80004b2:	dc5d      	bgt.n	8000570 <__aeabi_fmul+0x150>
 80004b4:	f112 0f19 	cmn.w	r2, #25
 80004b8:	bfdc      	itt	le
 80004ba:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004be:	4770      	bxle	lr
 80004c0:	f1c2 0200 	rsb	r2, r2, #0
 80004c4:	0041      	lsls	r1, r0, #1
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	f1c2 0220 	rsb	r2, r2, #32
 80004ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004d6:	f140 0000 	adc.w	r0, r0, #0
 80004da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004de:	bf08      	it	eq
 80004e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e4:	4770      	bx	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004ee:	bf02      	ittt	eq
 80004f0:	0040      	lsleq	r0, r0, #1
 80004f2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004f6:	3a01      	subeq	r2, #1
 80004f8:	d0f9      	beq.n	80004ee <__aeabi_fmul+0xce>
 80004fa:	ea40 000c 	orr.w	r0, r0, ip
 80004fe:	f093 0f00 	teq	r3, #0
 8000502:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000506:	bf02      	ittt	eq
 8000508:	0049      	lsleq	r1, r1, #1
 800050a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800050e:	3b01      	subeq	r3, #1
 8000510:	d0f9      	beq.n	8000506 <__aeabi_fmul+0xe6>
 8000512:	ea41 010c 	orr.w	r1, r1, ip
 8000516:	e78f      	b.n	8000438 <__aeabi_fmul+0x18>
 8000518:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800051c:	ea92 0f0c 	teq	r2, ip
 8000520:	bf18      	it	ne
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d00a      	beq.n	800053e <__aeabi_fmul+0x11e>
 8000528:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800052c:	bf18      	it	ne
 800052e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000532:	d1d8      	bne.n	80004e6 <__aeabi_fmul+0xc6>
 8000534:	ea80 0001 	eor.w	r0, r0, r1
 8000538:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800053c:	4770      	bx	lr
 800053e:	f090 0f00 	teq	r0, #0
 8000542:	bf17      	itett	ne
 8000544:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000548:	4608      	moveq	r0, r1
 800054a:	f091 0f00 	teqne	r1, #0
 800054e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000552:	d014      	beq.n	800057e <__aeabi_fmul+0x15e>
 8000554:	ea92 0f0c 	teq	r2, ip
 8000558:	d101      	bne.n	800055e <__aeabi_fmul+0x13e>
 800055a:	0242      	lsls	r2, r0, #9
 800055c:	d10f      	bne.n	800057e <__aeabi_fmul+0x15e>
 800055e:	ea93 0f0c 	teq	r3, ip
 8000562:	d103      	bne.n	800056c <__aeabi_fmul+0x14c>
 8000564:	024b      	lsls	r3, r1, #9
 8000566:	bf18      	it	ne
 8000568:	4608      	movne	r0, r1
 800056a:	d108      	bne.n	800057e <__aeabi_fmul+0x15e>
 800056c:	ea80 0001 	eor.w	r0, r0, r1
 8000570:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000574:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000578:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800057c:	4770      	bx	lr
 800057e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000582:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000586:	4770      	bx	lr

08000588 <__aeabi_fdiv>:
 8000588:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000590:	bf1e      	ittt	ne
 8000592:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000596:	ea92 0f0c 	teqne	r2, ip
 800059a:	ea93 0f0c 	teqne	r3, ip
 800059e:	d069      	beq.n	8000674 <__aeabi_fdiv+0xec>
 80005a0:	eba2 0203 	sub.w	r2, r2, r3
 80005a4:	ea80 0c01 	eor.w	ip, r0, r1
 80005a8:	0249      	lsls	r1, r1, #9
 80005aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ae:	d037      	beq.n	8000620 <__aeabi_fdiv+0x98>
 80005b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005c0:	428b      	cmp	r3, r1
 80005c2:	bf38      	it	cc
 80005c4:	005b      	lslcc	r3, r3, #1
 80005c6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005ca:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005ce:	428b      	cmp	r3, r1
 80005d0:	bf24      	itt	cs
 80005d2:	1a5b      	subcs	r3, r3, r1
 80005d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005dc:	bf24      	itt	cs
 80005de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ea:	bf24      	itt	cs
 80005ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005f8:	bf24      	itt	cs
 80005fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	bf18      	it	ne
 8000606:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800060a:	d1e0      	bne.n	80005ce <__aeabi_fdiv+0x46>
 800060c:	2afd      	cmp	r2, #253	@ 0xfd
 800060e:	f63f af50 	bhi.w	80004b2 <__aeabi_fmul+0x92>
 8000612:	428b      	cmp	r3, r1
 8000614:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000618:	bf08      	it	eq
 800061a:	f020 0001 	biceq.w	r0, r0, #1
 800061e:	4770      	bx	lr
 8000620:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000624:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000628:	327f      	adds	r2, #127	@ 0x7f
 800062a:	bfc2      	ittt	gt
 800062c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000630:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000634:	4770      	bxgt	lr
 8000636:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	3a01      	subs	r2, #1
 8000640:	e737      	b.n	80004b2 <__aeabi_fmul+0x92>
 8000642:	f092 0f00 	teq	r2, #0
 8000646:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800064a:	bf02      	ittt	eq
 800064c:	0040      	lsleq	r0, r0, #1
 800064e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000652:	3a01      	subeq	r2, #1
 8000654:	d0f9      	beq.n	800064a <__aeabi_fdiv+0xc2>
 8000656:	ea40 000c 	orr.w	r0, r0, ip
 800065a:	f093 0f00 	teq	r3, #0
 800065e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000662:	bf02      	ittt	eq
 8000664:	0049      	lsleq	r1, r1, #1
 8000666:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800066a:	3b01      	subeq	r3, #1
 800066c:	d0f9      	beq.n	8000662 <__aeabi_fdiv+0xda>
 800066e:	ea41 010c 	orr.w	r1, r1, ip
 8000672:	e795      	b.n	80005a0 <__aeabi_fdiv+0x18>
 8000674:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000678:	ea92 0f0c 	teq	r2, ip
 800067c:	d108      	bne.n	8000690 <__aeabi_fdiv+0x108>
 800067e:	0242      	lsls	r2, r0, #9
 8000680:	f47f af7d 	bne.w	800057e <__aeabi_fmul+0x15e>
 8000684:	ea93 0f0c 	teq	r3, ip
 8000688:	f47f af70 	bne.w	800056c <__aeabi_fmul+0x14c>
 800068c:	4608      	mov	r0, r1
 800068e:	e776      	b.n	800057e <__aeabi_fmul+0x15e>
 8000690:	ea93 0f0c 	teq	r3, ip
 8000694:	d104      	bne.n	80006a0 <__aeabi_fdiv+0x118>
 8000696:	024b      	lsls	r3, r1, #9
 8000698:	f43f af4c 	beq.w	8000534 <__aeabi_fmul+0x114>
 800069c:	4608      	mov	r0, r1
 800069e:	e76e      	b.n	800057e <__aeabi_fmul+0x15e>
 80006a0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006a4:	bf18      	it	ne
 80006a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006aa:	d1ca      	bne.n	8000642 <__aeabi_fdiv+0xba>
 80006ac:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006b0:	f47f af5c 	bne.w	800056c <__aeabi_fmul+0x14c>
 80006b4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006b8:	f47f af3c 	bne.w	8000534 <__aeabi_fmul+0x114>
 80006bc:	e75f      	b.n	800057e <__aeabi_fmul+0x15e>
 80006be:	bf00      	nop

080006c0 <__gesf2>:
 80006c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80006c4:	e006      	b.n	80006d4 <__cmpsf2+0x4>
 80006c6:	bf00      	nop

080006c8 <__lesf2>:
 80006c8:	f04f 0c01 	mov.w	ip, #1
 80006cc:	e002      	b.n	80006d4 <__cmpsf2+0x4>
 80006ce:	bf00      	nop

080006d0 <__cmpsf2>:
 80006d0:	f04f 0c01 	mov.w	ip, #1
 80006d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e4:	bf18      	it	ne
 80006e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ea:	d011      	beq.n	8000710 <__cmpsf2+0x40>
 80006ec:	b001      	add	sp, #4
 80006ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006f2:	bf18      	it	ne
 80006f4:	ea90 0f01 	teqne	r0, r1
 80006f8:	bf58      	it	pl
 80006fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80006fe:	bf88      	it	hi
 8000700:	17c8      	asrhi	r0, r1, #31
 8000702:	bf38      	it	cc
 8000704:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000708:	bf18      	it	ne
 800070a:	f040 0001 	orrne.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__cmpsf2+0x4c>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d105      	bne.n	8000728 <__cmpsf2+0x58>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d1e4      	bne.n	80006ec <__cmpsf2+0x1c>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d0e1      	beq.n	80006ec <__cmpsf2+0x1c>
 8000728:	f85d 0b04 	ldr.w	r0, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <__aeabi_cfrcmple>:
 8000730:	4684      	mov	ip, r0
 8000732:	4608      	mov	r0, r1
 8000734:	4661      	mov	r1, ip
 8000736:	e7ff      	b.n	8000738 <__aeabi_cfcmpeq>

08000738 <__aeabi_cfcmpeq>:
 8000738:	b50f      	push	{r0, r1, r2, r3, lr}
 800073a:	f7ff ffc9 	bl	80006d0 <__cmpsf2>
 800073e:	2800      	cmp	r0, #0
 8000740:	bf48      	it	mi
 8000742:	f110 0f00 	cmnmi.w	r0, #0
 8000746:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000748 <__aeabi_fcmpeq>:
 8000748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800074c:	f7ff fff4 	bl	8000738 <__aeabi_cfcmpeq>
 8000750:	bf0c      	ite	eq
 8000752:	2001      	moveq	r0, #1
 8000754:	2000      	movne	r0, #0
 8000756:	f85d fb08 	ldr.w	pc, [sp], #8
 800075a:	bf00      	nop

0800075c <__aeabi_fcmplt>:
 800075c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000760:	f7ff ffea 	bl	8000738 <__aeabi_cfcmpeq>
 8000764:	bf34      	ite	cc
 8000766:	2001      	movcc	r0, #1
 8000768:	2000      	movcs	r0, #0
 800076a:	f85d fb08 	ldr.w	pc, [sp], #8
 800076e:	bf00      	nop

08000770 <__aeabi_fcmple>:
 8000770:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000774:	f7ff ffe0 	bl	8000738 <__aeabi_cfcmpeq>
 8000778:	bf94      	ite	ls
 800077a:	2001      	movls	r0, #1
 800077c:	2000      	movhi	r0, #0
 800077e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000782:	bf00      	nop

08000784 <__aeabi_fcmpge>:
 8000784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000788:	f7ff ffd2 	bl	8000730 <__aeabi_cfrcmple>
 800078c:	bf94      	ite	ls
 800078e:	2001      	movls	r0, #1
 8000790:	2000      	movhi	r0, #0
 8000792:	f85d fb08 	ldr.w	pc, [sp], #8
 8000796:	bf00      	nop

08000798 <__aeabi_fcmpgt>:
 8000798:	f84d ed08 	str.w	lr, [sp, #-8]!
 800079c:	f7ff ffc8 	bl	8000730 <__aeabi_cfrcmple>
 80007a0:	bf34      	ite	cc
 80007a2:	2001      	movcc	r0, #1
 80007a4:	2000      	movcs	r0, #0
 80007a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007aa:	bf00      	nop

080007ac <__aeabi_f2uiz>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	d20e      	bcs.n	80007ce <__aeabi_f2uiz+0x22>
 80007b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80007b4:	d30b      	bcc.n	80007ce <__aeabi_f2uiz+0x22>
 80007b6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80007ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007be:	d409      	bmi.n	80007d4 <__aeabi_f2uiz+0x28>
 80007c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c8:	fa23 f002 	lsr.w	r0, r3, r2
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr
 80007d4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007d8:	d101      	bne.n	80007de <__aeabi_f2uiz+0x32>
 80007da:	0242      	lsls	r2, r0, #9
 80007dc:	d102      	bne.n	80007e4 <__aeabi_f2uiz+0x38>
 80007de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <A4988_init>:

	return  fabs(steps);
}

void A4988_init(A4988_config_t *A4988_config)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	A4988_config_x = A4988_config;
	// Set address of each timer in TIM_handles array
	A4988_TIM_Init();
 80007f4:	f000 f8b6 	bl	8000964 <A4988_TIM_Init>
	A4988_GPIO_Config(A4988_config);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f83d 	bl	8000878 <A4988_GPIO_Config>
	A4988_TIM_Config(A4988_config);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f87b 	bl	80008fa <A4988_TIM_Config>

    for (int i = 0; i < MAX_TIMERS; i++)
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e00e      	b.n	8000828 <A4988_init+0x3c>
    {
        if (device_table[i] == NULL)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <A4988_init+0x74>)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d105      	bne.n	8000822 <A4988_init+0x36>
        {
            device_table[i] = A4988_config; // register motor
 8000816:	4912      	ldr	r1, [pc, #72]	@ (8000860 <A4988_init+0x74>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 8000820:	e005      	b.n	800082e <A4988_init+0x42>
    for (int i = 0; i < MAX_TIMERS; i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b03      	cmp	r3, #3
 800082c:	dded      	ble.n	800080a <A4988_init+0x1e>
        }
    }

    A4988_config->counter = 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    A4988_config->f_current = 50.0f;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0b      	ldr	r2, [pc, #44]	@ (8000864 <A4988_init+0x78>)
 8000838:	621a      	str	r2, [r3, #32]
    A4988_config->T = clk_period * ARR_VAL;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <A4988_init+0x7c>)
 800083c:	490b      	ldr	r1, [pc, #44]	@ (800086c <A4988_init+0x80>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fdee 	bl	8000420 <__aeabi_fmul>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
    A4988_config->f_target = 1000.0f;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <A4988_init+0x84>)
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
    A4988_config->accel = 30.0f;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <A4988_init+0x88>)
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000001c 	.word	0x2000001c
 8000864:	42480000 	.word	0x42480000
 8000868:	35a7c5ac 	.word	0x35a7c5ac
 800086c:	45fa0000 	.word	0x45fa0000
 8000870:	447a0000 	.word	0x447a0000
 8000874:	41f00000 	.word	0x41f00000

08000878 <A4988_GPIO_Config>:

static void A4988_GPIO_Config(A4988_config_t *A4988_config)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	GPIO_Handle_t dir,step;
	memset(&dir, 0, sizeof(dir));
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	220c      	movs	r2, #12
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f000 ff46 	bl	800171a <memset>
	memset(&step, 0, sizeof(step));
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	220c      	movs	r2, #12
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f000 ff3f 	bl	800171a <memset>

	// Set up Step Port
	step.pGPIOx = A4988_config->step_port;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60bb      	str	r3, [r7, #8]
	step.GPIO_PinConfig.GPIO_PinNumber = A4988_config->step_pin;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	733b      	strb	r3, [r7, #12]
	step.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 80008a8:	2302      	movs	r3, #2
 80008aa:	737b      	strb	r3, [r7, #13]
	step.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008ac:	2302      	movs	r3, #2
 80008ae:	73bb      	strb	r3, [r7, #14]
	step.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
	step.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;			  // PP for normal usage
 80008b4:	2300      	movs	r3, #0
 80008b6:	743b      	strb	r3, [r7, #16]
	step.GPIO_PinConfig.GPIO_PinAltFunMode = A4988_config->step_alt_mode; // No Alternate Funciton is used
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	747b      	strb	r3, [r7, #17]
	GPIO_Init(&step);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f9f4 	bl	8000cb0 <GPIO_Init>

	// Set up dir Port
	dir.pGPIOx = A4988_config->dir_port;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	617b      	str	r3, [r7, #20]
	dir.GPIO_PinConfig.GPIO_PinNumber = A4988_config->dir_pin;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7d1b      	ldrb	r3, [r3, #20]
 80008d2:	763b      	strb	r3, [r7, #24]
	dir.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80008d4:	2301      	movs	r3, #1
 80008d6:	767b      	strb	r3, [r7, #25]
	dir.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008d8:	2302      	movs	r3, #2
 80008da:	76bb      	strb	r3, [r7, #26]
	dir.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 80008dc:	2300      	movs	r3, #0
 80008de:	76fb      	strb	r3, [r7, #27]
	dir.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP;			// PP for normal usage
 80008e0:	2300      	movs	r3, #0
 80008e2:	773b      	strb	r3, [r7, #28]
	dir.GPIO_PinConfig.GPIO_PinAltFunMode = 0; // No Alternate Funciton is used
 80008e4:	2300      	movs	r3, #0
 80008e6:	777b      	strb	r3, [r7, #29]
	GPIO_Init(&dir);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9df 	bl	8000cb0 <GPIO_Init>
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <A4988_TIM_Config>:

static void A4988_TIM_Config(A4988_config_t *A4988_config)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b088      	sub	sp, #32
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]

	TIM_Handle_t PWMx;
	memset(&PWMx, 0, sizeof(PWMx));
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2214      	movs	r2, #20
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff05 	bl	800171a <memset>

	PWMx.pTIMx = A4988_config->step_timer_port;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	60fb      	str	r3, [r7, #12]
	PWMx.TIMx_PinConfig.TIM_Prescaler = 20;
 8000916:	2314      	movs	r3, #20
 8000918:	613b      	str	r3, [r7, #16]
	PWMx.TIMx_PinConfig.TIM_CountDir = UPWARDS;
 800091a:	2301      	movs	r3, #1
 800091c:	773b      	strb	r3, [r7, #28]
	PWMx.TIMx_PinConfig.TIM_Channel = A4988_config->step_channel;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7b1b      	ldrb	r3, [r3, #12]
 8000922:	777b      	strb	r3, [r7, #29]
	PWMx.TIMx_PinConfig.TIM_Mode = TIMx_MODE_COMPARE;
 8000924:	2300      	movs	r3, #0
 8000926:	77bb      	strb	r3, [r7, #30]
	PWMx.TIMx_PinConfig.TIM_CMP_Mode = TIMx_COMPARE_MODE_PWM1;
 8000928:	2306      	movs	r3, #6
 800092a:	77fb      	strb	r3, [r7, #31]
	PWMx.TIMx_PinConfig.TIM_ARR = ARR_VAL;	   // 1 Period = 1/4MHz = 0.25 microSecs -> 1000 * 0.25 microSecs = 250 microSecs
 800092c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000930:	617b      	str	r3, [r7, #20]
	PWMx.TIMx_PinConfig.TIM_CCR = ARR_VAL / 2; // Duty Cycle 50%
 8000932:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000936:	61bb      	str	r3, [r7, #24]

	TIM_Init(&PWMx);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc51 	bl	80011e4 <TIM_Init>
	TIM_InterruptEnable(&PWMx, ENABLE);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2101      	movs	r1, #1
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fd9d 	bl	8001488 <TIM_InterruptEnable>
	TIM_IRQInterruptConfig(A4988_config->step_IRQ_number, ENABLE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7b5b      	ldrb	r3, [r3, #13]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fdb7 	bl	80014c8 <TIM_IRQInterruptConfig>
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <A4988_TIM_Init>:

static void A4988_TIM_Init(A4988_config_t *A4988_config)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	memset(&TIM_handles[0], 0, sizeof(TIM_Handle_t));
 800096c:	2214      	movs	r2, #20
 800096e:	2100      	movs	r1, #0
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <A4988_TIM_Init+0x54>)
 8000972:	f000 fed2 	bl	800171a <memset>
	TIM_handles[0].pTIMx = pTIM2;
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <A4988_TIM_Init+0x54>)
 8000978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097c:	601a      	str	r2, [r3, #0]

	memset(&TIM_handles[1], 0, sizeof(TIM_Handle_t));
 800097e:	2214      	movs	r2, #20
 8000980:	2100      	movs	r1, #0
 8000982:	480e      	ldr	r0, [pc, #56]	@ (80009bc <A4988_TIM_Init+0x58>)
 8000984:	f000 fec9 	bl	800171a <memset>
	TIM_handles[1].pTIMx = pTIM3;
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <A4988_TIM_Init+0x54>)
 800098a:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <A4988_TIM_Init+0x5c>)
 800098c:	615a      	str	r2, [r3, #20]

	memset(&TIM_handles[2], 0, sizeof(TIM_Handle_t));
 800098e:	2214      	movs	r2, #20
 8000990:	2100      	movs	r1, #0
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <A4988_TIM_Init+0x60>)
 8000994:	f000 fec1 	bl	800171a <memset>
	TIM_handles[2].pTIMx = pTIM4;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <A4988_TIM_Init+0x54>)
 800099a:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <A4988_TIM_Init+0x64>)
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28

	memset(&TIM_handles[3], 0, sizeof(TIM_Handle_t));
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	480a      	ldr	r0, [pc, #40]	@ (80009cc <A4988_TIM_Init+0x68>)
 80009a4:	f000 feb9 	bl	800171a <memset>
	TIM_handles[3].pTIMx = pTIM5;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <A4988_TIM_Init+0x54>)
 80009aa:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <A4988_TIM_Init+0x6c>)
 80009ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	20000040 	.word	0x20000040
 80009c0:	40000400 	.word	0x40000400
 80009c4:	20000054 	.word	0x20000054
 80009c8:	40000800 	.word	0x40000800
 80009cc:	20000068 	.word	0x20000068
 80009d0:	40000c00 	.word	0x40000c00

080009d4 <A4988_move_Step>:

//void A4988_move_Step(uint32_t steps, uint32_t dir, TIM_Handle_t pTIMHandle)
void A4988_move_Step(uint32_t steps, uint32_t dir, A4988_config_t *A4988_config_x)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]


	A4988_config_x->counter = 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
	A4988_config_x->steps_target = steps;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	61da      	str	r2, [r3, #28]
	A4988_config_x->f_current = 50.0f;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a29      	ldr	r2, [pc, #164]	@ (8000a94 <A4988_move_Step+0xc0>)
 80009f0:	621a      	str	r2, [r3, #32]
	A4988_config_x->T = clk_period * ARR_VAL;
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <A4988_move_Step+0xc4>)
 80009f4:	4929      	ldr	r1, [pc, #164]	@ (8000a9c <A4988_move_Step+0xc8>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd12 	bl	8000420 <__aeabi_fmul>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Set the rotation direction
	GPIO_WriteToOutputPin(A4988_config_x->dir_port, A4988_config_x->dir_pin, dir);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6918      	ldr	r0, [r3, #16]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7d1b      	ldrb	r3, [r3, #20]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	f000 fbc3 	bl	800119c <GPIO_WriteToOutputPin>

	// Reset the counter
	A4988_config_x->step_timer_port->CR1 &= ~(1 << TIM_CR1_CEN_POS); //
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

	A4988_config_x->step_timer_port->CR1 |= (1 << TIM_CR1_ARPE_POS);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a34:	601a      	str	r2, [r3, #0]
	A4988_config_x->step_timer_port->CCMR1 |= (1 << TIM_CCMR1_OC1PE_POS);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	699a      	ldr	r2, [r3, #24]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f042 0208 	orr.w	r2, r2, #8
 8000a44:	619a      	str	r2, [r3, #24]

	A4988_config_x->step_timer_port->ARR = ARR_VAL - 1;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	A4988_config_x->step_timer_port->CCR1 = (ARR_VAL - 1) / 2;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34

	A4988_config_x->step_timer_port->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	695a      	ldr	r2, [r3, #20]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f042 0201 	orr.w	r2, r2, #1
 8000a68:	615a      	str	r2, [r3, #20]
	A4988_config_x->step_timer_port->SR &= ~(1 << TIM_SR_UIF_POS);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	611a      	str	r2, [r3, #16]
	// Enable Counter
	A4988_config_x->step_timer_port->CR1 |= (1 << TIM_CR1_CEN_POS);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]

}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	42480000 	.word	0x42480000
 8000a98:	35a7c5ac 	.word	0x35a7c5ac
 8000a9c:	45fa0000 	.word	0x45fa0000

08000aa0 <TIM2_IRQHandler>:
{
	A4988_move_Step(degreeToSteps(degree,microStepMode),dir, A4988_config_x);
}

void TIM2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[0]);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM2_IRQHandler+0x10>)
 8000aa6:	f000 fd93 	bl	80015d0 <TIMx_EV_IRQHandling>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[1]);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <TIM3_IRQHandler+0x10>)
 8000aba:	f000 fd89 	bl	80015d0 <TIMx_EV_IRQHandling>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000040 	.word	0x20000040

08000ac8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[2]);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM4_IRQHandler+0x10>)
 8000ace:	f000 fd7f 	bl	80015d0 <TIMx_EV_IRQHandling>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000054 	.word	0x20000054

08000adc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

	TIMx_EV_IRQHandling(&TIM_handles[3]);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM5_IRQHandler+0x10>)
 8000ae2:	f000 fd75 	bl	80015d0 <TIMx_EV_IRQHandling>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000068 	.word	0x20000068

08000af0 <findDevice>:

A4988_config_t* findDevice(TIM_Handle_t *pTIMHandle)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_TIMERS; i++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e016      	b.n	8000b2c <findDevice+0x3c>
    {
    	if(device_table[i] != NULL){
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <findDevice+0x50>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00d      	beq.n	8000b26 <findDevice+0x36>

			if (device_table[i]->step_timer_port == pTIMHandle->pTIMx)
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <findDevice+0x50>)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d104      	bne.n	8000b26 <findDevice+0x36>
				return device_table[i]; // found corresponding motor
 8000b1c:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <findDevice+0x50>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	e006      	b.n	8000b34 <findDevice+0x44>
    for (int i = 0; i < MAX_TIMERS; i++)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	dde5      	ble.n	8000afe <findDevice+0xe>
    	}
    }
    return NULL; // not found
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <TIM_ApplicationEventCallback>:
void TIM_ApplicationEventCallback(TIM_Handle_t *pTIMHandle, uint8_t AppEv)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	if (AppEv == TIMx_EV_UIF)
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 80a2 	bne.w	8000c9c <TIM_ApplicationEventCallback+0x158>
	{

		A4988_config_t *device = findDevice(pTIMHandle);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffc9 	bl	8000af0 <findDevice>
 8000b5e:	60f8      	str	r0, [r7, #12]
		device->counter++;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	619a      	str	r2, [r3, #24]
		// --- Acceleration ramp ---
		if (device->f_current < device->f_target)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6a1a      	ldr	r2, [r3, #32]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f7ff fdf1 	bl	800075c <__aeabi_fcmplt>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d022      	beq.n	8000bc6 <TIM_ApplicationEventCallback+0x82>
		{
			device->f_current += device->accel * device->T; // f = f + a*dt
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f7ff fc48 	bl	8000420 <__aeabi_fmul>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f7ff fb38 	bl	8000210 <__addsf3>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	621a      	str	r2, [r3, #32]
			if (device->f_current > device->f_target)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f7ff fdf0 	bl	8000798 <__aeabi_fcmpgt>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <TIM_ApplicationEventCallback+0x82>
				device->f_current = device->f_target;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	621a      	str	r2, [r3, #32]
		}

		// Compute new period
		device->T = 1.0f / device->f_current;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000bd0:	f7ff fcda 	bl	8000588 <__aeabi_fdiv>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	62da      	str	r2, [r3, #44]	@ 0x2c
		uint32_t arr = (uint32_t)(device->T / clk_period + 0.5f);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be0:	4a30      	ldr	r2, [pc, #192]	@ (8000ca4 <TIM_ApplicationEventCallback+0x160>)
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fccf 	bl	8000588 <__aeabi_fdiv>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fb0d 	bl	8000210 <__addsf3>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fdd7 	bl	80007ac <__aeabi_f2uiz>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60bb      	str	r3, [r7, #8]

		// Update timer safely
		pTIMHandle->pTIMx->ARR = arr;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	62da      	str	r2, [r3, #44]	@ 0x2c
		pTIMHandle->pTIMx->CCR1 = arr / 2;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	0852      	lsrs	r2, r2, #1
 8000c12:	635a      	str	r2, [r3, #52]	@ 0x34
		pTIMHandle->pTIMx->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	615a      	str	r2, [r3, #20]
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 0201 	bic.w	r2, r2, #1
 8000c32:	611a      	str	r2, [r3, #16]

		if (device->counter >= device->steps_target)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d32d      	bcc.n	8000c9c <TIM_ApplicationEventCallback+0x158>
		{

			pTIMHandle->pTIMx->CR1 &= ~(1 << TIM_CR1_CEN_POS); // Stop timer
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
			device->f_current = 50.0f;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <TIM_ApplicationEventCallback+0x164>)
 8000c54:	621a      	str	r2, [r3, #32]
			device->T = clk_period * ARR_VAL; // First period  should be 5000 microsecs
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <TIM_ApplicationEventCallback+0x160>)
 8000c58:	4914      	ldr	r1, [pc, #80]	@ (8000cac <TIM_ApplicationEventCallback+0x168>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbe0 	bl	8000420 <__aeabi_fmul>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	62da      	str	r2, [r3, #44]	@ 0x2c
			pTIMHandle->pTIMx->ARR = ARR_VAL - 1;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c70:	62da      	str	r2, [r3, #44]	@ 0x2c
			pTIMHandle->pTIMx->CCR1 = (ARR_VAL - 1) / 2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000c7a:	635a      	str	r2, [r3, #52]	@ 0x34
			pTIMHandle->pTIMx->EGR |= (1 << TIM_EGR_UG_POS); // Generate Event by itself
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	615a      	str	r2, [r3, #20]
			pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	691a      	ldr	r2, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0201 	bic.w	r2, r2, #1
 8000c9a:	611a      	str	r2, [r3, #16]
		}
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	35a7c5ac 	.word	0x35a7c5ac
 8000ca8:	42480000 	.word	0x42480000
 8000cac:	45fa0000 	.word	0x45fa0000

08000cb0 <GPIO_Init>:
 *  Created on: Mar 17, 2025
 *      Author: bright
 */
#include "stm32f446xx_GPIO_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f99c 	bl	8000ffc <GPIO_PeriClockControl>

	/*Non-Interrupt Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	795b      	ldrb	r3, [r3, #5]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d81f      	bhi.n	8000d0c <GPIO_Init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2103      	movs	r1, #3
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	795b      	ldrb	r3, [r3, #5]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	791b      	ldrb	r3, [r3, #4]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4619      	mov	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e0b0      	b.n	8000e6e <GPIO_Init+0x1be>

	}
	/*Interrupt Mode*/
	else{

		uint8_t index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	73fb      	strb	r3, [r7, #15]

		uint8_t Port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a99      	ldr	r2, [pc, #612]	@ (8000f80 <GPIO_Init+0x2d0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d032      	beq.n	8000d84 <GPIO_Init+0xd4>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a98      	ldr	r2, [pc, #608]	@ (8000f84 <GPIO_Init+0x2d4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d02b      	beq.n	8000d80 <GPIO_Init+0xd0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a96      	ldr	r2, [pc, #600]	@ (8000f88 <GPIO_Init+0x2d8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d024      	beq.n	8000d7c <GPIO_Init+0xcc>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a95      	ldr	r2, [pc, #596]	@ (8000f8c <GPIO_Init+0x2dc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d01d      	beq.n	8000d78 <GPIO_Init+0xc8>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a93      	ldr	r2, [pc, #588]	@ (8000f90 <GPIO_Init+0x2e0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d016      	beq.n	8000d74 <GPIO_Init+0xc4>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a92      	ldr	r2, [pc, #584]	@ (8000f94 <GPIO_Init+0x2e4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00f      	beq.n	8000d70 <GPIO_Init+0xc0>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a90      	ldr	r2, [pc, #576]	@ (8000f98 <GPIO_Init+0x2e8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d008      	beq.n	8000d6c <GPIO_Init+0xbc>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a8f      	ldr	r2, [pc, #572]	@ (8000f9c <GPIO_Init+0x2ec>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <GPIO_Init+0xb8>
 8000d64:	2307      	movs	r3, #7
 8000d66:	e00e      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e00c      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	e00a      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d70:	2305      	movs	r3, #5
 8000d72:	e008      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d74:	2304      	movs	r3, #4
 8000d76:	e006      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e004      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <GPIO_Init+0xd6>
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	795b      	ldrb	r3, [r3, #5]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d117      	bne.n	8000dc0 <GPIO_Init+0x110>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d90:	4b83      	ldr	r3, [pc, #524]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	7912      	ldrb	r2, [r2, #4]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	408a      	lsls	r2, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a7f      	ldr	r2, [pc, #508]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000da2:	430b      	orrs	r3, r1
 8000da4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000da6:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	7912      	ldrb	r2, [r2, #4]
 8000dae:	4611      	mov	r1, r2
 8000db0:	2201      	movs	r2, #1
 8000db2:	408a      	lsls	r2, r1
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a79      	ldr	r2, [pc, #484]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	6093      	str	r3, [r2, #8]
 8000dbe:	e031      	b.n	8000e24 <GPIO_Init+0x174>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d117      	bne.n	8000df8 <GPIO_Init+0x148>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dc8:	4b75      	ldr	r3, [pc, #468]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	7912      	ldrb	r2, [r2, #4]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	408a      	lsls	r2, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4a71      	ldr	r2, [pc, #452]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dde:	4b70      	ldr	r3, [pc, #448]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	7912      	ldrb	r2, [r2, #4]
 8000de6:	4611      	mov	r1, r2
 8000de8:	2201      	movs	r2, #1
 8000dea:	408a      	lsls	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	4611      	mov	r1, r2
 8000df0:	4a6b      	ldr	r2, [pc, #428]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000df2:	400b      	ands	r3, r1
 8000df4:	60d3      	str	r3, [r2, #12]
 8000df6:	e015      	b.n	8000e24 <GPIO_Init+0x174>
		}
		else{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000df8:	4b69      	ldr	r3, [pc, #420]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	7912      	ldrb	r2, [r2, #4]
 8000e00:	4611      	mov	r1, r2
 8000e02:	2201      	movs	r2, #1
 8000e04:	408a      	lsls	r2, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	4a65      	ldr	r2, [pc, #404]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e0e:	4b64      	ldr	r3, [pc, #400]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	7912      	ldrb	r2, [r2, #4]
 8000e16:	4611      	mov	r1, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	408a      	lsls	r2, r1
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4a60      	ldr	r2, [pc, #384]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000e20:	430b      	orrs	r3, r1
 8000e22:	60d3      	str	r3, [r2, #12]

		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 8000e24:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <GPIO_Init+0x2f4>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa4 <GPIO_Init+0x2f4>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[index] |= (Port << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4));
 8000e30:	4a5d      	ldr	r2, [pc, #372]	@ (8000fa8 <GPIO_Init+0x2f8>)
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	3302      	adds	r3, #2
 8000e36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e3a:	7bb9      	ldrb	r1, [r7, #14]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	4956      	ldr	r1, [pc, #344]	@ (8000fa8 <GPIO_Init+0x2f8>)
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4302      	orrs	r2, r0
 8000e52:	3302      	adds	r3, #2
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000e58:	4b51      	ldr	r3, [pc, #324]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	7912      	ldrb	r2, [r2, #4]
 8000e60:	4611      	mov	r1, r2
 8000e62:	2201      	movs	r2, #1
 8000e64:	408a      	lsls	r2, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <GPIO_Init+0x2f0>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]


	}

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	400a      	ands	r2, r1
 8000e88:	609a      	str	r2, [r3, #8]
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]


	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	79db      	ldrb	r3, [r3, #7]
 8000ed0:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	400a      	ands	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7a1b      	ldrb	r3, [r3, #8]
 8000f0c:	4619      	mov	r1, r3
					   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	791b      	ldrb	r3, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	4619      	mov	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]

	/*Alternate Function Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	795b      	ldrb	r3, [r3, #5]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d164      	bne.n	8000ff2 <GPIO_Init+0x342>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7 && pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 16 ){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d93d      	bls.n	8000fac <GPIO_Init+0x2fc>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	791b      	ldrb	r3, [r3, #4]
 8000f34:	2b10      	cmp	r3, #16
 8000f36:	d939      	bls.n	8000fac <GPIO_Init+0x2fc>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	210f      	movs	r1, #15
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	400a      	ands	r2, r1
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7a5b      	ldrb	r3, [r3, #9]
 8000f64:	4619      	mov	r1, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24

		}
	}


}
 8000f7e:	e038      	b.n	8000ff2 <GPIO_Init+0x342>
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40013c00 	.word	0x40013c00
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	400a      	ands	r2, r1
 8000fcc:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7a5b      	ldrb	r3, [r3, #9]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	621a      	str	r2, [r3, #32]
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop

08000ffc <GPIO_PeriClockControl>:


}

/*Enable Clock of the given GPIO*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
//	assert(pGPIOx == NULL);
	if(ENorDI == ENABLE){
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d157      	bne.n	80010be <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == pGPIOA){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a59      	ldr	r2, [pc, #356]	@ (8001178 <GPIO_PeriClockControl+0x17c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8001016:	4b59      	ldr	r3, [pc, #356]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a58      	ldr	r2, [pc, #352]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == pGPIOH){

					GPIOH_PCLK_DI();
				}
	}
}
 8001022:	e0a3      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOB){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a56      	ldr	r2, [pc, #344]	@ (8001180 <GPIO_PeriClockControl+0x184>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d106      	bne.n	800103a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	4a52      	ldr	r2, [pc, #328]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001038:	e098      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOC){
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	@ (8001184 <GPIO_PeriClockControl+0x188>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d106      	bne.n	8001050 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001042:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a4d      	ldr	r2, [pc, #308]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800104e:	e08d      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOD){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4d      	ldr	r2, [pc, #308]	@ (8001188 <GPIO_PeriClockControl+0x18c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d106      	bne.n	8001066 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a47      	ldr	r2, [pc, #284]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001064:	e082      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOE){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	@ (800118c <GPIO_PeriClockControl+0x190>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800106e:	4b43      	ldr	r3, [pc, #268]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a42      	ldr	r2, [pc, #264]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800107a:	e077      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOF){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <GPIO_PeriClockControl+0x194>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d106      	bne.n	8001092 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001084:	4b3d      	ldr	r3, [pc, #244]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a3c      	ldr	r2, [pc, #240]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001090:	e06c      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOG){
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a3f      	ldr	r2, [pc, #252]	@ (8001194 <GPIO_PeriClockControl+0x198>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d106      	bne.n	80010a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a37      	ldr	r2, [pc, #220]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010a6:	e061      	b.n	800116c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOH){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001198 <GPIO_PeriClockControl+0x19c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d15d      	bne.n	800116c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80010b0:	4b32      	ldr	r3, [pc, #200]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	4a31      	ldr	r2, [pc, #196]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010bc:	e056      	b.n	800116c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == pGPIOA){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001178 <GPIO_PeriClockControl+0x17c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80010c6:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a2c      	ldr	r2, [pc, #176]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010d2:	e04b      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOB){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001180 <GPIO_PeriClockControl+0x184>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d106      	bne.n	80010ea <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a26      	ldr	r2, [pc, #152]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010e2:	f023 0302 	bic.w	r3, r3, #2
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010e8:	e040      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOC){
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <GPIO_PeriClockControl+0x188>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d106      	bne.n	8001100 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80010f2:	4b22      	ldr	r3, [pc, #136]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a21      	ldr	r2, [pc, #132]	@ (800117c <GPIO_PeriClockControl+0x180>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010fe:	e035      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOD){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <GPIO_PeriClockControl+0x18c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d106      	bne.n	8001116 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8001108:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800110e:	f023 0308 	bic.w	r3, r3, #8
 8001112:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001114:	e02a      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOE){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <GPIO_PeriClockControl+0x190>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d106      	bne.n	800112c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a16      	ldr	r2, [pc, #88]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001124:	f023 0310 	bic.w	r3, r3, #16
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800112a:	e01f      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOF){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a18      	ldr	r2, [pc, #96]	@ (8001190 <GPIO_PeriClockControl+0x194>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d106      	bne.n	8001142 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	4a10      	ldr	r2, [pc, #64]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800113a:	f023 0320 	bic.w	r3, r3, #32
 800113e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001140:	e014      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOG){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <GPIO_PeriClockControl+0x198>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d106      	bne.n	8001158 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <GPIO_PeriClockControl+0x180>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001156:	e009      	b.n	800116c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOH){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <GPIO_PeriClockControl+0x19c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d105      	bne.n	800116c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	4a05      	ldr	r2, [pc, #20]	@ (800117c <GPIO_PeriClockControl+0x180>)
 8001166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800116a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40020000 	.word	0x40020000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00

0800119c <GPIO_WriteToOutputPin>:
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){
	uint16_t read_data;
	read_data = (uint16_t)(pGPIOx->IDR);
	return read_data;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET){
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d109      	bne.n	80011c6 <GPIO_WriteToOutputPin+0x2a>

		pGPIOx->ODR |= (1 << PinNumber);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80011c4:	e009      	b.n	80011da <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	43d2      	mvns	r2, r2
 80011d4:	401a      	ands	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	615a      	str	r2, [r3, #20]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <TIM_Init>:
 */
#include "stm32f446xx_Timer_driver.h"


void static TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle);
void TIM_Init(TIM_Handle_t *pTIMHandle){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

	TIM_PeriClockControl(pTIMHandle->pTIMx,ENABLE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f83a 	bl	800126c <TIM_PeriClockControl>
	// Set Prescaler - HSI SysCLK is 16 MHZ
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIMx_PinConfig.TIM_Prescaler - 1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3a01      	subs	r2, #1
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
	// Set ARR corresponded to the given period
	// ARR = Given Periode * (SysCLK/Prescaler)
	pTIMHandle->pTIMx->ARR = (pTIMHandle->TIMx_PinConfig.TIM_ARR) - 1 ;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3a01      	subs	r2, #1
 800120e:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable Capture/Compare Mode
	pTIMHandle->pTIMx->CCER  |= (1 << 4 * (pTIMHandle->TIMx_PinConfig.TIM_Channel-1));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7c5b      	ldrb	r3, [r3, #17]
 800121a:	3b01      	subs	r3, #1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4619      	mov	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	621a      	str	r2, [r3, #32]
	// Set Dir default is countup
	pTIMHandle->pTIMx->CR1  &= ~(1 << TIM_CR1_DIR_POS);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0210 	bic.w	r2, r2, #16
 800123c:	601a      	str	r2, [r3, #0]
	if(pTIMHandle->TIMx_PinConfig.TIM_CountDir== TIMx_CR1_DIR_UPWARDS){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7c1b      	ldrb	r3, [r3, #16]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <TIM_Init+0x72>
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_DIR_POS);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0210 	orr.w	r2, r2, #16
 8001254:	601a      	str	r2, [r3, #0]
	}

	if(pTIMHandle->TIMx_PinConfig.TIM_Mode == TIMx_MODE_COMPARE){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7c9b      	ldrb	r3, [r3, #18]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <TIM_Init+0x80>
		//Set Compare mode
		TIM_SetCompareModeChannel(pTIMHandle);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f872 	bl	8001348 <TIM_SetCompareModeChannel>
	}else{
		//Set Capture mode
	}


}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <TIM_PeriClockControl>:

/*Enable Clock of the given Timer*/
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t ENorDI){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]

	if(ENorDI == ENABLE){
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d12b      	bne.n	80012d6 <TIM_PeriClockControl+0x6a>

		if(pTIMx == pTIM2){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001284:	d106      	bne.n	8001294 <TIM_PeriClockControl+0x28>
			TIM2_PCLK_EN();
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pTIMx == pTIM5){
			TIM5_PCLK_DI();
		}

	}
}
 8001292:	e04b      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a29      	ldr	r2, [pc, #164]	@ (800133c <TIM_PeriClockControl+0xd0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d106      	bne.n	80012aa <TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a25      	ldr	r2, [pc, #148]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012a8:	e040      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a24      	ldr	r2, [pc, #144]	@ (8001340 <TIM_PeriClockControl+0xd4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d106      	bne.n	80012c0 <TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a20      	ldr	r2, [pc, #128]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012be:	e035      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a20      	ldr	r2, [pc, #128]	@ (8001344 <TIM_PeriClockControl+0xd8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d131      	bne.n	800132c <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012d4:	e02a      	b.n	800132c <TIM_PeriClockControl+0xc0>
		if(pTIMx == pTIM2){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012dc:	d106      	bne.n	80012ec <TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a15      	ldr	r2, [pc, #84]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012e4:	f063 0301 	orn	r3, r3, #1
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012ea:	e01f      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <TIM_PeriClockControl+0xd0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d106      	bne.n	8001302 <TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 80012fa:	f063 0302 	orn	r3, r3, #2
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001300:	e014      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <TIM_PeriClockControl+0xd4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d106      	bne.n	8001318 <TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 8001310:	f063 0304 	orn	r3, r3, #4
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001316:	e009      	b.n	800132c <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <TIM_PeriClockControl+0xd8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d105      	bne.n	800132c <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <TIM_PeriClockControl+0xcc>)
 8001326:	f063 0308 	orn	r3, r3, #8
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40000400 	.word	0x40000400
 8001340:	40000800 	.word	0x40000800
 8001344:	40000c00 	.word	0x40000c00

08001348 <TIM_SetCompareModeChannel>:

/*Enable Clock of the given Timer*/
void TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

		if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH1){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7c5b      	ldrb	r3, [r3, #17]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11f      	bne.n	8001398 <TIM_SetCompareModeChannel+0x50>
			// CCR1 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68d2      	ldr	r2, [r2, #12]
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34
			//Clear TIM_CCMR1_OC1M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC1M_POS);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001370:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC1M_POS);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6999      	ldr	r1, [r3, #24]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7cdb      	ldrb	r3, [r3, #19]
 800137c:	011a      	lsls	r2, r3, #4
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	619a      	str	r2, [r3, #24]
			//Pre-load Buffer Enable
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC1PE_POS);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0208 	orr.w	r2, r2, #8
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e06a      	b.n	800146e <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH2){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7c5b      	ldrb	r3, [r3, #17]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d11f      	bne.n	80013e0 <TIM_SetCompareModeChannel+0x98>
			// CCR2 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68d2      	ldr	r2, [r2, #12]
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38
			//Clear TIM_CCMR1_OC2M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC2M_POS);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80013b8:	619a      	str	r2, [r3, #24]
			//Set TIM_CCMR1_OC2M_POS MODE
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC2M_POS);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6999      	ldr	r1, [r3, #24]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7cdb      	ldrb	r3, [r3, #19]
 80013c4:	031a      	lsls	r2, r3, #12
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC2PE_POS);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	e046      	b.n	800146e <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH3){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7c5b      	ldrb	r3, [r3, #17]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d11f      	bne.n	8001428 <TIM_SetCompareModeChannel+0xe0>
			// CCR3 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68d2      	ldr	r2, [r2, #12]
 80013f0:	63da      	str	r2, [r3, #60]	@ 0x3c
			//Clear TIM_CCMR2_OC3M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC3M_POS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001400:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC3M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC3M_POS);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69d9      	ldr	r1, [r3, #28]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7cdb      	ldrb	r3, [r3, #19]
 800140c:	011a      	lsls	r2, r3, #4
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC3PE_POS);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0208 	orr.w	r2, r2, #8
 8001424:	61da      	str	r2, [r3, #28]
 8001426:	e022      	b.n	800146e <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH4){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7c5b      	ldrb	r3, [r3, #17]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d11e      	bne.n	800146e <TIM_SetCompareModeChannel+0x126>
			// CCR4 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68d2      	ldr	r2, [r2, #12]
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
			//Clear TIM_CCMR2_OC4M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC4M_POS);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69da      	ldr	r2, [r3, #28]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8001448:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC4M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC4M_POS);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69d9      	ldr	r1, [r3, #28]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7cdb      	ldrb	r3, [r3, #19]
 8001454:	031a      	lsls	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC4PE_POS);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800146c:	61da      	str	r2, [r3, #28]

		}
		//Auto reload pre-load Enable
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_ARPE_POS);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800147c:	601a      	str	r2, [r3, #0]

		//Enable Counter
//		 pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);


}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <TIM_InterruptEnable>:
/******************************IRQ Enable*******************************/
void TIM_InterruptEnable(TIM_Handle_t *pTIMHandle,uint8_t ENorDI){
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	//Enable Interrupt Mode

	if(ENorDI == ENABLE){
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <TIM_InterruptEnable+0x24>

		pTIMHandle->pTIMx->DIER  |= (1 << TIM_DIER_UIE_POS);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0201 	orr.w	r2, r2, #1
 80014a8:	60da      	str	r2, [r3, #12]
	}
	else{
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
	}

}
 80014aa:	e007      	b.n	80014bc <TIM_InterruptEnable+0x34>
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <TIM_IRQInterruptConfig>:

/******************************IRQ Configuration*******************************/
void TIM_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	/*Configure IRQ number of TIM
	 *ISER Interrupt Set-enable Register
	 * */

	if(ENorDI == ENABLE){
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d133      	bne.n	8001546 <TIM_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b1f      	cmp	r3, #31
 80014e2:	d80a      	bhi.n	80014fa <TIM_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 80014e4:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <TIM_IRQInterruptConfig+0xf0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4a31      	ldr	r2, [pc, #196]	@ (80015b8 <TIM_IRQInterruptConfig+0xf0>)
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 64 && IRQNumber <96){
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 80014f8:	e059      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b1f      	cmp	r3, #31
 80014fe:	d90f      	bls.n	8001520 <TIM_IRQInterruptConfig+0x58>
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b3f      	cmp	r3, #63	@ 0x3f
 8001504:	d80c      	bhi.n	8001520 <TIM_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001506:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <TIM_IRQInterruptConfig+0xf4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	f002 021f 	and.w	r2, r2, #31
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	4611      	mov	r1, r2
 8001518:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <TIM_IRQInterruptConfig+0xf4>)
 800151a:	430b      	orrs	r3, r1
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e046      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b3f      	cmp	r3, #63	@ 0x3f
 8001524:	d943      	bls.n	80015ae <TIM_IRQInterruptConfig+0xe6>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b5f      	cmp	r3, #95	@ 0x5f
 800152a:	d840      	bhi.n	80015ae <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <TIM_IRQInterruptConfig+0xf8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	4611      	mov	r1, r2
 800153e:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <TIM_IRQInterruptConfig+0xf8>)
 8001540:	430b      	orrs	r3, r1
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	e033      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b1f      	cmp	r3, #31
 800154a:	d80a      	bhi.n	8001562 <TIM_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= (1 << IRQNumber);
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <TIM_IRQInterruptConfig+0xfc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <TIM_IRQInterruptConfig+0xfc>)
 800155c:	430b      	orrs	r3, r1
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	e025      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b1f      	cmp	r3, #31
 8001566:	d90f      	bls.n	8001588 <TIM_IRQInterruptConfig+0xc0>
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b3f      	cmp	r3, #63	@ 0x3f
 800156c:	d80c      	bhi.n	8001588 <TIM_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <TIM_IRQInterruptConfig+0x100>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	f002 021f 	and.w	r2, r2, #31
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	4611      	mov	r1, r2
 8001580:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <TIM_IRQInterruptConfig+0x100>)
 8001582:	430b      	orrs	r3, r1
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e012      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b3f      	cmp	r3, #63	@ 0x3f
 800158c:	d90f      	bls.n	80015ae <TIM_IRQInterruptConfig+0xe6>
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b5f      	cmp	r3, #95	@ 0x5f
 8001592:	d80c      	bhi.n	80015ae <TIM_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <TIM_IRQInterruptConfig+0x104>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <TIM_IRQInterruptConfig+0x104>)
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	e7ff      	b.n	80015ae <TIM_IRQInterruptConfig+0xe6>
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000e104 	.word	0xe000e104
 80015c0:	e000e108 	.word	0xe000e108
 80015c4:	e000e180 	.word	0xe000e180
 80015c8:	e000e184 	.word	0xe000e184
 80015cc:	e000e188 	.word	0xe000e188

080015d0 <TIMx_EV_IRQHandling>:

/******************************Event Handling*******************************/
void TIMx_EV_IRQHandling(TIM_Handle_t *pTIMHandle){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	// ARR Overflow
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_UIF_POS)){
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <TIMx_EV_IRQHandling+0x2e>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);  // Clear update UIF flag
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_UIF);
 80015f6:	2100      	movs	r1, #0
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff faa3 	bl	8000b44 <TIM_ApplicationEventCallback>
//	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC4OF_POS )){
//		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC4OF_POS);  // Clear update CC14F flag
//		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC4OF);
//	}

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <main>:


	}
	// 1 = UP and 0 = DOWN
	int main(void)
	{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09a      	sub	sp, #104	@ 0x68
 800160c:	af00      	add	r7, sp, #0
		//	initialise_monitor_handles();   // <-- enable semihosting


		A4988_config_t stepper_1;
		memset(&stepper_1, 0, sizeof(stepper_1));
 800160e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001612:	2230      	movs	r2, #48	@ 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f87f 	bl	800171a <memset>
		/*Always initiate clock first before data line*/
		//PA5
		stepper_1.step_port = pGPIOA;
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <main+0xb0>)
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
		stepper_1.step_pin = 5;
 8001620:	2305      	movs	r3, #5
 8001622:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		stepper_1.step_alt_mode = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
		stepper_1.step_timer_port = pTIM2;
 800162c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001630:	63fb      	str	r3, [r7, #60]	@ 0x3c
		stepper_1.step_channel = TIMx_CH1;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		stepper_1.step_IRQ_number = IRQ_NO_TIM2;
 8001638:	231c      	movs	r3, #28
 800163a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		//PA9
		stepper_1.dir_port = pGPIOA;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <main+0xb0>)
 8001640:	647b      	str	r3, [r7, #68]	@ 0x44
		stepper_1.dir_pin = 9;
 8001642:	2309      	movs	r3, #9
 8001644:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48


		A4988_init(&stepper_1);
 8001648:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f8cd 	bl	80007ec <A4988_init>


		A4988_config_t stepper_2;
		memset(&stepper_2, 0, sizeof(stepper_2));
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2230      	movs	r2, #48	@ 0x30
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f85e 	bl	800171a <memset>
		/*Always initiate clock first before data line*/
		// PB4
		stepper_2.step_port = pGPIOB; // change port
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <main+0xb4>)
 8001660:	607b      	str	r3, [r7, #4]
		stepper_2.step_pin = 4; // change pin
 8001662:	2304      	movs	r3, #4
 8001664:	723b      	strb	r3, [r7, #8]
		stepper_2.step_alt_mode = 2; // chage alt
 8001666:	2302      	movs	r3, #2
 8001668:	727b      	strb	r3, [r7, #9]
		stepper_2.step_timer_port = pTIM3;
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <main+0xb8>)
 800166c:	60fb      	str	r3, [r7, #12]
		stepper_2.step_channel = TIMx_CH1; // change channel
 800166e:	2301      	movs	r3, #1
 8001670:	743b      	strb	r3, [r7, #16]
		stepper_2.step_IRQ_number = IRQ_NO_TIM3;
 8001672:	231d      	movs	r3, #29
 8001674:	747b      	strb	r3, [r7, #17]
		// PB5
		stepper_2.dir_port = pGPIOB;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <main+0xb4>)
 8001678:	617b      	str	r3, [r7, #20]
		stepper_2.dir_pin = 5;
 800167a:	2305      	movs	r3, #5
 800167c:	763b      	strb	r3, [r7, #24]


		A4988_init(&stepper_2);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f8b3 	bl	80007ec <A4988_init>


		/* Loop forever */
		for (;;)
		{
			A4988_move_Step(200, HIGH, &stepper_1);
 8001686:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800168a:	461a      	mov	r2, r3
 800168c:	2101      	movs	r1, #1
 800168e:	20c8      	movs	r0, #200	@ 0xc8
 8001690:	f7ff f9a0 	bl	80009d4 <A4988_move_Step>
			A4988_move_Step(100, HIGH, &stepper_2);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	461a      	mov	r2, r3
 8001698:	2101      	movs	r1, #1
 800169a:	2064      	movs	r0, #100	@ 0x64
 800169c:	f7ff f99a 	bl	80009d4 <A4988_move_Step>
//			for (uint32_t i = 0; i < 5000000; i++);
			for (uint32_t i = 0; i < 5000000; i++);
 80016a0:	2300      	movs	r3, #0
 80016a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a4:	e002      	b.n	80016ac <main+0xa4>
 80016a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016a8:	3301      	adds	r3, #1
 80016aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80016ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <main+0xbc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d9f8      	bls.n	80016a6 <main+0x9e>
			A4988_move_Step(200, HIGH, &stepper_1);
 80016b4:	e7e7      	b.n	8001686 <main+0x7e>
 80016b6:	bf00      	nop
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40000400 	.word	0x40000400
 80016c4:	004c4b3f 	.word	0x004c4b3f

080016c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016f6:	f000 f819 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016fa:	f7ff ff85 	bl	8001608 <main>

080016fe <LoopForever>:

LoopForever:
  b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   r0, =_estack
 8001700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800170c:	08001794 	.word	0x08001794
  ldr r2, =_sbss
 8001710:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001714:	2000007c 	.word	0x2000007c

08001718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>

0800171a <memset>:
 800171a:	4402      	add	r2, r0
 800171c:	4603      	mov	r3, r0
 800171e:	4293      	cmp	r3, r2
 8001720:	d100      	bne.n	8001724 <memset+0xa>
 8001722:	4770      	bx	lr
 8001724:	f803 1b01 	strb.w	r1, [r3], #1
 8001728:	e7f9      	b.n	800171e <memset+0x4>
	...

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4d0d      	ldr	r5, [pc, #52]	@ (8001764 <__libc_init_array+0x38>)
 8001730:	4c0d      	ldr	r4, [pc, #52]	@ (8001768 <__libc_init_array+0x3c>)
 8001732:	1b64      	subs	r4, r4, r5
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	2600      	movs	r6, #0
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	4d0b      	ldr	r5, [pc, #44]	@ (800176c <__libc_init_array+0x40>)
 800173e:	4c0c      	ldr	r4, [pc, #48]	@ (8001770 <__libc_init_array+0x44>)
 8001740:	f000 f818 	bl	8001774 <_init>
 8001744:	1b64      	subs	r4, r4, r5
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	2600      	movs	r6, #0
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	f855 3b04 	ldr.w	r3, [r5], #4
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	f855 3b04 	ldr.w	r3, [r5], #4
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	0800178c 	.word	0x0800178c
 8001768:	0800178c 	.word	0x0800178c
 800176c:	0800178c 	.word	0x0800178c
 8001770:	08001790 	.word	0x08001790

08001774 <_init>:
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	bf00      	nop
 8001778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177a:	bc08      	pop	{r3}
 800177c:	469e      	mov	lr, r3
 800177e:	4770      	bx	lr

08001780 <_fini>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	bf00      	nop
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr
