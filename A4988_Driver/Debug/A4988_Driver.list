
A4988_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f14  08000f14  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f14  08000f14  00002014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f14  08000f14  00002014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f14  08000f14  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f14  08000f14  00001f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f18  08000f18  00001f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000f1c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000014  08000f30  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000f30  00002094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017d1  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000644  00000000  00000000  0000380f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00003e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000100  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a18  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023fe  00000000  00000000  00006ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009618  00000000  00000000  00008ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000124ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000498  00000000  00000000  00012534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000129cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000efc 	.word	0x08000efc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000efc 	.word	0x08000efc

08000204 <A4988_init>:
static uint32_t ccr = 1;
static uint32_t step = 1;
TIM_Handle_t TIM_handles[MAX_TIMERS];


void A4988_init(A4988_config_t *A4988_config){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	// Set address of each timer in TIM_handles array
	A4988_TIM_Init();
 800020c:	f000 f880 	bl	8000310 <A4988_TIM_Init>
	A4988_GPIO_Config(A4988_config);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 f807 	bl	8000224 <A4988_GPIO_Config>
	A4988_TIM_Config(A4988_config);
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 f846 	bl	80002a8 <A4988_TIM_Config>

}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <A4988_GPIO_Config>:

static void A4988_GPIO_Config(A4988_config_t *A4988_config){
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]


	GPIO_Handle_t step,dir;
	memset(&dir,0,sizeof(dir));
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	220c      	movs	r2, #12
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fe34 	bl	8000ea2 <memset>
	memset(&step,0,sizeof(step));
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	220c      	movs	r2, #12
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fe2d 	bl	8000ea2 <memset>

	//Set up Step Port
	step.pGPIOx = A4988_config->step_port;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	617b      	str	r3, [r7, #20]
	step.GPIO_PinConfig.GPIO_PinNumber = A4988_config->step_pin;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	763b      	strb	r3, [r7, #24]
	step.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 8000254:	2302      	movs	r3, #2
 8000256:	767b      	strb	r3, [r7, #25]
	step.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000258:	2302      	movs	r3, #2
 800025a:	76bb      	strb	r3, [r7, #26]
	step.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 800025c:	2300      	movs	r3, #0
 800025e:	76fb      	strb	r3, [r7, #27]
	step.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP ; // PP for normal usage
 8000260:	2300      	movs	r3, #0
 8000262:	773b      	strb	r3, [r7, #28]
	step.GPIO_PinConfig.GPIO_PinAltFunMode = A4988_config->step_alt_mode; // No Alternate Funciton is used
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	795b      	ldrb	r3, [r3, #5]
 8000268:	777b      	strb	r3, [r7, #29]
	GPIO_Init(&step);
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f924 	bl	80004bc <GPIO_Init>


	//Set up dir Port
	dir.pGPIOx = A4988_config->dir_port;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	691b      	ldr	r3, [r3, #16]
 8000278:	60bb      	str	r3, [r7, #8]
	dir.GPIO_PinConfig.GPIO_PinNumber = A4988_config->dir_pin;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	7d1b      	ldrb	r3, [r3, #20]
 800027e:	733b      	strb	r3, [r7, #12]
	dir.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000280:	2301      	movs	r3, #1
 8000282:	737b      	strb	r3, [r7, #13]
	dir.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000284:	2302      	movs	r3, #2
 8000286:	73bb      	strb	r3, [r7, #14]
	dir.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO_PUPD;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
	dir.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_PP ; // PP for normal usage
 800028c:	2300      	movs	r3, #0
 800028e:	743b      	strb	r3, [r7, #16]
	dir.GPIO_PinConfig.GPIO_PinAltFunMode = A4988_config->dir_alt_mode; // No Alternate Funciton is used
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	7d5b      	ldrb	r3, [r3, #21]
 8000294:	747b      	strb	r3, [r7, #17]
	GPIO_Init(&dir);
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f90e 	bl	80004bc <GPIO_Init>

}
 80002a0:	bf00      	nop
 80002a2:	3720      	adds	r7, #32
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <A4988_TIM_Config>:

static void A4988_TIM_Config(A4988_config_t *A4988_config){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

	TIM_Handle_t PWMx;
	memset(&PWMx,0,sizeof(PWMx));
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	2214      	movs	r2, #20
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fdf2 	bl	8000ea2 <memset>

	PWMx.pTIMx = A4988_config->step_timer_port;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	60fb      	str	r3, [r7, #12]
	PWMx.TIMx_PinConfig.TIM_Prescaler = 4;
 80002c4:	2304      	movs	r3, #4
 80002c6:	613b      	str	r3, [r7, #16]
	PWMx.TIMx_PinConfig.TIM_CountDir = UPWARDS;
 80002c8:	2301      	movs	r3, #1
 80002ca:	773b      	strb	r3, [r7, #28]
	PWMx.TIMx_PinConfig.TIM_Channel = A4988_config->step_channel;;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7b1b      	ldrb	r3, [r3, #12]
 80002d0:	777b      	strb	r3, [r7, #29]
	PWMx.TIMx_PinConfig.TIM_Mode = TIMx_MODE_COMPARE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	77bb      	strb	r3, [r7, #30]
	PWMx.TIMx_PinConfig.TIM_CMP_Mode = TIMx_COMPARE_MODE_PWM1;
 80002d6:	2306      	movs	r3, #6
 80002d8:	77fb      	strb	r3, [r7, #31]
	PWMx.TIMx_PinConfig.TIM_ARR = 1000; // 1 Period = 1/4MHz = 0.25 microSecs -> 1000 * 0.25 microSecs = 250 microSecs
 80002da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002de:	617b      	str	r3, [r7, #20]
	PWMx.TIMx_PinConfig.TIM_CCR = 500; // Duty Cycle 50%
 80002e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80002e4:	61bb      	str	r3, [r7, #24]

	TIM_Init(&PWMx);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fb5c 	bl	80009a8 <TIM_Init>
	TIM_InterruptEnable(&PWMx,ENABLE);
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fca8 	bl	8000c4c <TIM_InterruptEnable>
	TIM_IRQInterruptConfig(A4988_config->step_IRQ_number,ENABLE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	7b5b      	ldrb	r3, [r3, #13]
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fcc2 	bl	8000c8c <TIM_IRQInterruptConfig>

}
 8000308:	bf00      	nop
 800030a:	3720      	adds	r7, #32
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <A4988_TIM_Init>:

static void A4988_TIM_Init(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

    memset(&TIM_handles[0], 0, sizeof(TIM_Handle_t));
 8000314:	2214      	movs	r2, #20
 8000316:	2100      	movs	r1, #0
 8000318:	4810      	ldr	r0, [pc, #64]	@ (800035c <A4988_TIM_Init+0x4c>)
 800031a:	f000 fdc2 	bl	8000ea2 <memset>
    TIM_handles[0].pTIMx = pTIM2;
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <A4988_TIM_Init+0x4c>)
 8000320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000324:	601a      	str	r2, [r3, #0]

    memset(&TIM_handles[1], 0, sizeof(TIM_Handle_t));
 8000326:	2214      	movs	r2, #20
 8000328:	2100      	movs	r1, #0
 800032a:	480d      	ldr	r0, [pc, #52]	@ (8000360 <A4988_TIM_Init+0x50>)
 800032c:	f000 fdb9 	bl	8000ea2 <memset>
    TIM_handles[1].pTIMx = pTIM3;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <A4988_TIM_Init+0x4c>)
 8000332:	4a0c      	ldr	r2, [pc, #48]	@ (8000364 <A4988_TIM_Init+0x54>)
 8000334:	615a      	str	r2, [r3, #20]

    memset(&TIM_handles[2], 0, sizeof(TIM_Handle_t));
 8000336:	2214      	movs	r2, #20
 8000338:	2100      	movs	r1, #0
 800033a:	480b      	ldr	r0, [pc, #44]	@ (8000368 <A4988_TIM_Init+0x58>)
 800033c:	f000 fdb1 	bl	8000ea2 <memset>
    TIM_handles[2].pTIMx = pTIM4;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <A4988_TIM_Init+0x4c>)
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <A4988_TIM_Init+0x5c>)
 8000344:	629a      	str	r2, [r3, #40]	@ 0x28

    memset(&TIM_handles[3], 0, sizeof(TIM_Handle_t));
 8000346:	2214      	movs	r2, #20
 8000348:	2100      	movs	r1, #0
 800034a:	4809      	ldr	r0, [pc, #36]	@ (8000370 <A4988_TIM_Init+0x60>)
 800034c:	f000 fda9 	bl	8000ea2 <memset>
    TIM_handles[3].pTIMx = pTIM5;
 8000350:	4b02      	ldr	r3, [pc, #8]	@ (800035c <A4988_TIM_Init+0x4c>)
 8000352:	4a08      	ldr	r2, [pc, #32]	@ (8000374 <A4988_TIM_Init+0x64>)
 8000354:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000030 	.word	0x20000030
 8000360:	20000044 	.word	0x20000044
 8000364:	40000400 	.word	0x40000400
 8000368:	20000058 	.word	0x20000058
 800036c:	40000800 	.word	0x40000800
 8000370:	2000006c 	.word	0x2000006c
 8000374:	40000c00 	.word	0x40000c00

08000378 <A4988_move_Step>:
void A4988_move_Step(uint32_t steps, uint32_t dir, TIM_Handle_t pTIMHandle){
 8000378:	b082      	sub	sp, #8
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
 8000384:	f107 0110 	add.w	r1, r7, #16
 8000388:	e881 000c 	stmia.w	r1, {r2, r3}
	// Enable Counter and ISR
	counter = 0;
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <A4988_move_Step+0x60>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
	step = steps;
 8000392:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <A4988_move_Step+0x64>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6013      	str	r3, [r2, #0]
	arr = 1000;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <A4988_move_Step+0x68>)
 800039a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800039e:	601a      	str	r2, [r3, #0]
	ccr = 500;
 80003a0:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <A4988_move_Step+0x6c>)
 80003a2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003a6:	601a      	str	r2, [r3, #0]
	pTIMHandle.pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	f042 0201 	orr.w	r2, r2, #1
 80003b2:	601a      	str	r2, [r3, #0]

	while(counter < steps);
 80003b4:	bf00      	nop
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <A4988_move_Step+0x60>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d8fa      	bhi.n	80003b6 <A4988_move_Step+0x3e>


	// Disable Counter
	pTIMHandle.pTIMx->CR1  &= ~(1 << TIM_CR1_CEN_POS);
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	f022 0201 	bic.w	r2, r2, #1
 80003ca:	601a      	str	r2, [r3, #0]


}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	b002      	add	sp, #8
 80003d6:	4770      	bx	lr
 80003d8:	20000004 	.word	0x20000004
 80003dc:	20000010 	.word	0x20000010
 80003e0:	20000000 	.word	0x20000000
 80003e4:	2000000c 	.word	0x2000000c

080003e8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[0]);
 80003ec:	4802      	ldr	r0, [pc, #8]	@ (80003f8 <TIM2_IRQHandler+0x10>)
 80003ee:	f000 fcd1 	bl	8000d94 <TIMx_EV_IRQHandling>

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000030 	.word	0x20000030

080003fc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[1]);
 8000400:	4802      	ldr	r0, [pc, #8]	@ (800040c <TIM3_IRQHandler+0x10>)
 8000402:	f000 fcc7 	bl	8000d94 <TIMx_EV_IRQHandling>

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000044 	.word	0x20000044

08000410 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	TIMx_EV_IRQHandling(&TIM_handles[2]);
 8000414:	4802      	ldr	r0, [pc, #8]	@ (8000420 <TIM4_IRQHandler+0x10>)
 8000416:	f000 fcbd 	bl	8000d94 <TIMx_EV_IRQHandling>

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000058 	.word	0x20000058

08000424 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

	TIMx_EV_IRQHandling(&TIM_handles[3]);
 8000428:	4802      	ldr	r0, [pc, #8]	@ (8000434 <TIM5_IRQHandler+0x10>)
 800042a:	f000 fcb3 	bl	8000d94 <TIMx_EV_IRQHandling>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	2000006c 	.word	0x2000006c

08000438 <TIM_ApplicationEventCallback>:

void TIM_ApplicationEventCallback(TIM_Handle_t *pTIMHandle, uint8_t AppEv){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]
	if(AppEv == TIMx_EV_UIF){
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d12a      	bne.n	80004a0 <TIM_ApplicationEventCallback+0x68>
//		Update the frequency of toggling
//		Update CCR register to change pulse width (duty cycle) or timing
		counter++;
 800044a:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <TIM_ApplicationEventCallback+0x74>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a16      	ldr	r2, [pc, #88]	@ (80004ac <TIM_ApplicationEventCallback+0x74>)
 8000452:	6013      	str	r3, [r2, #0]
		if(status == 1){
 8000454:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <TIM_ApplicationEventCallback+0x78>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d105      	bne.n	8000468 <TIM_ApplicationEventCallback+0x30>
			arr -= 10;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b0a      	subs	r3, #10
 8000462:	4a14      	ldr	r2, [pc, #80]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	e004      	b.n	8000472 <TIM_ApplicationEventCallback+0x3a>

		}
		else{
			arr += 10;
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	330a      	adds	r3, #10
 800046e:	4a11      	ldr	r2, [pc, #68]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 8000470:	6013      	str	r3, [r2, #0]
		}

		if (counter >= step){ // High frequency pulse
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <TIM_ApplicationEventCallback+0x74>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <TIM_ApplicationEventCallback+0x80>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	d305      	bcc.n	800048a <TIM_ApplicationEventCallback+0x52>
		    	status *= -1;
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <TIM_ApplicationEventCallback+0x78>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	425b      	negs	r3, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <TIM_ApplicationEventCallback+0x78>)
 8000488:	701a      	strb	r2, [r3, #0]
		}

		pTIMHandle->pTIMx->ARR = arr;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a09      	ldr	r2, [pc, #36]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 8000490:	6812      	ldr	r2, [r2, #0]
 8000492:	62da      	str	r2, [r3, #44]	@ 0x2c
		pTIMHandle->pTIMx->CCR1 = arr/2;
 8000494:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <TIM_ApplicationEventCallback+0x7c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0852      	lsrs	r2, r2, #1
 800049e:	635a      	str	r2, [r3, #52]	@ 0x34
//		    pTIMHandle->pTIMx->CCR1 = pulse;



	}
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000004 	.word	0x20000004
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000010 	.word	0x20000010

080004bc <GPIO_Init>:
 *  Created on: Mar 17, 2025
 *      Author: bright
 */
#include "stm32f446xx_GPIO_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f99c 	bl	8000808 <GPIO_PeriClockControl>

	/*Non-Interrupt Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d81f      	bhi.n	8000518 <GPIO_Init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	2103      	movs	r1, #3
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	400a      	ands	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	4619      	mov	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	4619      	mov	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e0b0      	b.n	800067a <GPIO_Init+0x1be>

	}
	/*Interrupt Mode*/
	else{

		uint8_t index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	089b      	lsrs	r3, r3, #2
 800051e:	73fb      	strb	r3, [r7, #15]

		uint8_t Port = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a99      	ldr	r2, [pc, #612]	@ (800078c <GPIO_Init+0x2d0>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d032      	beq.n	8000590 <GPIO_Init+0xd4>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a98      	ldr	r2, [pc, #608]	@ (8000790 <GPIO_Init+0x2d4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d02b      	beq.n	800058c <GPIO_Init+0xd0>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a96      	ldr	r2, [pc, #600]	@ (8000794 <GPIO_Init+0x2d8>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d024      	beq.n	8000588 <GPIO_Init+0xcc>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a95      	ldr	r2, [pc, #596]	@ (8000798 <GPIO_Init+0x2dc>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d01d      	beq.n	8000584 <GPIO_Init+0xc8>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a93      	ldr	r2, [pc, #588]	@ (800079c <GPIO_Init+0x2e0>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d016      	beq.n	8000580 <GPIO_Init+0xc4>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a92      	ldr	r2, [pc, #584]	@ (80007a0 <GPIO_Init+0x2e4>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d00f      	beq.n	800057c <GPIO_Init+0xc0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a90      	ldr	r2, [pc, #576]	@ (80007a4 <GPIO_Init+0x2e8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d008      	beq.n	8000578 <GPIO_Init+0xbc>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a8f      	ldr	r2, [pc, #572]	@ (80007a8 <GPIO_Init+0x2ec>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d101      	bne.n	8000574 <GPIO_Init+0xb8>
 8000570:	2307      	movs	r3, #7
 8000572:	e00e      	b.n	8000592 <GPIO_Init+0xd6>
 8000574:	2300      	movs	r3, #0
 8000576:	e00c      	b.n	8000592 <GPIO_Init+0xd6>
 8000578:	2306      	movs	r3, #6
 800057a:	e00a      	b.n	8000592 <GPIO_Init+0xd6>
 800057c:	2305      	movs	r3, #5
 800057e:	e008      	b.n	8000592 <GPIO_Init+0xd6>
 8000580:	2304      	movs	r3, #4
 8000582:	e006      	b.n	8000592 <GPIO_Init+0xd6>
 8000584:	2303      	movs	r3, #3
 8000586:	e004      	b.n	8000592 <GPIO_Init+0xd6>
 8000588:	2302      	movs	r3, #2
 800058a:	e002      	b.n	8000592 <GPIO_Init+0xd6>
 800058c:	2301      	movs	r3, #1
 800058e:	e000      	b.n	8000592 <GPIO_Init+0xd6>
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d117      	bne.n	80005cc <GPIO_Init+0x110>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b83      	ldr	r3, [pc, #524]	@ (80007ac <GPIO_Init+0x2f0>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a7f      	ldr	r2, [pc, #508]	@ (80007ac <GPIO_Init+0x2f0>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b7e      	ldr	r3, [pc, #504]	@ (80007ac <GPIO_Init+0x2f0>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a79      	ldr	r2, [pc, #484]	@ (80007ac <GPIO_Init+0x2f0>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	6093      	str	r3, [r2, #8]
 80005ca:	e031      	b.n	8000630 <GPIO_Init+0x174>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d117      	bne.n	8000604 <GPIO_Init+0x148>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b75      	ldr	r3, [pc, #468]	@ (80007ac <GPIO_Init+0x2f0>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a71      	ldr	r2, [pc, #452]	@ (80007ac <GPIO_Init+0x2f0>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	4b70      	ldr	r3, [pc, #448]	@ (80007ac <GPIO_Init+0x2f0>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a6b      	ldr	r2, [pc, #428]	@ (80007ac <GPIO_Init+0x2f0>)
 80005fe:	400b      	ands	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
 8000602:	e015      	b.n	8000630 <GPIO_Init+0x174>
		}
		else{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000604:	4b69      	ldr	r3, [pc, #420]	@ (80007ac <GPIO_Init+0x2f0>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	4a65      	ldr	r2, [pc, #404]	@ (80007ac <GPIO_Init+0x2f0>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061a:	4b64      	ldr	r3, [pc, #400]	@ (80007ac <GPIO_Init+0x2f0>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a60      	ldr	r2, [pc, #384]	@ (80007ac <GPIO_Init+0x2f0>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]

		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 8000630:	4b5f      	ldr	r3, [pc, #380]	@ (80007b0 <GPIO_Init+0x2f4>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000634:	4a5e      	ldr	r2, [pc, #376]	@ (80007b0 <GPIO_Init+0x2f4>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[index] |= (Port << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4));
 800063c:	4a5d      	ldr	r2, [pc, #372]	@ (80007b4 <GPIO_Init+0x2f8>)
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	3302      	adds	r3, #2
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	7bb9      	ldrb	r1, [r7, #14]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	4618      	mov	r0, r3
 8000658:	4956      	ldr	r1, [pc, #344]	@ (80007b4 <GPIO_Init+0x2f8>)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	4302      	orrs	r2, r0
 800065e:	3302      	adds	r3, #2
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000664:	4b51      	ldr	r3, [pc, #324]	@ (80007ac <GPIO_Init+0x2f0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a4d      	ldr	r2, [pc, #308]	@ (80007ac <GPIO_Init+0x2f0>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]


	}

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2303      	movs	r3, #3
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	609a      	str	r2, [r3, #8]
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	799b      	ldrb	r3, [r3, #6]
 80006a0:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	609a      	str	r2, [r3, #8]


	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2303      	movs	r3, #3
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	60da      	str	r2, [r3, #12]
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	4619      	mov	r1, r3
					   (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	005b      	lsls	r3, r3, #1
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	408b      	lsls	r3, r1
 8000702:	43db      	mvns	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	400a      	ands	r2, r1
 800070c:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	4619      	mov	r1, r3
					   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
			pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	430a      	orrs	r2, r1
 800072a:	605a      	str	r2, [r3, #4]

	/*Alternate Function Mode*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d164      	bne.n	80007fe <GPIO_Init+0x342>
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7 && pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 16 ){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d93d      	bls.n	80007b8 <GPIO_Init+0x2fc>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	2b10      	cmp	r3, #16
 8000742:	d939      	bls.n	80007b8 <GPIO_Init+0x2fc>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	210f      	movs	r1, #15
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7a5b      	ldrb	r3, [r3, #9]
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	4619      	mov	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	430a      	orrs	r2, r1
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24

		}
	}


}
 800078a:	e038      	b.n	80007fe <GPIO_Init+0x342>
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40020800 	.word	0x40020800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	40021400 	.word	0x40021400
 80007a4:	40021800 	.word	0x40021800
 80007a8:	40021c00 	.word	0x40021c00
 80007ac:	40013c00 	.word	0x40013c00
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6a1a      	ldr	r2, [r3, #32]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	210f      	movs	r1, #15
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	400a      	ands	r2, r1
 80007d8:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a1a      	ldr	r2, [r3, #32]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a5b      	ldrb	r3, [r3, #9]
 80007e4:	4619      	mov	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	621a      	str	r2, [r3, #32]
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop

08000808 <GPIO_PeriClockControl>:


}

/*Enable Clock of the given GPIO*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
//	assert(pGPIOx == NULL);
	if(ENorDI == ENABLE){
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d157      	bne.n	80008ca <GPIO_PeriClockControl+0xc2>

		if(pGPIOx == pGPIOA){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a59      	ldr	r2, [pc, #356]	@ (8000984 <GPIO_PeriClockControl+0x17c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000822:	4b59      	ldr	r3, [pc, #356]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a58      	ldr	r2, [pc, #352]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
				else if(pGPIOx == pGPIOH){

					GPIOH_PCLK_DI();
				}
	}
}
 800082e:	e0a3      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOB){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a56      	ldr	r2, [pc, #344]	@ (800098c <GPIO_PeriClockControl+0x184>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000838:	4b53      	ldr	r3, [pc, #332]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083c:	4a52      	ldr	r2, [pc, #328]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000844:	e098      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOC){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a51      	ldr	r2, [pc, #324]	@ (8000990 <GPIO_PeriClockControl+0x188>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800084e:	4b4e      	ldr	r3, [pc, #312]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a4d      	ldr	r2, [pc, #308]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800085a:	e08d      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOD){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a4d      	ldr	r2, [pc, #308]	@ (8000994 <GPIO_PeriClockControl+0x18c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000864:	4b48      	ldr	r3, [pc, #288]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a47      	ldr	r2, [pc, #284]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000870:	e082      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOE){
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a48      	ldr	r2, [pc, #288]	@ (8000998 <GPIO_PeriClockControl+0x190>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800087a:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a42      	ldr	r2, [pc, #264]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000886:	e077      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOF){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a44      	ldr	r2, [pc, #272]	@ (800099c <GPIO_PeriClockControl+0x194>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000890:	4b3d      	ldr	r3, [pc, #244]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	4a3c      	ldr	r2, [pc, #240]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800089c:	e06c      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOG){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a3f      	ldr	r2, [pc, #252]	@ (80009a0 <GPIO_PeriClockControl+0x198>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80008a6:	4b38      	ldr	r3, [pc, #224]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a37      	ldr	r2, [pc, #220]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008b2:	e061      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == pGPIOH){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a3b      	ldr	r2, [pc, #236]	@ (80009a4 <GPIO_PeriClockControl+0x19c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d15d      	bne.n	8000978 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80008bc:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a31      	ldr	r2, [pc, #196]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008c8:	e056      	b.n	8000978 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == pGPIOA){
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <GPIO_PeriClockControl+0x17c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008de:	e04b      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOB){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a2a      	ldr	r2, [pc, #168]	@ (800098c <GPIO_PeriClockControl+0x184>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ec:	4a26      	ldr	r2, [pc, #152]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 80008ee:	f023 0302 	bic.w	r3, r3, #2
 80008f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008f4:	e040      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOC){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <GPIO_PeriClockControl+0x188>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000904:	f023 0304 	bic.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800090a:	e035      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOD){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <GPIO_PeriClockControl+0x18c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800091a:	f023 0308 	bic.w	r3, r3, #8
 800091e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000920:	e02a      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOE){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <GPIO_PeriClockControl+0x190>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a16      	ldr	r2, [pc, #88]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000930:	f023 0310 	bic.w	r3, r3, #16
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000936:	e01f      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOF){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a18      	ldr	r2, [pc, #96]	@ (800099c <GPIO_PeriClockControl+0x194>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000944:	4a10      	ldr	r2, [pc, #64]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000946:	f023 0320 	bic.w	r3, r3, #32
 800094a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800094c:	e014      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOG){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <GPIO_PeriClockControl+0x198>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800095c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000962:	e009      	b.n	8000978 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == pGPIOH){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <GPIO_PeriClockControl+0x19c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d105      	bne.n	8000978 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <GPIO_PeriClockControl+0x180>)
 8000972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40020000 	.word	0x40020000
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40020800 	.word	0x40020800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40021000 	.word	0x40021000
 800099c:	40021400 	.word	0x40021400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40021c00 	.word	0x40021c00

080009a8 <TIM_Init>:
 */
#include "stm32f446xx_Timer_driver.h"


void static TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle);
void TIM_Init(TIM_Handle_t *pTIMHandle){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	TIM_PeriClockControl(pTIMHandle->pTIMx,ENABLE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f83a 	bl	8000a30 <TIM_PeriClockControl>
	// Set Prescaler - HSI SysCLK is 16 MHZ
	pTIMHandle->pTIMx->PSC = pTIMHandle->TIMx_PinConfig.TIM_Prescaler - 1;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3a01      	subs	r2, #1
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
	// Set ARR corresponded to the given period
	// ARR = Given Periode * (SysCLK/Prescaler)
	pTIMHandle->pTIMx->ARR = (pTIMHandle->TIMx_PinConfig.TIM_ARR) - 1 ;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3a01      	subs	r2, #1
 80009d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable Capture/Compare Mode
	pTIMHandle->pTIMx->CCER  |= (1 << 4 * (pTIMHandle->TIMx_PinConfig.TIM_Channel-1));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6a1a      	ldr	r2, [r3, #32]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7c5b      	ldrb	r3, [r3, #17]
 80009de:	3b01      	subs	r3, #1
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	430a      	orrs	r2, r1
 80009f0:	621a      	str	r2, [r3, #32]
	// Set Dir default is countup
	pTIMHandle->pTIMx->CR1  &= ~(1 << TIM_CR1_DIR_POS);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0210 	bic.w	r2, r2, #16
 8000a00:	601a      	str	r2, [r3, #0]
	if(pTIMHandle->TIMx_PinConfig.TIM_CountDir== TIMx_CR1_DIR_UPWARDS){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7c1b      	ldrb	r3, [r3, #16]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d107      	bne.n	8000a1a <TIM_Init+0x72>
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_DIR_POS);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f042 0210 	orr.w	r2, r2, #16
 8000a18:	601a      	str	r2, [r3, #0]
	}

	if(pTIMHandle->TIMx_PinConfig.TIM_Mode == TIMx_MODE_COMPARE){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7c9b      	ldrb	r3, [r3, #18]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <TIM_Init+0x80>
		//Set Compare mode
		TIM_SetCompareModeChannel(pTIMHandle);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f872 	bl	8000b0c <TIM_SetCompareModeChannel>
	}else{
		//Set Capture mode
	}


}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <TIM_PeriClockControl>:

/*Enable Clock of the given Timer*/
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t ENorDI){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]

	if(ENorDI == ENABLE){
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d12b      	bne.n	8000a9a <TIM_PeriClockControl+0x6a>

		if(pTIMx == pTIM2){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a48:	d106      	bne.n	8000a58 <TIM_PeriClockControl+0x28>
			TIM2_PCLK_EN();
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pTIMx == pTIM5){
			TIM5_PCLK_DI();
		}

	}
}
 8000a56:	e04b      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <TIM_PeriClockControl+0xd0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	4a25      	ldr	r2, [pc, #148]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a6c:	e040      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a24      	ldr	r2, [pc, #144]	@ (8000b04 <TIM_PeriClockControl+0xd4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a82:	e035      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a20      	ldr	r2, [pc, #128]	@ (8000b08 <TIM_PeriClockControl+0xd8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d131      	bne.n	8000af0 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a98:	e02a      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		if(pTIMx == pTIM2){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa0:	d106      	bne.n	8000ab0 <TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a15      	ldr	r2, [pc, #84]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000aa8:	f063 0301 	orn	r3, r3, #1
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000aae:	e01f      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM3){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <TIM_PeriClockControl+0xd0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d106      	bne.n	8000ac6 <TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000abe:	f063 0302 	orn	r3, r3, #2
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ac4:	e014      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM4){
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <TIM_PeriClockControl+0xd4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d106      	bne.n	8000adc <TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000ad4:	f063 0304 	orn	r3, r3, #4
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ada:	e009      	b.n	8000af0 <TIM_PeriClockControl+0xc0>
		else if(pTIMx == pTIM5){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <TIM_PeriClockControl+0xd8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d105      	bne.n	8000af0 <TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <TIM_PeriClockControl+0xcc>)
 8000aea:	f063 0308 	orn	r3, r3, #8
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40000800 	.word	0x40000800
 8000b08:	40000c00 	.word	0x40000c00

08000b0c <TIM_SetCompareModeChannel>:

/*Enable Clock of the given Timer*/
void TIM_SetCompareModeChannel(TIM_Handle_t *pTIMHandle){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

		if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH1){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7c5b      	ldrb	r3, [r3, #17]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d11f      	bne.n	8000b5c <TIM_SetCompareModeChannel+0x50>
			// CCR1 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR1 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	68d2      	ldr	r2, [r2, #12]
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
			//Clear TIM_CCMR1_OC1M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC1M_POS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000b34:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC1M_POS);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6999      	ldr	r1, [r3, #24]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7cdb      	ldrb	r3, [r3, #19]
 8000b40:	011a      	lsls	r2, r3, #4
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	619a      	str	r2, [r3, #24]
			//Pre-load Buffer Enable
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC1PE_POS);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0208 	orr.w	r2, r2, #8
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	e06a      	b.n	8000c32 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH2){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7c5b      	ldrb	r3, [r3, #17]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d11f      	bne.n	8000ba4 <TIM_SetCompareModeChannel+0x98>
			// CCR2 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR2 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68d2      	ldr	r2, [r2, #12]
 8000b6c:	639a      	str	r2, [r3, #56]	@ 0x38
			//Clear TIM_CCMR1_OC2M_POS
			pTIMHandle->pTIMx->CCMR1 &= ~(6 << TIM_CCMR1_OC2M_POS);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000b7c:	619a      	str	r2, [r3, #24]
			//Set TIM_CCMR1_OC2M_POS MODE
			pTIMHandle->pTIMx->CCMR1 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR1_OC2M_POS);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6999      	ldr	r1, [r3, #24]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7cdb      	ldrb	r3, [r3, #19]
 8000b88:	031a      	lsls	r2, r3, #12
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	619a      	str	r2, [r3, #24]
			pTIMHandle->pTIMx->CCMR1 |= ( 1 << TIM_CCMR1_OC2PE_POS);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	699a      	ldr	r2, [r3, #24]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ba0:	619a      	str	r2, [r3, #24]
 8000ba2:	e046      	b.n	8000c32 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel == TIMx_CH3){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7c5b      	ldrb	r3, [r3, #17]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d11f      	bne.n	8000bec <TIM_SetCompareModeChannel+0xe0>
			// CCR3 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR3 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68d2      	ldr	r2, [r2, #12]
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
			//Clear TIM_CCMR2_OC3M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC3M_POS);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000bc4:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC3M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= ( pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC3M_POS);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	69d9      	ldr	r1, [r3, #28]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7cdb      	ldrb	r3, [r3, #19]
 8000bd0:	011a      	lsls	r2, r3, #4
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC3PE_POS);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f042 0208 	orr.w	r2, r2, #8
 8000be8:	61da      	str	r2, [r3, #28]
 8000bea:	e022      	b.n	8000c32 <TIM_SetCompareModeChannel+0x126>

		}
		else if(pTIMHandle->TIMx_PinConfig.TIM_Channel== TIMx_CH4){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7c5b      	ldrb	r3, [r3, #17]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d11e      	bne.n	8000c32 <TIM_SetCompareModeChannel+0x126>
			// CCR4 = Set DutyCycle. Given the DutyCycle in Percent: (TIM_DutyCycle/100) * ARR
			pTIMHandle->pTIMx->CCR4 = pTIMHandle->TIMx_PinConfig.TIM_CCR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	68d2      	ldr	r2, [r2, #12]
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
			//Clear TIM_CCMR2_OC4M_POS
			pTIMHandle->pTIMx->CCMR2 &= ~(6 << TIM_CCMR2_OC4M_POS);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69da      	ldr	r2, [r3, #28]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000c0c:	61da      	str	r2, [r3, #28]
			//Set TIM_CCMR2_OC4M_POS MODE
			pTIMHandle->pTIMx->CCMR2 |= (pTIMHandle->TIMx_PinConfig.TIM_CMP_Mode << TIM_CCMR2_OC4M_POS);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69d9      	ldr	r1, [r3, #28]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7cdb      	ldrb	r3, [r3, #19]
 8000c18:	031a      	lsls	r2, r3, #12
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	61da      	str	r2, [r3, #28]
			pTIMHandle->pTIMx->CCMR2 |= ( 1 << TIM_CCMR2_OC4PE_POS);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000c30:	61da      	str	r2, [r3, #28]

		}
		//Auto reload pre-load Enable
		pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_ARPE_POS);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c40:	601a      	str	r2, [r3, #0]
		//Enable Counter
//		 pTIMHandle->pTIMx->CR1  |= (1 << TIM_CR1_CEN_POS);


}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <TIM_InterruptEnable>:
/******************************IRQ Enable*******************************/
void TIM_InterruptEnable(TIM_Handle_t *pTIMHandle,uint8_t ENorDI){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
	//Enable Interrupt Mode

	if(ENorDI == ENABLE){
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d108      	bne.n	8000c70 <TIM_InterruptEnable+0x24>

		pTIMHandle->pTIMx->DIER  |= (1 << TIM_DIER_UIE_POS);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0201 	orr.w	r2, r2, #1
 8000c6c:	60da      	str	r2, [r3, #12]
	}
	else{
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
	}

}
 8000c6e:	e007      	b.n	8000c80 <TIM_InterruptEnable+0x34>
		pTIMHandle->pTIMx->DIER  &= ~(1 << TIM_DIER_UIE_POS);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	60da      	str	r2, [r3, #12]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <TIM_IRQInterruptConfig>:

/******************************IRQ Configuration*******************************/
void TIM_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	71bb      	strb	r3, [r7, #6]
	/*Configure IRQ number of TIM
	 *ISER Interrupt Set-enable Register
	 * */

	if(ENorDI == ENABLE){
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d133      	bne.n	8000d0a <TIM_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	d80a      	bhi.n	8000cbe <TIM_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ca8:	4b34      	ldr	r3, [pc, #208]	@ (8000d7c <TIM_IRQInterruptConfig+0xf0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	2101      	movs	r1, #1
 8000cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4a31      	ldr	r2, [pc, #196]	@ (8000d7c <TIM_IRQInterruptConfig+0xf0>)
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 64 && IRQNumber <96){
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000cbc:	e059      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	d90f      	bls.n	8000ce4 <TIM_IRQInterruptConfig+0x58>
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cc8:	d80c      	bhi.n	8000ce4 <TIM_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000cca:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <TIM_IRQInterruptConfig+0xf4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	f002 021f 	and.w	r2, r2, #31
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4a28      	ldr	r2, [pc, #160]	@ (8000d80 <TIM_IRQInterruptConfig+0xf4>)
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e046      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ce8:	d943      	bls.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b5f      	cmp	r3, #95	@ 0x5f
 8000cee:	d840      	bhi.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <TIM_IRQInterruptConfig+0xf8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	4611      	mov	r1, r2
 8000d02:	4a20      	ldr	r2, [pc, #128]	@ (8000d84 <TIM_IRQInterruptConfig+0xf8>)
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	e033      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	d80a      	bhi.n	8000d26 <TIM_IRQInterruptConfig+0x9a>
					*NVIC_ICER0 |= (1 << IRQNumber);
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <TIM_IRQInterruptConfig+0xfc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <TIM_IRQInterruptConfig+0xfc>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	e025      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <64){
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b1f      	cmp	r3, #31
 8000d2a:	d90f      	bls.n	8000d4c <TIM_IRQInterruptConfig+0xc0>
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d30:	d80c      	bhi.n	8000d4c <TIM_IRQInterruptConfig+0xc0>
					*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <TIM_IRQInterruptConfig+0x100>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	f002 021f 	and.w	r2, r2, #31
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	4611      	mov	r1, r2
 8000d44:	4a11      	ldr	r2, [pc, #68]	@ (8000d8c <TIM_IRQInterruptConfig+0x100>)
 8000d46:	430b      	orrs	r3, r1
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e012      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber <96){
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d50:	d90f      	bls.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d56:	d80c      	bhi.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
					*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <TIM_IRQInterruptConfig+0x104>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <TIM_IRQInterruptConfig+0x104>)
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	e7ff      	b.n	8000d72 <TIM_IRQInterruptConfig+0xe6>
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000e104 	.word	0xe000e104
 8000d84:	e000e108 	.word	0xe000e108
 8000d88:	e000e180 	.word	0xe000e180
 8000d8c:	e000e184 	.word	0xe000e184
 8000d90:	e000e188 	.word	0xe000e188

08000d94 <TIMx_EV_IRQHandling>:

/******************************Event Handling*******************************/
void TIMx_EV_IRQHandling(TIM_Handle_t *pTIMHandle){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

	// ARR Overflow
	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_UIF_POS)){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <TIMx_EV_IRQHandling+0x2e>
		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);  // Clear update UIF flag
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0201 	bic.w	r2, r2, #1
 8000db8:	611a      	str	r2, [r3, #16]
		TIM_ApplicationEventCallback(pTIMHandle,TIMx_EV_UIF);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fb3b 	bl	8000438 <TIM_ApplicationEventCallback>
//	if(pTIMHandle->pTIMx->SR & ( 1 << TIM_SR_CC4OF_POS )){
//		pTIMHandle->pTIMx->SR &= ~(1 << TIM_SR_CC4OF_POS);  // Clear update CC14F flag
//		TIM_ApplicationEventCallback(pTIMHandle,TIMx_ER_CC4OF);
//	}

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <main>:

TIM_Handle_t timer;

// 1 = UP and 0 = DOWN
int main(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08d      	sub	sp, #52	@ 0x34
 8000dd0:	af04      	add	r7, sp, #16

	timer.pTIMx = pTIM2;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <main+0x78>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
	A4988_config_t stepper_1;
	memset(&stepper_1,0,sizeof(stepper_1));
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2218      	movs	r2, #24
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f85e 	bl	8000ea2 <memset>

	/*Always initiate clock first before data line*/
	stepper_1.step_port = pGPIOA;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <main+0x7c>)
 8000de8:	607b      	str	r3, [r7, #4]
	stepper_1.step_pin = 5;
 8000dea:	2305      	movs	r3, #5
 8000dec:	723b      	strb	r3, [r7, #8]
	stepper_1.step_alt_mode = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	727b      	strb	r3, [r7, #9]
	stepper_1.step_timer_port = pTIM2;
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000df6:	60fb      	str	r3, [r7, #12]
	stepper_1.step_channel = TIMx_CH1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	743b      	strb	r3, [r7, #16]
	stepper_1.step_IRQ_number = IRQ_NO_TIM2;
 8000dfc:	231c      	movs	r3, #28
 8000dfe:	747b      	strb	r3, [r7, #17]

	stepper_1.dir_port = pGPIOA;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <main+0x7c>)
 8000e02:	617b      	str	r3, [r7, #20]
	stepper_1.dir_pin = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	763b      	strb	r3, [r7, #24]
	stepper_1.dir_alt_mode = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	767b      	strb	r3, [r7, #25]


	A4988_init(&stepper_1);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9f8 	bl	8000204 <A4988_init>

    /* Loop forever */
	for(;;){
		A4988_move_Step(20,HIGH,timer);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <main+0x78>)
 8000e16:	466c      	mov	r4, sp
 8000e18:	f103 0208 	add.w	r2, r3, #8
 8000e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e22:	cb0c      	ldmia	r3, {r2, r3}
 8000e24:	2101      	movs	r1, #1
 8000e26:	2014      	movs	r0, #20
 8000e28:	f7ff faa6 	bl	8000378 <A4988_move_Step>
		for(uint32_t i = 0; i < 100000; i++);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	e002      	b.n	8000e38 <main+0x6c>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <main+0x80>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d9f8      	bls.n	8000e32 <main+0x66>
		A4988_move_Step(20,HIGH,timer);
 8000e40:	e7e8      	b.n	8000e14 <main+0x48>
 8000e42:	bf00      	nop
 8000e44:	20000080 	.word	0x20000080
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	0001869f 	.word	0x0001869f

08000e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7e:	f000 f819 	bl	8000eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff ffa3 	bl	8000dcc <main>

08000e86 <LoopForever>:

LoopForever:
  b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e94:	08000f1c 	.word	0x08000f1c
  ldr r2, =_sbss
 8000e98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>

08000ea2 <memset>:
 8000ea2:	4402      	add	r2, r0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d100      	bne.n	8000eac <memset+0xa>
 8000eaa:	4770      	bx	lr
 8000eac:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb0:	e7f9      	b.n	8000ea6 <memset+0x4>
	...

08000eb4 <__libc_init_array>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8000eec <__libc_init_array+0x38>)
 8000eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8000ef0 <__libc_init_array+0x3c>)
 8000eba:	1b64      	subs	r4, r4, r5
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	42a6      	cmp	r6, r4
 8000ec2:	d109      	bne.n	8000ed8 <__libc_init_array+0x24>
 8000ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8000ef4 <__libc_init_array+0x40>)
 8000ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8000ef8 <__libc_init_array+0x44>)
 8000ec8:	f000 f818 	bl	8000efc <_init>
 8000ecc:	1b64      	subs	r4, r4, r5
 8000ece:	10a4      	asrs	r4, r4, #2
 8000ed0:	2600      	movs	r6, #0
 8000ed2:	42a6      	cmp	r6, r4
 8000ed4:	d105      	bne.n	8000ee2 <__libc_init_array+0x2e>
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000edc:	4798      	blx	r3
 8000ede:	3601      	adds	r6, #1
 8000ee0:	e7ee      	b.n	8000ec0 <__libc_init_array+0xc>
 8000ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee6:	4798      	blx	r3
 8000ee8:	3601      	adds	r6, #1
 8000eea:	e7f2      	b.n	8000ed2 <__libc_init_array+0x1e>
 8000eec:	08000f14 	.word	0x08000f14
 8000ef0:	08000f14 	.word	0x08000f14
 8000ef4:	08000f14 	.word	0x08000f14
 8000ef8:	08000f18 	.word	0x08000f18

08000efc <_init>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr

08000f08 <_fini>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	bf00      	nop
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr
