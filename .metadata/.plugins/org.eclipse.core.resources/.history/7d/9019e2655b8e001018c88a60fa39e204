/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "../Driver/Inc/stm32f446xx.h"
#include "../Bsp/StepperMotor_A4988.h"
#include "stddef.h"
#include <stdio.h>
#include "string.h"
// extern void initialise_monitor_handles(void);

void moveSetTest(){


}
// 1 = UP and 0 = DOWN
int main(void)
{
	//	initialise_monitor_handles();   // <-- enable semihosting


	A4988_config_t stepper_1;
	memset(&stepper_1, 0, sizeof(stepper_1));
	/*Always initiate clock first before data line*/
	stepper_1.step_port = pGPIOA;
	stepper_1.step_pin = 5;
	stepper_1.step_alt_mode = 1;
	stepper_1.step_timer_port = pTIM2;
	stepper_1.step_channel = TIMx_CH1;
	stepper_1.step_IRQ_number = IRQ_NO_TIM2;

	stepper_1.dir_port = pGPIOA;
	stepper_1.dir_pin = 9;


	A4988_init(&stepper_1);


	A4988_config_t stepper_2;
	memset(&stepper_2, 0, sizeof(stepper_2));
	/*Always initiate clock first before data line*/
	// PB4
	stepper_2.step_port = pGPIOB; // change port
	stepper_2.step_pin = 4; // change pin
	stepper_2.step_alt_mode = 2; // chage alt
	stepper_2.step_timer_port = pTIM3;
	stepper_2.step_channel = TIMx_CH1; // change channel
	stepper_2.step_IRQ_number = IRQ_NO_TIM3;
	// PB5
	stepper_2.dir_port = pGPIOB;
	stepper_2.dir_pin = 5;


	A4988_init(&stepper_2);


	/* Loop forever */
	for (;;)
	{
		A4988_move_Step(200, HIGH, stepper_1.step_timer_port);
		for (uint32_t i = 0; i < 1000000; i++);
		A4988_move_Step(200, HIGH, stepper_2.step_timer_port);

	}
}

// void TIM2_IRQHandler(void){
//    // 1. Clear interrupt flag
//	PWM2.pTIMx->SR &= ~(1 << TIM_SR_UIF_POS);  // Clear update interrupt flag
//     // 2. Update CCR register to change pulse width (duty cycle) or timing
//	if(status == 1) pulse += 1;
//	else  pulse -= 1;
//
//    if (pulse >= PWM2.pTIMx->ARR){
//
//    	status *= -1;
//     }
//    PWM2.pTIMx->CCR1 = pulse;
//
// }
